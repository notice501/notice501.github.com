<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code Rush]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://foocoder.com/"/>
  <updated>2016-01-14T12:54:48.000Z</updated>
  <id>http://foocoder.com/</id>
  
  <author>
    <name><![CDATA[foocoder]]></name>
    <email><![CDATA[notice520@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[vim中的语法检查-syntastic]]></title>
    <link href="http://foocoder.com/2014/05/13/vimzhong-de-yu-fa-jian-cha-syntastic/"/>
    <id>http://foocoder.com/2014/05/13/vimzhong-de-yu-fa-jian-cha-syntastic/</id>
    <published>2014-05-13T11:29:00.000Z</published>
    <updated>2016-01-14T12:54:48.000Z</updated>
    <content type="html"><![CDATA[<p>最近比较忙，有几天没更新了。今天有个同事问我一个语法插件的问题，向他介绍了Sytanstic.vim。那今天就来介绍下这个必备的插件吧。</p>
<p>很多人喜欢IDE就是因为他的语法检查，有了<a href="https://github.com/scrooloose/syntastic" target="_blank" rel="external">Sytanstic.vim</a>,这个问题就不复存在了。（当然，仅仅是语法检查）</p>
<h2 id="u529F_u80FD"><a href="#u529F_u80FD" class="headerlink" title="功能"></a>功能</h2><p>上一张官方图：</p>
<p><img src="http://foocoder.qiniudn.com/blog/syntasticsyntastic.png?token=hYfsyKwhHPe-Ga-1Hypx5F8CwimEywvTI8XdNpEm:z6zQYbdezgOYcKfzok7LEkuRDkg=:eyJTIjoiZm9vY29kZXIucWluaXVkbi5jb20vYmxvZy9zeW50YXN0aWNzeW50YXN0aWMucG5nIiwiRSI6MTQwMDA2ODU2N30=" alt=""></p>
<a id="more"></a>
<p>图片很清楚的介绍了插件功能：</p>
<ol>
<li>用location list 列出所有错误。</li>
<li>命令行窗口显示当前错误。</li>
<li>错误标记，有警告和错误。</li>
<li>鼠标悬停可以出现错误提示框</li>
<li>状态栏标记。</li>
</ol>
<h2 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h2><p>Sytanstic目前支持了大多数常用语言，但是并不都打包在插件当中，而是可以按需安装相关的语法检查工具。在<a href="https://github.com/scrooloose/syntastic/wiki/Syntax-Checkers" target="_blank" rel="external">wiki</a>页面可以看到所有的语法检查包。</p>
<p>以javascript为例。在安装完syntastic之后（推荐使用vundle），我选择使用jshint来作为js的语法检查工具。</p>
<p>首先安装：</p>
<pre><code>npm install jshint -g
</code></pre><p>注意安装后jshint需要在系统环境变量中，否则需要指定path：</p>
<pre><code>g:syntastic_jshint_exec
</code></pre><p>指定jshint的配置文件目录：</p>
<pre><code>g:syntastic_javascript_jshint_conf
</code></pre><p>jshint的配置这里就不说了，参看<a href="http://jshint.com/docs/" target="_blank" rel="external">文档</a></p>
<p>这样js语法检查就可以工作了。</p>
<h2 id="u914D_u7F6E"><a href="#u914D_u7F6E" class="headerlink" title="配置"></a>配置</h2><p>当然也可以做一些简单的配置，比如设置为每次打开buffer就执行语法检查，而不只是在保存时：</p>
<pre><code>let g:syntastic_check_on_open = 1
</code></pre><p>如果想使用多个检查器，可以这样写：</p>
<pre><code>let g:syntastic_php_checkers = [&apos;php&apos;, &apos;phpcs&apos;, &apos;phpmd&apos;]
</code></pre><h2 id="u9519_u8BEF_u8DF3_u8F6C"><a href="#u9519_u8BEF_u8DF3_u8F6C" class="headerlink" title="错误跳转"></a>错误跳转</h2><p>syntastic使用location list来显示所有的错误，location list和quificfix 类似，包含了位置信息。</p>
<p>调起这个location list</p>
<pre><code>:Errors 或者 :lopen
</code></pre><p>使用<code>:lne[xt]</code>和<code>:lp[revious]</code>就可以在错误间跳转。当然，如果用的多，可以做个mapping。</p>
<p>今天就介绍到这里。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近比较忙，有几天没更新了。今天有个同事问我一个语法插件的问题，向他介绍了Sytanstic.vim。那今天就来介绍下这个必备的插件吧。</p>
<p>很多人喜欢IDE就是因为他的语法检查，有了<a href="https://github.com/scrooloose/syntastic">Sytanstic.vim</a>,这个问题就不复存在了。（当然，仅仅是语法检查）</p>
<h2 id="u529F_u80FD"><a href="#u529F_u80FD" class="headerlink" title="功能"></a>功能</h2><p>上一张官方图：</p>
<p><img src="http://foocoder.qiniudn.com/blog/syntasticsyntastic.png?token=hYfsyKwhHPe-Ga-1Hypx5F8CwimEywvTI8XdNpEm:z6zQYbdezgOYcKfzok7LEkuRDkg=:eyJTIjoiZm9vY29kZXIucWluaXVkbi5jb20vYmxvZy9zeW50YXN0aWNzeW50YXN0aWMucG5nIiwiRSI6MTQwMDA2ODU2N30=" alt=""></p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[vim 重复操作的利器--点命令]]></title>
    <link href="http://foocoder.com/2014/05/06/vim-zhong-fu-cao-zuo-de-li-qi-dian-ming-ling/"/>
    <id>http://foocoder.com/2014/05/06/vim-zhong-fu-cao-zuo-de-li-qi-dian-ming-ling/</id>
    <published>2014-05-06T12:18:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://ww4.sinaimg.cn/large/69d56e38gw1eg4vqmtvzsj20b408cdgf.jpg" alt=""></p>
<p>之前介绍过可以重复motion的插件space.vim，有朋友留言说<code>.</code>不是也可以？其实<code>.</code>确实可以重复很多动作，但是无法重复motion。其实<code>;</code>和<code>,</code>倒是可以重复motion。不过space.vim可以重复更多操作，之前的博客有全部列出来。</p>
<p>今天主要就介绍<code>.</code>命令。</p>
<p>这个命令就用来重复上一次的操作。比如:<code>dw</code>,再按<code>.</code>就会再删除一个单词。他可以重复的命令非常多，比如插入操作<code>a</code>,<code>i</code>，比如替换删除操作<code>c</code>,<code>s</code>, <code>r</code>还有<code>J</code>,<code>~</code>等常用的操作。但是我却很难概括他到底可以重复哪些操作，我基本归纳为重复对当前buffer造成改变的操作，虽然并不准确.</p>
<p>了解了基本的用途，来看看使用场景吧。我说说我一般的用法:</p>
<a id="more"></a>
<ol>
<li><code>ciw</code>替换文本，然后在另一个也需要替换相同文本的单词处按下<code>.</code>，就可以执行相同的替换操作。</li>
<li><code>dd</code>,<code>dw</code>,然后按下<code>.</code>就会再次删除一句或一个单词。我觉得连续输入<code>.</code>比数几秒有几个或几行比打<code>3dw/3dd</code>要更自然和更快，当然你觉得<code>3dw</code>更快也很正常.</li>
</ol>
<p>这两个是我用的最多的，每天必用。大家有其他好用的欢迎补充。</p>
<p>今天还要介绍一个插件，叫做<a href="https://github.com/tpope/vim-repeat" target="_blank" rel="external">repeat.vim</a>,和之前介绍过的surround.vim一样，来自tpope。repeat.vim做的事情很简单，重复一个插件操作，其中当然就支持surround.vim。这非常有用，比如给一个单词加了双引号，再按下<code>.</code>就可以也为另一个单词加上了。</p>
<p>repeat.vim还支持：</p>
<ul>
<li><a href="https://github.com/tpope/vim-speeddating" target="_blank" rel="external">speeddating.vim</a></li>
<li><a href="https://github.com/tpope/vim-abolish" target="_blank" rel="external">abolish.vim</a></li>
<li><a href="https://github.com/tpope/vim-unimpaired" target="_blank" rel="external">unimpaired.vim</a></li>
<li><a href="https://github.com/tpope/vim-commentary" target="_blank" rel="external">commentary.vim</a></li>
</ul>
<p>其中unimpaired.vim我也在用，下次可以介绍下。</p>
<p>今天就介绍到这里。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://ww4.sinaimg.cn/large/69d56e38gw1eg4vqmtvzsj20b408cdgf.jpg" alt=""></p>
<p>之前介绍过可以重复motion的插件space.vim，有朋友留言说<code>.</code>不是也可以？其实<code>.</code>确实可以重复很多动作，但是无法重复motion。其实<code>;</code>和<code>,</code>倒是可以重复motion。不过space.vim可以重复更多操作，之前的博客有全部列出来。</p>
<p>今天主要就介绍<code>.</code>命令。</p>
<p>这个命令就用来重复上一次的操作。比如:<code>dw</code>,再按<code>.</code>就会再删除一个单词。他可以重复的命令非常多，比如插入操作<code>a</code>,<code>i</code>，比如替换删除操作<code>c</code>,<code>s</code>, <code>r</code>还有<code>J</code>,<code>~</code>等常用的操作。但是我却很难概括他到底可以重复哪些操作，我基本归纳为重复对当前buffer造成改变的操作，虽然并不准确.</p>
<p>了解了基本的用途，来看看使用场景吧。我说说我一般的用法:</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--平滑滚动accelerated-smooth-scroll.vim]]></title>
    <link href="http://foocoder.com/2014/04/29/mei-ri-vimcha-jian-ping-hua-gun-dong-accelerated-smooth-scroll-dot-vim/"/>
    <id>http://foocoder.com/2014/04/29/mei-ri-vimcha-jian-ping-hua-gun-dong-accelerated-smooth-scroll-dot-vim/</id>
    <published>2014-04-29T14:11:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>今天介绍一个简单的插件：<a href="https://github.com/yonchu/accelerated-smooth-scroll" target="_blank" rel="external">accelerated-smooth-scroll.</a><br>很简单，就是让<code>&lt;C-D&gt;/&lt;C-U&gt;</code>和<code>&lt;C-F&gt;/&lt;C-B&gt;</code>不再突然出现，而是出现滚动效果。同时，在连续滚动时，还有加速效果。<br>做了个gif图，真实效果比图片要更流畅一些，如图所示：</p>
<p><img src="http://ww4.sinaimg.cn/large/69d56e38gw1efwtsjauuag20qj0ivkjm.gif" alt=""></p>
<p>今天就介绍它啦。几乎是用的最多的插件……</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天介绍一个简单的插件：<a href="https://github.com/yonchu/accelerated-smooth-scroll" target="_blank" rel="external">accelerated-smooth-scroll.</a><b]]>
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--强大的自动补全neocomplete.vim和supertab]]></title>
    <link href="http://foocoder.com/2014/04/28/mei-ri-vimcha-jian-qiang-da-de-zi-dong-bu-quan-neocomplete-dot-vim/"/>
    <id>http://foocoder.com/2014/04/28/mei-ri-vimcha-jian-qiang-da-de-zi-dong-bu-quan-neocomplete-dot-vim/</id>
    <published>2014-04-28T13:02:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>#neocomplete.vim</p>
<p>今天介绍两个个必备的vim插件，自动补全插件——<a href="https://github.com/Shougo/neocomplete.vim" target="_blank" rel="external">neocomplete.vim</a>和superTab。</p>
<p>neocomplete.vim是来自shougo的作品。该插件维护了当前buffer的一个关键词列表，从而提供强大的关键词补全功能。</p>
<p>该插件是他前作neocomplcache的升级版，速度更快，功能更强大。不过该插件需要<a href="http://vimdoc.sourceforge.net/htmldoc/if_lua.html" target="_blank" rel="external">if_lua</a>的支持。</p>
<p>mac下安装：</p>
<pre><code>brew install macvim --with-cscope --with-lua --HEAD
</code></pre><p>或者不用macvim（真的不用么？赶紧试试吧）：</p>
<pre><code>brew install vim --with-lua
</code></pre><p>不需要过多的介绍,看作者给的图：</p>
<a id="more"></a>
<h3 id="u6587_u4EF6_u8865_u5168"><a href="#u6587_u4EF6_u8865_u5168" class="headerlink" title="文件补全"></a>文件补全</h3><p><img src="https://f.cloud.github.com/assets/41495/622454/f519f6b8-cf42-11e2-921e-6e34dba148a6.png" alt="Original filename completion."><br><img src="https://f.cloud.github.com/assets/214488/623151/284ad86e-cf5b-11e2-828e-257d31bf0572.png" alt="Include filename completion."></p>
<h3 id="Omni__u8865_u5168"><a href="#Omni__u8865_u5168" class="headerlink" title="Omni 补全"></a>Omni 补全</h3><p><img src="https://f.cloud.github.com/assets/41495/622456/fb2cc0bc-cf42-11e2-94e8-403cdcf5427e.png" alt="Omni completion."></p>
<h3 id="vimshell_u8865_u5168"><a href="#vimshell_u8865_u5168" class="headerlink" title="vimshell补全"></a><a href="http://github.com/Shougo/vimshell" target="_blank" rel="external">vimshell</a>补全</h3><p><img src="https://f.cloud.github.com/assets/41495/622458/01dbc660-cf43-11e2-85f1-326e7432b0a1.png" alt="Completion with vimshell(http://github.com/Shougo/vimshell)."></p>
<h3 id="Vim__u8865_u5168"><a href="#Vim__u8865_u5168" class="headerlink" title="Vim 补全"></a>Vim 补全</h3><p><img src="https://f.cloud.github.com/assets/41495/622457/fe90ad5e-cf42-11e2-8e03-8f189b5e26e5.png" alt="Vim completion."><br><img src="https://f.cloud.github.com/assets/214488/623496/94ed19a2-cf68-11e2-8d33-3aad8a39d7c1.gif" alt="Vim completion with animation."></p>
<p>作者还给出了推荐配置，每个配置都有对应的英文注释，我就不一一翻译了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!</span><br><span class="line">" Disable AutoComplPop.</span><br><span class="line">let g:acp_enableAtStartup = 0</span><br><span class="line">" Use neocomplete.</span><br><span class="line">let g:neocomplete#enable_at_startup = 1</span><br><span class="line">" Use smartcase.</span><br><span class="line">let g:neocomplete#enable_smart_case = 1</span><br><span class="line">" Set minimum syntax keyword length.</span><br><span class="line">let g:neocomplete#sources#syntax#min_keyword_length = 3</span><br><span class="line">let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'</span><br><span class="line"></span><br><span class="line">" Define dictionary.</span><br><span class="line">let g:neocomplete#sources#dictionary#dictionaries = &#123;</span><br><span class="line">    \ 'default' : '',</span><br><span class="line">    \ 'vimshell' : $HOME.'/.vimshell_hist',</span><br><span class="line">    \ 'scheme' : $HOME.'/.gosh_completions'</span><br><span class="line">        \ &#125;</span><br><span class="line"></span><br><span class="line">" Define keyword.</span><br><span class="line">if !exists('g:neocomplete#keyword_patterns')</span><br><span class="line">    let g:neocomplete#keyword_patterns = &#123;&#125;</span><br><span class="line">endif</span><br><span class="line">let g:neocomplete#keyword_patterns['default'] = '\h\w*'</span><br><span class="line"></span><br><span class="line">" Plugin key-mappings.</span><br><span class="line">inoremap &lt;expr&gt;&lt;C-g&gt;     neocomplete#undo_completion()</span><br><span class="line">inoremap &lt;expr&gt;&lt;C-l&gt;     neocomplete#complete_common_string()</span><br><span class="line"></span><br><span class="line">" Recommended key-mappings.</span><br><span class="line">" &lt;CR&gt;: close popup and save indent.</span><br><span class="line">inoremap &lt;silent&gt; &lt;CR&gt; &lt;C-r&gt;=&lt;SID&gt;my_cr_function()&lt;CR&gt;</span><br><span class="line">function! s:my_cr_function()</span><br><span class="line">  return neocomplete#close_popup() . "\&lt;CR&gt;"</span><br><span class="line">  " For no inserting &lt;CR&gt; key.</span><br><span class="line">  "return pumvisible() ? neocomplete#close_popup() : "\&lt;CR&gt;"</span><br><span class="line">endfunction</span><br><span class="line">" &lt;TAB&gt;: completion.</span><br><span class="line">inoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? "\&lt;C-n&gt;" : "\&lt;TAB&gt;"</span><br><span class="line">" &lt;C-h&gt;, &lt;BS&gt;: close popup and delete backword char.</span><br><span class="line">inoremap &lt;expr&gt;&lt;C-h&gt; neocomplete#smart_close_popup()."\&lt;C-h&gt;"</span><br><span class="line">inoremap &lt;expr&gt;&lt;BS&gt; neocomplete#smart_close_popup()."\&lt;C-h&gt;"</span><br><span class="line">inoremap &lt;expr&gt;&lt;C-y&gt;  neocomplete#close_popup()</span><br><span class="line">inoremap &lt;expr&gt;&lt;C-e&gt;  neocomplete#cancel_popup()</span><br><span class="line">" Close popup by &lt;Space&gt;.</span><br><span class="line">"inoremap &lt;expr&gt;&lt;Space&gt; pumvisible() ? neocomplete#close_popup() : "\&lt;Space&gt;"</span><br><span class="line"></span><br><span class="line">" For cursor moving in insert mode(Not recommended)</span><br><span class="line">"inoremap &lt;expr&gt;&lt;Left&gt;  neocomplete#close_popup() . "\&lt;Left&gt;"</span><br><span class="line">"inoremap &lt;expr&gt;&lt;Right&gt; neocomplete#close_popup() . "\&lt;Right&gt;"</span><br><span class="line">"inoremap &lt;expr&gt;&lt;Up&gt;    neocomplete#close_popup() . "\&lt;Up&gt;"</span><br><span class="line">"inoremap &lt;expr&gt;&lt;Down&gt;  neocomplete#close_popup() . "\&lt;Down&gt;"</span><br><span class="line">" Or set this.</span><br><span class="line">"let g:neocomplete#enable_cursor_hold_i = 1</span><br><span class="line">" Or set this.</span><br><span class="line">"let g:neocomplete#enable_insert_char_pre = 1</span><br><span class="line"></span><br><span class="line">" AutoComplPop like behavior.</span><br><span class="line">"let g:neocomplete#enable_auto_select = 1</span><br><span class="line"></span><br><span class="line">" Shell like behavior(not recommended).</span><br><span class="line">"set completeopt+=longest</span><br><span class="line">"let g:neocomplete#enable_auto_select = 1</span><br><span class="line">"let g:neocomplete#disable_auto_complete = 1</span><br><span class="line">"inoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? "\&lt;Down&gt;" : "\&lt;C-x&gt;\&lt;C-u&gt;"</span><br><span class="line"></span><br><span class="line">" Enable omni completion.</span><br><span class="line">autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS</span><br><span class="line">autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags</span><br><span class="line">autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS</span><br><span class="line">autocmd FileType python setlocal omnifunc=pythoncomplete#Complete</span><br><span class="line">autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags</span><br><span class="line"></span><br><span class="line">" Enable heavy omni completion.</span><br><span class="line">if !exists('g:neocomplete#sources#omni#input_patterns')</span><br><span class="line">  let g:neocomplete#sources#omni#input_patterns = &#123;&#125;</span><br><span class="line">endif</span><br><span class="line">"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]-&gt;\h\w*\|\h\w*::'</span><br><span class="line">"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|-&gt;\)'</span><br><span class="line">"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|-&gt;\)\|\h\w*::'</span><br><span class="line"></span><br><span class="line">" For perlomni.vim setting.</span><br><span class="line">" https://github.com/c9s/perlomni.vim</span><br><span class="line">let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*-&gt;\h\w*\|\h\w*::'</span><br></pre></td></tr></table></figure>
<p>没有特殊需求，直接copy就用即可。没有复杂的配置，用起来还是非常简单的。</p>
<p>还有一个比较出名的补全插件是<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a>.大家也可以去看下，应该是现在用的最广泛的补全插件了。我很早就试用过，还是neocomplete要更顺手更快些，总感觉neocomplete要更智能些。</p>
<p>#superTab</p>
<p>说到补全还有个不得不说，那就是tab键，必须用tab来进行补全那才是补全啊。其实neocomplete的推荐配置已经配置成了自动提示补全文字，并且支持tab选择，但是还是无法<code>shift-tab</code>回退选择。superTab就是为增强tab而生，当然可以做到这点。</p>
<p>superTab 和neocomplete一样，几乎不用自己折腾什么配置，也不用过多的介绍，一句话就可以说完它的功能。</p>
<pre><code>bar
baz
b*&lt;Tab&gt; (*为光标所在位置) 
</code></pre><p>按示例在光标处按下tab，就会展开推荐补全bar和baz，按tab即可进行循环选择。</p>
<p>可以配置supertab的默认补全类型（对vim补全不了解的同学自己补下omni补全相关知识，需要我介绍可以回复下）：</p>
<pre><code>let g:SuperTabDefaultCompletionType = &quot;&lt;c-x&gt;&lt;c-u&gt;&quot;
</code></pre><p>示例把supertab修改为了用户补全，默认是<code>&lt;c-p&gt;</code>.</p>
<p>今天就介绍到这里。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>#neocomplete.vim</p>
<p>今天介绍两个个必备的vim插件，自动补全插件——<a href="https://github.com/Shougo/neocomplete.vim">neocomplete.vim</a>和superTab。</p>
<p>neocomplete.vim是来自shougo的作品。该插件维护了当前buffer的一个关键词列表，从而提供强大的关键词补全功能。</p>
<p>该插件是他前作neocomplcache的升级版，速度更快，功能更强大。不过该插件需要<a href="http://vimdoc.sourceforge.net/htmldoc/if_lua.html">if_lua</a>的支持。</p>
<p>mac下安装：</p>
<pre><code>brew install macvim --with-cscope --with-lua --HEAD
</code></pre><p>或者不用macvim（真的不用么？赶紧试试吧）：</p>
<pre><code>brew install vim --with-lua
</code></pre><p>不需要过多的介绍,看作者给的图：</p>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--Gist.vim]]></title>
    <link href="http://foocoder.com/2014/04/25/mei-ri-vimcha-jian-gist-dot-vim/"/>
    <id>http://foocoder.com/2014/04/25/mei-ri-vimcha-jian-gist-dot-vim/</id>
    <published>2014-04-25T11:58:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efs6kvu5zpj20m80go3z0.jpg" alt=""><br>今天介绍的插件<a href="https://github.com/mattn/gist-vim" target="_blank" rel="external">Gist.vim</a>能够在vim中方便的创建和查看gist。</p>
<p>gist我就不过多介绍了，github提供的一个代码片段托管服务。不太了解的同学可以看看<a href="http://www.worldhello.net/gotgithub/06-side-projects/gist.html" target="_blank" rel="external">这个教程</a></p>
<p>要使用这个插件需要安装ygie依赖插件：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bundle <span class="string">'mattn/webapi-vim'</span></span><br><span class="line">Bundle <span class="string">'mattn/gist-vim'</span></span><br></pre></td></tr></table></figure>
<p>确保在git的global配置中设置的是github用户名：</p>
<pre><code>$ git config --global github.user &lt;username&gt;
</code></pre><p>该插件在首次使用时会需要你输入github密码来获取token，并将其保存在<code>~/.gist-vim</code>.</p>
<a id="more"></a>
<p>使用非常的简单，输入命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:Gist</span><br></pre></td></tr></table></figure>
<p>就会将该整个文件创建一个Gist，创建成功后会显示Gist地址，如图：<br><img src="http://ww3.sinaimg.cn/large/69d56e38gw1efs60clnedj20my040gm2.jpg" alt=""></p>
<p>也可以选中一段代码创建Gist：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:&apos;&lt;,&apos;&gt;Gist</span><br></pre></td></tr></table></figure>
<p>还提供了一些参数</p>
<p>例如<code>-a</code>,表示匿名创建，<code>-p</code>创建pravite 的gist，<code>-P</code>创建public的gist。<code>-m</code>为所有打开的buffer创建Gist。</p>
<p>除此之外，还可以编辑Gist(已打开了一个gist buffer的情况下)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:Gist -e</span><br></pre></td></tr></table></figure>
<p>加上描述</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:Gist -s something</span><br></pre></td></tr></table></figure>
<p>删除：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:Gist -d</span><br></pre></td></tr></table></figure>
<p>fork:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:Gist -f</span><br></pre></td></tr></table></figure>
<p>star:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:Gist +1</span><br></pre></td></tr></table></figure>
<p>unstar:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:Gist -1</span><br></pre></td></tr></table></figure>
<p>还可以直接取得Gist：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:Gist XXXXX</span><br></pre></td></tr></table></figure>
<p>一般你不记得gist号码，没关系，还可以列出所有的Gist,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:Gist -l</span><br></pre></td></tr></table></figure>
<p>这样会打开一个新的分隔窗口显示你已有的gist列表，按回车就可以直接去取这个gist并在vim中查看了。</p>
<p>还提供了一些非常有用的配置，比如：</p>
<p>如果你想要在创建了gist后立刻打开浏览器查看：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:gist_open_browser_after_post</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>如果想要默认创建的gist不是public而是private：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:gist_post_private</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>有了这个插件，玩转gist是不是非常easy啦。这个插件唯一的不足在于在创建gist或者请求gist时会阻塞界面，这个有点糟糕。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efs6kvu5zpj20m80go3z0.jpg" alt=""><br>今天介绍的插件<a href="https://github.com/mattn/gist-vim">Gist.vim</a>能够在vim中方便的创建和查看gist。</p>
<p>gist我就不过多介绍了，github提供的一个代码片段托管服务。不太了解的同学可以看看<a href="http://www.worldhello.net/gotgithub/06-side-projects/gist.html">这个教程</a></p>
<p>要使用这个插件需要安装ygie依赖插件：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bundle <span class="string">'mattn/webapi-vim'</span></span><br><span class="line">Bundle <span class="string">'mattn/gist-vim'</span></span><br></pre></td></tr></table></figure>
<p>确保在git的global配置中设置的是github用户名：</p>
<pre><code>$ git config --global github.user &lt;username&gt;
</code></pre><p>该插件在首次使用时会需要你输入github密码来获取token，并将其保存在<code>~/.gist-vim</code>.</p>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--代码搜索ack.vim/ag/ctlsf.vim]]></title>
    <link href="http://foocoder.com/2014/04/24/mei-ri-vimcha-jian-dai-ma-sou-suo-ctlsf-dot-vim/"/>
    <id>http://foocoder.com/2014/04/24/mei-ri-vimcha-jian-dai-ma-sou-suo-ctlsf-dot-vim/</id>
    <published>2014-04-24T11:11:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>#ack.vim</p>
<p><a href="https://github.com/petdance/ack" target="_blank" rel="external">ack.vim</a>。应该是大多数vimer的必装插件。</p>
<p>在写这篇文章的时候才发现ack已经发布了2.0版本，并且ack 1已经不再维护。但是两者差别不大。这里介绍的基于2.0版本。</p>
<p>ack就是一个代码搜索工具，类似grep，用perl编写，充分利用了perl对正则的强大处理能力。为什么用ack而不是直接用grep？ack号称超越了grep。我基本认同。</p>
<ol>
<li>ack会显示搜索到的行号列号。</li>
<li>会自动忽略.git这样的文件类型。</li>
<li>速度很快。</li>
<li>最重要的是相对grep是一个文本搜索工具，ack就是一个代码搜索工具。你只会搜索到你的js文件，php文件，而不会搜到一些意外的文件类型。</li>
</ol>
<a id="more"></a>
<p>再也不用这样输入：</p>
<pre><code>grep foo $(find . -name &apos;*.pm&apos; | grep -v .svn)
</code></pre><p>ack的使用很简单，命令输入：</p>
<pre><code>ack [OPTION]... PATTERN [FILES OR DIRECTORIES]
</code></pre><p>如果不输入文件或者文件夹，则默认在当前目录及子目录下搜索。</p>
<p>ack大致有如下几类OPTION，</p>
<ol>
<li>搜索选项，例如-i, –ignore-case ，忽略pattern的大小写</li>
<li>搜索结果处理选项，例如 -l，只打印有匹配的文件名。</li>
<li>搜索输出展现选项，例如–heading，在头部输出匹配文件的文件名</li>
<li>文件搜索，是的，他还是find。例如 <code>Ack -f servicemodel</code> 查找servicemodel相匹配的文件。</li>
<li>文件过滤。例如 –[no]ignore-dir=name  从待搜索目录中添加或删除目录。</li>
</ol>
<p>具体的option可以查看ack文档.</p>
<p>这些option都可以直接配置到.ackrc中，作为默认配置。全局的ackrc放置于<code>/etc/ackrc</code>,用户的放在<code>$HOME/.ackrc</code>,仅仅用于某项目的就放在项目根目录中。</p>
<p>ack搜索结果如图所示：</p>
<p><img src="http://ww3.sinaimg.cn/large/69d56e38gw1efr1w9s9i8j21kw0ghafr.jpg" alt=""></p>
<p>会打开Quickfix窗口。显示文件名，对于的行列和该行内容。按<code>t</code>可以在新标签打开，按回车直接打开，按v分隔垂直窗口打开等等。和前天介绍的NERD Tree等大多数插件的操作类似。</p>
<h1 id="ag-vim"><a href="#ag-vim" class="headerlink" title="ag.vim"></a>ag.vim</h1><p>ack的用法就介绍到这里，这里还要介绍的是<a href="https://github.com/ggreer/the_silver_searcher" target="_blank" rel="external">ag</a>.和ack没什么区别，只是更快。</p>
<p>OS X下安装：</p>
<pre><code>brew install the_silver_searcher
</code></pre><p>在vim中进行配置：</p>
<pre><code>let g:ackprg = &apos;ag --nogroup --nocolor --column&apos;
</code></pre><p>也可以直接安装<a href="https://github.com/rking/ag.vim" target="_blank" rel="external">ag.vim</a>.ack 的 Silver Searcher fork版本。</p>
<h1 id="ctrlsf-vim"><a href="#ctrlsf-vim" class="headerlink" title="ctrlsf.vim"></a>ctrlsf.vim</h1><p>作者原图：</p>
<p><img src="https://camo.githubusercontent.com/fae368edf534ce2228eda41418cb55ee68e19c20/687474703a2f2f692e696d6775722e636f6d2f6d6c576a336d7a2e676966" alt=""></p>
<p>在安装了ack或者ag的基础上再安装该插件即可。正如它的名字，它提供了和sublime text 2中Ctrl-Shift-F 一样的搜索效果。和ack或者ag不同的是，不再是显示一行，而是显示整个上下文。非常好用。</p>
<p>除此之外，可以按下<code>p</code>进行预览，运行<code>:CtrlSFOpen</code>重新打开搜索结果窗口(默认选择后关闭搜索窗口)。这个插件也是来自国内的朋友。</p>
<p>今天就介绍到这。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>#ack.vim</p>
<p><a href="https://github.com/petdance/ack">ack.vim</a>。应该是大多数vimer的必装插件。</p>
<p>在写这篇文章的时候才发现ack已经发布了2.0版本，并且ack 1已经不再维护。但是两者差别不大。这里介绍的基于2.0版本。</p>
<p>ack就是一个代码搜索工具，类似grep，用perl编写，充分利用了perl对正则的强大处理能力。为什么用ack而不是直接用grep？ack号称超越了grep。我基本认同。</p>
<ol>
<li>ack会显示搜索到的行号列号。</li>
<li>会自动忽略.git这样的文件类型。</li>
<li>速度很快。</li>
<li>最重要的是相对grep是一个文本搜索工具，ack就是一个代码搜索工具。你只会搜索到你的js文件，php文件，而不会搜到一些意外的文件类型。</li>
</ol>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--命令行补全cmdline-completion]]></title>
    <link href="http://foocoder.com/2014/04/23/mei-ri-vimcha-jian-ming-ling-xing-bu-quan-cmdline-completion/"/>
    <id>http://foocoder.com/2014/04/23/mei-ri-vimcha-jian-ming-ling-xing-bu-quan-cmdline-completion/</id>
    <published>2014-04-23T13:57:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>今天介绍一个非常实用简单的插件，叫做<a href="https://github.com/vim-scripts/cmdline-completion" target="_blank" rel="external">cmdline-completion</a>.功能就和名字描述的一样，在输入命令的时候，提供补全功能。vim自身对一些命令有补全功能，该插件对其进行了增强。比如：</p>
<ol>
<li>:something<c-p></c-p></li>
<li><p>/else<c-n></c-n></p>
<p>也可以自定义快捷键进行补全：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmap</span> <span class="symbol">&lt;C-J&gt;</span> <span class="symbol">&lt;Plug&gt;</span>CmdlineCompletionBackward </span><br><span class="line"><span class="keyword">cmap</span> <span class="symbol">&lt;C-K&gt;</span> <span class="symbol">&lt;Plug&gt;</span>CmdlineCompletionForward</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p> 今天的介绍非常简短，希望大家喜欢。有问题可以回复给我。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天介绍一个非常实用简单的插件，叫做<a href="https://github.com/vim-scripts/cmdline-completion" target="_blank" rel="external">cmdline-completion</a>.功能就和名]]>
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--文件浏览器NERD Tree以及git-nerdtree,vim-nerdtree-tabs]]></title>
    <link href="http://foocoder.com/2014/04/22/mei-ri-vimcha-jian-wen-jian-liu-lan-qi-nerd-treeyi-ji-git-nerdtree-vim-nerdtree-tabs/"/>
    <id>http://foocoder.com/2014/04/22/mei-ri-vimcha-jian-wen-jian-liu-lan-qi-nerd-treeyi-ji-git-nerdtree-vim-nerdtree-tabs/</id>
    <published>2014-04-22T11:43:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>今天介绍一个必备插件——<a href="https://github.com/scrooloose/nerdtree" target="_blank" rel="external">NERD Tree</a>。这个插件基本用vim的都会知道吧。看图就知道了：<br><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efoqvqpramj21gu12i46s.jpg" alt=""></p>
<p>用它可以让vim像其他大多数编辑器或者IDE一样，打开一个分割窗口显示文件树，在这个文件树上可以通过<code>j</code>,<code>k</code>上下浏览以及其他一些快捷键进行快速文件导航。按回车就直接打开该文件，当然还可以通过<code>i</code>,<code>s</code>,<code>t</code>在分隔窗口或者在新标签页打开.</p>
<a id="more"></a>
<p>NERD Tree还支持书签。所谓书签，就是标记该文件或文件夹会优先显示在最上方。如前面图中的_posts文件夹。只要光标在该文件上输入命令<code>:Bookmark &lt;name&gt;</code>.非常方便</p>
<p>NERD Tree不想介绍过多，使用非常简单。在NerdTree窗口按下问号就会有帮助信息介绍所有的操作和对应的快捷键，常用下很快就很熟了。</p>
<p>NERD Tree有个问题在于和大多数IDE或者编辑器不同的是，在新的Tab中，NERD Tree默认是不打开的。不同的tab不能共享一个NERD Tree窗口，有人对这种方式可能就比较别扭。这时候就诞生了<a href="https://github.com/jistr/vim-nerdtree-tabs" target="_blank" rel="external">vim-nerdtree-tabs</a>.该插件就解决了这个问题，它让每个tab都有相同的NERD Tree，看起来就像NERD Tree固定在最左一样。按下<code>:NERDTreeTabsToggle</code>就可以打开或关闭所有窗口。关闭文件窗口的时候，对于tab的NERD Tree窗口也会自动关闭。</p>
<p>接下来介绍的<a href="https://github.com/Xuyuanp/git-nerdtree" target="_blank" rel="external">git-nerdtree</a>是来自@Xuyuanp的作品,通过微信公众号介绍给我。也是对NERD Tree的增强修改，增加了文件的git状态显示，和昨天的gitgutter类似，Gitgutter显示文件内的git diff，而git-nerdtree为NERD Tree增加了文件git状态的显示：</p>
<p><img src="https://camo.githubusercontent.com/3fe0388df11cb787f36e1fa108398fd3f757eef4/687474703a2f2f692e696d6775722e636f6d2f6a534377476a552e6769663f31" alt=""></p>
<p>相对应的标识如下：</p>
<ul>
<li><code>✭</code> / <code>*</code> : Untracked</li>
<li><code>✹</code> / <code>~</code> : Modified in the working tree</li>
<li><code>✚</code> / <code>+</code> : Staged in the index (Exclude Renamed status)</li>
<li><code>➜</code> / <code>»</code> : Renamed</li>
<li><code>═</code> / <code>=</code> : Unmerged</li>
<li><code>✖</code> / <code>-</code> : Deleted (This indicator can’t be shown, as NERDTree doesn’t display deleted files. I have no prefect idea to solve this problem currently.)</li>
<li><code>✗</code> / <code>×</code> : Dirty (Only for directory)</li>
<li><code>✔</code> / <code>ø</code> : Clean (Only for directory)</li>
</ul>
<p>标识方式和我之前介绍的zsh配置对git库状态的处理类似（可以查看我之前的博客）。</p>
<p>同时还支持和gitgutter一样的快捷键在各个有状态的文件之间跳转<code>[c</code>,<code>]c</code>.我只能说太棒了，再次感谢@Xuyuanp。</p>
<p>今天就介绍到这里，任何问题都可以直接回复。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天介绍一个必备插件——<a href="https://github.com/scrooloose/nerdtree">NERD Tree</a>。这个插件基本用vim的都会知道吧。看图就知道了：<br><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efoqvqpramj21gu12i46s.jpg" alt=""></p>
<p>用它可以让vim像其他大多数编辑器或者IDE一样，打开一个分割窗口显示文件树，在这个文件树上可以通过<code>j</code>,<code>k</code>上下浏览以及其他一些快捷键进行快速文件导航。按回车就直接打开该文件，当然还可以通过<code>i</code>,<code>s</code>,<code>t</code>在分隔窗口或者在新标签页打开.</p>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--显示git diff:GitGutter.vim]]></title>
    <link href="http://foocoder.com/2014/04/21/mei-ri-vimcha-jian-xian-shi-git-diff-gitgutter-dot-vim/"/>
    <id>http://foocoder.com/2014/04/21/mei-ri-vimcha-jian-xian-shi-git-diff-gitgutter-dot-vim/</id>
    <published>2014-04-21T12:44:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>周末休息了两天。今天继续。今天介绍的是一个可以显示git diff状态的插件——<a href="https://github.com/airblade/vim-gitgutter" target="_blank" rel="external">vim-gitgutter</a>.</p>
<p>所谓显示diff状态，看一张图大家就明白了<br><img src="http://ww1.sinaimg.cn/large/69d56e38gw1efni76kr62j20po0os78b.jpg" alt=""></p>
<a id="more"></a>
<p>看最左边的标记列，一看就应该明白了。波浪线表示该行相比HEAD修改过，红色的减号表示这里删除了一行，绿色的+号表示这些行都是新增的。</p>
<p>这样git diff直接就一目了然，对自己的修改就更清晰了。</p>
<p>Gitgutter还支持在每个diff区块之间跳转（像图中就分了3块）。默认快捷键为<code>[c</code>和<code>]c</code>。可以非常方便地在各diff之间跳转了。</p>
<p>当然必须可以自定义mapping：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">nmap</span> ]h <span class="symbol">&lt;Plug&gt;</span>GitGutterNextHunk</span><br><span class="line"><span class="keyword">nmap</span> [h <span class="symbol">&lt;Plug&gt;</span>GitGutterPrevHunk</span><br></pre></td></tr></table></figure>
<p>Gitgutter不仅能显示这些git diff，还能暂存<code>&lt;Leader&gt;hs</code>和回退<code>&lt;Leader&gt;hr</code>修改。</p>
<p>同样支持自定义mapping：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">ha</span> <span class="symbol">&lt;Plug&gt;</span>GitGutterStageHunk</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;Leader&gt;</span>hu <span class="symbol">&lt;Plug&gt;</span>GitGutterRevertHunk</span><br></pre></td></tr></table></figure></p>
<p>不过这个我用的不是很多，暂时没感觉需要这样细粒度的执行暂存操作。</p>
<p>但是查看diff的修改我会比较常用，快捷键<code>&lt;Leader&gt;hp</code>,他会显示diff差异。如图所示：</p>
<p><img src="http://ww3.sinaimg.cn/large/69d56e38gw1efnire8hi2j20va0po0yl.jpg" alt=""></p>
<p>gitgutter还支持自定义git diff的参数，比如：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:gitgutter_diff_args</span> = <span class="string">'-w'</span></span><br></pre></td></tr></table></figure>
<p>就介绍这么多了。btw，感觉用了gitgutter，Gundo的会变得略微慢一点。但是，Gitgutter显然是必备插件啊。有问题直接回复。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>周末休息了两天。今天继续。今天介绍的是一个可以显示git diff状态的插件——<a href="https://github.com/airblade/vim-gitgutter">vim-gitgutter</a>.</p>
<p>所谓显示diff状态，看一张图大家就明白了<br><img src="http://ww1.sinaimg.cn/large/69d56e38gw1efni76kr62j20po0os78b.jpg" alt=""></p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--快速选择文本对象wildfile.vim]]></title>
    <link href="http://foocoder.com/2014/04/18/mei-ri-vimcha-jian-kuai-su-xuan-ze-wen-ben-dui-xiang-wildfile-dot-vim/"/>
    <id>http://foocoder.com/2014/04/18/mei-ri-vimcha-jian-kuai-su-xuan-ze-wen-ben-dui-xiang-wildfile-dot-vim/</id>
    <published>2014-04-18T12:06:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>之前我们介绍了文本对象，并介绍了两个自定义文本对象的插件。今天介绍的插件也和文本对象有关。他可以用来快速的就近选择一个候选文本对象，并能通过快捷键继续简单的扩大文本对象范围。</p>
<p>这个插件就是–<a href="https://github.com/Shougo/wildfire.vim" target="_blank" rel="external">wildfire</a>（给的是shougo fork的repo地址，比较喜欢shougo这个插件作者，而且这个fork fix了一个bug）</p>
<p>插件默认定义的候选文本对象为：</p>
<pre><code>`i&apos;`, `i&quot;`, `i)`, `i]`, `i}`, `ip` and `it`
</code></pre><p>来一张官方图</p>
<a id="more"></a>
<p><img src="http://ww1.sinaimg.cn/large/69d56e38gw1efk07xfk7kg20jv087myy.gif" alt=""></p>
<p>有图应该大家能理解这个插件的作用了。</p>
<p>使用方式也非常简单，按<code>enter</code>选择最近一个文本对象，再按下<code>enter</code>在刚刚的选择之上再选择最近的文本对象。按下<code>&lt;BS&gt;</code>就能回退到上一个选择。</p>
<p>当然，你可以自定义快捷键：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" This selects the next closest text object.</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:wildfire_fuel_map</span> = <span class="string">"&lt;ENTER&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" This selects the previous closest text object.</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:wildfire_water_map</span> = <span class="string">"&lt;BS&gt;"</span></span><br></pre></td></tr></table></figure>
<p>候选的文本对象也是可以配置的：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:wildfire_objects</span> = [<span class="string">"i'"</span>, <span class="string">'i"'</span>, <span class="string">"i)"</span>, <span class="string">"i]"</span>, <span class="string">"i&#125;"</span>, <span class="string">"ip"</span>, <span class="string">"it"</span>]</span><br></pre></td></tr></table></figure>
<p>插件还支持对文件类型分别定义，比如要在html中只处理tag，忽略其他文本对象，只需要配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">" use '*' to mean 'all other filetypes'</span><br><span class="line">" in this example, html and xml share the same text objects</span><br><span class="line">let g:wildfire_objects = &#123;</span><br><span class="line">    \ "*" : ["i'", 'i"', "i)", "i]", "i&#125;", "ip"],</span><br><span class="line">    \ "html,xml" : ["at"],</span><br><span class="line">\ &#125;</span><br></pre></td></tr></table></figure>
<p>与之类似的一个用的相当广泛的插件还有<a href="https://github.com/terryma/vim-expand-region" target="_blank" rel="external">vim-expand-region</a>。大家可以自己选择。有问题欢迎留言或回复交流。也希望大家推荐自己在用，自己写的插件给我。今天看到一个朋友微信回复我的一个他自己写的插件，我已经立刻用上了，卖个关子，下次介绍。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前我们介绍了文本对象，并介绍了两个自定义文本对象的插件。今天介绍的插件也和文本对象有关。他可以用来快速的就近选择一个候选文本对象，并能通过快捷键继续简单的扩大文本对象范围。</p>
<p>这个插件就是–<a href="https://github.com/Shougo/wildfire.vim">wildfire</a>（给的是shougo fork的repo地址，比较喜欢shougo这个插件作者，而且这个fork fix了一个bug）</p>
<p>插件默认定义的候选文本对象为：</p>
<pre><code>`i&apos;`, `i&quot;`, `i)`, `i]`, `i}`, `ip` and `it`
</code></pre><p>来一张官方图</p>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--可以重复motion的space.vim]]></title>
    <link href="http://foocoder.com/2014/04/17/mei-ri-vimcha-jian-zhong-fu-motion-space-dot-vim/"/>
    <id>http://foocoder.com/2014/04/17/mei-ri-vimcha-jian-zhong-fu-motion-space-dot-vim/</id>
    <published>2014-04-17T13:10:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://ww3.sinaimg.cn/large/69d56e38gw1efiwusn0uhj20m80godg5.jpg" style="height: 400px;"></p>
<p>今天头疼的厉害。不过昨天没更新，今天必须有了。介绍个简单点的。</p>
<p>vim中在普通模式下，空格这么大一按键不用有点浪费，所以有了<a href="https://github.com/spiiph/vim-space" target="_blank" rel="external">space.vim</a>.</p>
<a id="more"></a>
<p>他能重复执行motion，比如</p>
<pre><code>*Hello World
</code></pre><p>按下<code>fo</code>,会将光标移动到第一个o上，再按下空格，就能移动到第二个o了，他会重复执行上一个<code>fo</code>。按下<code>&lt;Shift-Space&gt;</code>反向执行改操作，也就是光标又会回到第一个<code>o</code>.</p>
<p>除此之外，space.vim还能重复搜索命令，diff移动命令，qucikfix等操作。让空格键变的非常有用.下面是space.vim可以重复的全部命令列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">Character movements:                                    |left-right-motions|</span><br><span class="line">    |f| |F| |t| |T| |;| |,|</span><br><span class="line"></span><br><span class="line">Search commands:                                           |search-commands|</span><br><span class="line">    |star| |gstar| |#| |g#| |n| |N|</span><br><span class="line"></span><br><span class="line">Jump list jumps:                                              |jump-motions|</span><br><span class="line">    |CTRL-O| |CTRL-I|</span><br><span class="line"></span><br><span class="line">Change list jumps:                                       |change-list-jumps|</span><br><span class="line">    |g;| |g,|</span><br><span class="line"></span><br><span class="line">Diff jumps:                                                   |jumpto-diffs|</span><br><span class="line">    |]c| |[c|</span><br><span class="line"></span><br><span class="line">Parenthesis and bracket jumps:                             |various-motions|</span><br><span class="line">    |])| |[(| |]&#125;| |[&#123;|</span><br><span class="line"></span><br><span class="line">Method jumps:                                              |various-motions|</span><br><span class="line">    |]m| |[m| |]M| |[M|</span><br><span class="line"></span><br><span class="line">Section jumps:                                              |object-motions|</span><br><span class="line">    |]]| |[]| |][| |[[|</span><br><span class="line"></span><br><span class="line">Fold movements:</span><br><span class="line">    |zj| |zk| |]z| |[z|</span><br><span class="line"></span><br><span class="line">Tag movements:                                                |tag-commands|</span><br><span class="line">    |CTRL-]|</span><br><span class="line">    |:tag|</span><br><span class="line">    |:tnext|</span><br><span class="line">    |:tprevious|</span><br><span class="line">    |:tNext|</span><br><span class="line">    |:trewind|</span><br><span class="line">    |:tfirst|</span><br><span class="line">    |:tlast|</span><br><span class="line"></span><br><span class="line">Undolist movements:                                          |undo-branches|</span><br><span class="line">    |g-||g+|</span><br><span class="line"></span><br><span class="line">Quickfix commands:                                                |quickfix|</span><br><span class="line">    |:make|</span><br><span class="line">    |:vimgrep|</span><br><span class="line">    |:grep|</span><br><span class="line">    |:cc|</span><br><span class="line">    |:cnext|</span><br><span class="line">    |:cprevious|</span><br><span class="line">    |:cNext|</span><br><span class="line">    |:cfirst|</span><br><span class="line">    |:clast|</span><br><span class="line">    |:crewind|</span><br><span class="line">    |:cfile|</span><br><span class="line">    |:cnfile|</span><br><span class="line">    |:cpfile|</span><br><span class="line">    |:cNfile|</span><br><span class="line"></span><br><span class="line">Location list commands:                                      |location-list|</span><br><span class="line">    |:lmake|</span><br><span class="line">    |:lvimgrep|</span><br><span class="line">    |:lgrep|</span><br><span class="line">    |:ll|</span><br><span class="line">    |:lcnext|</span><br><span class="line">    |:lcprevious|</span><br><span class="line">    |:lcNext|</span><br><span class="line">    |:lcfirst|</span><br><span class="line">    |:lclast|</span><br><span class="line">    |:lcrewind|</span><br><span class="line">    |:lcfile|</span><br><span class="line">    |:lcnfile|</span><br><span class="line">    |:lcpfile|</span><br><span class="line">    |:lcNfile|</span><br></pre></td></tr></table></figure>
<p>今天解介绍到这里。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://ww3.sinaimg.cn/large/69d56e38gw1efiwusn0uhj20m80godg5.jpg" style="height: 400px;" /></p>
<p>今天头疼的厉害。不过昨天没更新，今天必须有了。介绍个简单点的。</p>
<p>vim中在普通模式下，空格这么大一按键不用有点浪费，所以有了<a href="https://github.com/spiiph/vim-space">space.vim</a>.</p>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--vim 撤销树Gundo.vim]]></title>
    <link href="http://foocoder.com/2014/04/15/mei-ri-vimcha-jian-vim-che-xiao-shu-gundo-dot-vim/"/>
    <id>http://foocoder.com/2014/04/15/mei-ri-vimcha-jian-vim-che-xiao-shu-gundo-dot-vim/</id>
    <published>2014-04-15T13:10:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>今天介绍的插件很有意思，也非常有用，也是我最常用的插件之一——<a href="https://github.com/sjl/gundo.vim" target="_blank" rel="external">Gundo</a>.</p>
<p>大家都知道按<code>u</code>可以撤销操作，但是一般都不知道输入命令<code>:undolist</code>会显示可撤销列表，如图</p>
<p><img src="http://ww1.sinaimg.cn/large/69d56e38gw1efglaef02lj20ki13qthg.jpg" style="
    height: 600px;
"> </p>
<p>其实这还不是列表，而是整个vim 撤销树的叶子。为什么说是树，而不是列表，举个例子就明白了：</p>
<a id="more"></a>
<p>你在a状态做了一次修改到b，又回退到a，再做了一次修改到c。大多数编辑器比如sublime text，b这个状态就没了，但是vim会用一个树进行保存。</p>
<p>而Gundo这个插件就是一个撤销树浏览器.直接上张图：</p>
<p><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efgmev2lz4j20ok1ci78i.jpg" style="
    height: 600px;
"></p>
<p>当前位置以<code>@</code>标注，其他历史以o标注。</p>
<p>按jk上下移动，就可以在下面的窗口看到对应修改之前的改动。这个就是普通的vim窗口，所有的移动操作都是支持的，比如<code>G</code>到底部，<code>C-U</code>上翻页等。</p>
<p>按<code>p</code>可以查看选中状态和当前状态的差异，按回车就会回到选中状态，按<code>P</code>更是可以一步步播放到选中状态，高上大啊……</p>
<p>btw,我习惯将所有的undo记录都保存下来，即使关闭了vim或者buffer也能继续撤销。</p>
<p>只需要稍加配置，就能将撤销树持久化存储下来：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">    <span class="keyword">set</span> undodir=~/.<span class="keyword">vim</span>/temp_dirs/undodir</span><br><span class="line">    <span class="keyword">set</span> <span class="built_in">undofile</span></span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line"><span class="keyword">endtry</span></span><br></pre></td></tr></table></figure>
<p>今天就介绍到这里。有问题直接回复给我。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天介绍的插件很有意思，也非常有用，也是我最常用的插件之一——<a href="https://github.com/sjl/gundo.vim">Gundo</a>.</p>
<p>大家都知道按<code>u</code>可以撤销操作，但是一般都不知道输入命令<code>:undolist</code>会显示可撤销列表，如图</p>
<p><img src="http://ww1.sinaimg.cn/large/69d56e38gw1efglaef02lj20ki13qthg.jpg" style="
    height: 600px;
"/> </p>
<p>其实这还不是列表，而是整个vim 撤销树的叶子。为什么说是树，而不是列表，举个例子就明白了：</p>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--vim中的文本对象及相关插件]]></title>
    <link href="http://foocoder.com/2014/04/14/mei-ri-vimcha-jian-vimzhong-de-wen-ben-dui-xiang-ji-xiang-guan-cha-jian/"/>
    <id>http://foocoder.com/2014/04/14/mei-ri-vimcha-jian-vimzhong-de-wen-ben-dui-xiang-ji-xiang-guan-cha-jian/</id>
    <published>2014-04-14T14:56:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>今天按读者留言的要求，介绍下文本对象。同时还会介绍我在用的几个文本相关的插件，今天是满满的内容啊。</p>
<p>所谓文本对象，简单来说就是以一定标准分隔符来标识一段文本，比如一个单词，一句话，一段话。</p>
<p>使用文本对象后你会发现你在vim中的移动和操作速度提升了不是一点半点。</p>
<p>在vim中编辑命令的结构如下：</p>
<pre><code>&lt;number&gt;&lt;command&gt;&lt;text object or motion&gt;
</code></pre><p>可以看到文本对象和motion的操作是完全一致的，第一个是数字，比如3w，就向前移动三个单词。</p>
<a id="more"></a>
<p>文本对象大致有以下几种：</p>
<pre><code>w  s  p &apos;&apos; &quot;&quot;  &lt;&gt;  []  ()  {} &lt;tag&gt;
</code></pre><p>其中w表示word，s表示句子，p表示段落，其他的就是昨天介绍过的包围符号，标签用t表示。</p>
<p>文本对象的操作范围有两种，一种用<code>i</code>表示,是inner的意思，即不包括单词边上的空格符，亦或是<code>&lt;</code>包围符号本身。一种用<code>a</code>表示，是arround的意思，和i相反，使用a就包括了空格符或者包围符号本身。</p>
<p>文本对象的编辑命令就是vim中的几个常用编辑命令，分别是</p>
<pre><code>`y：复制`，`d：删除`,`c：替换`，`v：选中`
</code></pre><p>说的有点多了，来几个例子相信大家就立刻理解了。（例子中*都是光标所在位置）</p>
<p>比如：</p>
<pre><code>&lt;*h2&gt;Sample Title&lt;/h2&gt;
</code></pre><p>按下<code>cit</code>,文本变为：</p>
<pre><code>&lt;h2&gt;*&lt;/h2&gt;
</code></pre><p>再比如：<br>    console.log(“stay hungry,” + “stay *foolish”)</p>
<p>按下<code>da&quot;</code>，文本变为：</p>
<pre><code>console.log(&quot;stay hungry,&quot; +*)
</code></pre><p>再按下<code>di)</code>，文本变为：</p>
<pre><code>console.log()
</code></pre><p>比如</p>
<pre><code>Hello Worl*d
</code></pre><p>按下<code>diw</code>,文本变为：</p>
<pre><code>Hello
</code></pre><p>很容易理解是不是？有没有发现为什么说文本对象会非常方便了？无论光标在文本的哪个位置，都可以直接操作整个文本。体验箭步如飞的感觉吧。</p>
<p>vim还允许使用脚本来自定义文本对象，这就是我们今天要介绍的插件了，这些插件自定义了一些文本对象。</p>
<p>1.CamelCaseMotion</p>
<p>该插件是把驼峰词语的每个单词分开，举个例子：</p>
<pre><code>get*ElementsByClassName
</code></pre><p>按下<code>di,w</code>,则文本变为：</p>
<pre><code>getByClassName
</code></pre><p>非常方便。</p>
<p>2.argtextobj</p>
<p>该插件定义了函数内的参数文本对象。比如：</p>
<pre><code>foo(text, ti*mes, option) {}
</code></pre><p>按下<code>daa</code>,则文本变为：</p>
<pre><code>foo(text, option) {}
</code></pre><p>今天暂时就介绍到这里。都快0点了，赶紧发出来。任何问题都可以回复给我。    </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天按读者留言的要求，介绍下文本对象。同时还会介绍我在用的几个文本相关的插件，今天是满满的内容啊。</p>
<p>所谓文本对象，简单来说就是以一定标准分隔符来标识一段文本，比如一个单词，一句话，一段话。</p>
<p>使用文本对象后你会发现你在vim中的移动和操作速度提升了不是一点半点。</p>
<p>在vim中编辑命令的结构如下：</p>
<pre><code>&lt;number&gt;&lt;command&gt;&lt;text object or motion&gt;
</code></pre><p>可以看到文本对象和motion的操作是完全一致的，第一个是数字，比如3w，就向前移动三个单词。</p>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--surround.vim]]></title>
    <link href="http://foocoder.com/2014/04/13/mei-ri-vimcha-jian-surround-dot-vim/"/>
    <id>http://foocoder.com/2014/04/13/mei-ri-vimcha-jian-surround-dot-vim/</id>
    <published>2014-04-13T14:11:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>今天介绍一个必备的插件——<a href="https://github.com/tpope/vim-surround" target="_blank" rel="external">surround.vim</a>,来自Tim Pope大神，很多著名的插件包括pathogen.vim都是出自他手，后面我还会介绍更多他写的插件。</p>
<p>是我最常用的插件之一。这个插件专门用来处理成对的包围符号……比如说括号，单双引号，XML标签等。</p>
<p>使用也非常简单好记，遵循vim本身的规则。</p>
<p>先来看一组实例，就知道这个插件的用途和使用方式了：</p>
<p>光标在</p>
<pre><code>&quot;Hello world!&quot;
</code></pre><p>中时按下<code>cs&quot;&#39;</code> ，则会替换双引号为单引号：</p>
<pre><code>&apos;Hello world!&apos;
</code></pre><a id="more"></a>
<p>继续按下<code>cs&#39;&lt;q&gt;</code>，则会替换单引号为<q>标签</q></p>
<pre><code>&lt;q&gt;Hello world!&lt;/q&gt;
</code></pre><p>按下 <code>cst&quot;</code>，则回到初始的双引号：</p>
<pre><code>&quot;Hello world!&quot;
</code></pre><p>要删除符号，则按下<code>ds&quot;</code></p>
<pre><code>Hello world!
</code></pre><p>当光标在hello上时，按下<code>ysiw]</code>，则会变为</p>
<pre><code>[Hello] world!
</code></pre><p>这个操作为其加上了包围符号。</p>
<p>总结下：</p>
<p>1.删除包围符号的命令是<code>ds</code>,后面加的字符表示要删除的符号。比如：</p>
<pre><code>&quot;Hello *world!&quot;           ds&quot;         Hello world!
</code></pre><p>2.替换包围符号的命令是<code>cs</code>,命令后跟两个参数，分别是被替换的符号和需要使用的符号。比如</p>
<pre><code>&quot;Hello *world!&quot;           cs&quot;&apos;        &apos;Hello world!&apos;
</code></pre><p>3.添加包围符号的命令是<code>ys</code>(ys可以记为you surround)，命令后同样跟两个参数，第一个是一个vim“动作”（motion）或者是一个文本对象。</p>
<p>其中motion即vim动作，比如说<code>w</code>向后一个单词。文本对象简单的来说主要是来通过一些分隔符来标识一段文本，比如<code>iw</code>就是一个文本对象，即光标下的单词。不理解的朋友可以将光标放置在单词hello的中央，分别试一下<code>ysw</code>和<code>ysiw</code>的区别应该就明白啦。如果大家需要详细介绍motion和文本对象，可以留言或者直接公众账号回复，我看看要不要单独介绍下。</p>
<pre><code>Hello w*orld!             ysiw)       Hello (world)!
</code></pre><p>另外：<code>yss</code>命令可以用于整行操作，忽略中间的空格。<br><code>yS</code>和<code>ySS</code>还能让包围内容单独一行并且加上缩进。</p>
<p>4.添加包围符号还有个非常好用的方式：在可视模式v下，按下<code>S</code>后即可添加想要添加的包围符号了。</p>
<p>再说一个小技巧：在包围符号为括时，输入左括号<code>(或者{</code>,则会留一个空格</p>
<pre><code>Hello w*orld!             ysiw(       Hello ( world )!
</code></pre><p>而右括号则不留空格，也是非常好用，看编码风格使用。</p>
<p>今天就介绍到这里，欢迎关注我的公众账号，最新的文章都会第一时间推送到。有问题可以直接回复。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天介绍一个必备的插件——<a href="https://github.com/tpope/vim-surround">surround.vim</a>,来自Tim Pope大神，很多著名的插件包括pathogen.vim都是出自他手，后面我还会介绍更多他写的插件。</p>
<p>是我最常用的插件之一。这个插件专门用来处理成对的包围符号……比如说括号，单双引号，XML标签等。</p>
<p>使用也非常简单好记，遵循vim本身的规则。</p>
<p>先来看一组实例，就知道这个插件的用途和使用方式了：</p>
<p>光标在</p>
<pre><code>&quot;Hello world!&quot;
</code></pre><p>中时按下<code>cs&quot;&#39;</code> ，则会替换双引号为单引号：</p>
<pre><code>&apos;Hello world!&apos;
</code></pre>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--缩进显示vim-indent-guides]]></title>
    <link href="http://foocoder.com/2014/04/11/mei-ri-vimcha-jian-suo-jin-xian-shi-vim-indent-guides/"/>
    <id>http://foocoder.com/2014/04/11/mei-ri-vimcha-jian-suo-jin-xian-shi-vim-indent-guides/</id>
    <published>2014-04-11T09:49:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>今天有朋友留言问昨天晒配色的图中缩进用的什么插件，那今天就介绍这个缩进插件——<a href="https://github.com/nathanaelkane/vim-indent-guides" target="_blank" rel="external">vim-indent-guides</a></p>
<p>选择这个插件主要有几个理由：</p>
<ol>
<li>插件对tab和空格的支持都很好。</li>
<li>比较美观。</li>
<li>能够自动适配当前使用的colorscheme来选择缩进颜色（只能是gvim，macvim下适配的不错）</li>
</ol>
<a id="more"></a>
<p>默认的快捷键是<code>&lt;Leader&gt;ig</code>,开关插件。我一般都默认启动就开启,只要设置：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:indent_guides_enable_on_vim_startup</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>前面说了缩进的颜色是自动选择的，非常方便，但是想要自定义颜色也是支持的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let g:indent_guides_auto_colors = 0</span><br><span class="line">autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3</span><br><span class="line">autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4</span><br></pre></td></tr></table></figure>
<p>在终端中该插件就不支持颜色自动选择了。只取决于<code>background</code>设置为<code>dark</code>还是<code>light</code>,如果设置了<code>dark</code>,就相当于配置了</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">hi</span> IndentGuidesOdd  ctermbg=black</span><br><span class="line"><span class="keyword">hi</span> IndentGuidesEven ctermbg=darkgrey</span><br></pre></td></tr></table></figure>
<p>来几张图，图上标注了相应的配置：</p>
<p><img src="http://ww4.sinaimg.cn/large/69d56e38gw1efbth8m9aij20cg0cgta5.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efbtngrerjj20cg0cg3zt.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efbtqa6k47j20cg0cgjsq.jpg" alt=""></p>
<p>这个插件并不能很好的标记出tab和空格混用的情况，只能显示当前缩进。所以我在我的vimrc中加了一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot; highlight tabs and trailing spaces</span><br><span class="line">set list</span><br><span class="line">set listchars=tab:&gt;-,trail:-,extends:&gt;,precedes:&lt;</span><br></pre></td></tr></table></figure></p>
<p>这样tab会被显示为&gt;-，而尾部空格被显示为-，这样写出来的代码就不会再有杂乱符号啦。</p>
<p>今天就介绍到这里。我开通了一个微信公众账号，以后每天的文章会通过微信公众账号推送，欢迎关注。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天有朋友留言问昨天晒配色的图中缩进用的什么插件，那今天就介绍这个缩进插件——<a href="https://github.com/nathanaelkane/vim-indent-guides">vim-indent-guides</a></p>
<p>选择这个插件主要有几个理由：</p>
<ol>
<li>插件对tab和空格的支持都很好。</li>
<li>比较美观。</li>
<li>能够自动适配当前使用的colorscheme来选择缩进颜色（只能是gvim，macvim下适配的不错）</li>
</ol>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--我的配色 molokai]]></title>
    <link href="http://foocoder.com/2014/04/10/mei-ri-vimcha-jian-wo-de-pei-se-molokai/"/>
    <id>http://foocoder.com/2014/04/10/mei-ri-vimcha-jian-wo-de-pei-se-molokai/</id>
    <published>2014-04-10T13:24:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>今天其实不介绍插件。因为有一些朋友问，所以今天单独介绍下我的配色和字体。</p>
<p>配色使用的是我钟爱的monokai，但是换了深色配色，使用了一个<a href="https://github.com/tomasr/molokai" target="_blank" rel="external">molokai</a>配色插件。之所以叫molokai，因为这个配色是monokai的修改版，将monokai的背景色改为了深色。我想要一个深色背景的molokai.正和我意啊。</p>
<p>下面是两张作者的原图：<br><a id="more"></a></p>
<p><img src="http://www.winterdom.com/weblog/content/binary/WindowsLiveWriter/MolokaiforVim_8602/molokai_normal_small_3.png" alt=""></p>
<p><img src="http://www.winterdom.com/weblog/content/binary/WindowsLiveWriter/MolokaiforVim_8602/molokai_original_small_3.png" alt=""></p>
<p>如果要使用monokai原始的背景色，加上配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let g:molokai_original = 1</span><br></pre></td></tr></table></figure>
<p>下面再放上一张我自己的图：<br><img src="http://ww1.sinaimg.cn/large/69d56e38gw1efatpzm085j21kw0zrdnu.jpg" alt=""></p>
<p>两者的差别除了缩进显示之外就是字体了。</p>
<p>字体也是我非常喜欢，精挑细选的字体<a href="https://github.com/adobe/source-code-pro" target="_blank" rel="external">Source code pro</a></p>
<p><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efatye9ls3j20lw0haacp.jpg" alt=""></p>
<p>链接里有下载和安装方法，喜欢就试试吧。</p>
<hr>
<p>4月11号更新：<br>看到下面评论有晒自己的配色，想起来有个repo，里面收集了非常多的vim 配色。<br>这里也贴出来——<a href="https://github.com/flazz/vim-colorschemes" target="_blank" rel="external">vim-colorschemes</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天其实不介绍插件。因为有一些朋友问，所以今天单独介绍下我的配色和字体。</p>
<p>配色使用的是我钟爱的monokai，但是换了深色配色，使用了一个<a href="https://github.com/tomasr/molokai">molokai</a>配色插件。之所以叫molokai，因为这个配色是monokai的修改版，将monokai的背景色改为了深色。我想要一个深色背景的molokai.正和我意啊。</p>
<p>下面是两张作者的原图：<br>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--vim-multiple-cursors]]></title>
    <link href="http://foocoder.com/2014/04/09/mei-ri-vimcha-jian-vim-multiple-cursors/"/>
    <id>http://foocoder.com/2014/04/09/mei-ri-vimcha-jian-vim-multiple-cursors/</id>
    <published>2014-04-09T14:19:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>前几天清明休假了。每日插件也就休息了几天。不过休假搞的比上班还累……</p>
<p>今天介绍一款我用的非常多，也非常有用的插件–<a href="/">vim-multiple-cursors</a>。</p>
<p>这个插件copy了sublime text的多重光标选取功能，非常强大。</p>
<p>sublime text 官网有几张图来介绍sublime text的多重选取功能，插件作者也实现了一样的效果：<br><img src="http://ww1.sinaimg.cn/large/69d56e38gw1ef9pr4t1i2g20k406ojtw.gif" alt=""></p>
<a id="more"></a>
<p>上图按键：</p>
<ul>
<li>fp跳到p处</li>
<li>按下<code>&lt;C-n&gt;</code>选中光标下的单词</li>
<li>继续按下<code>&lt;C-n&gt;</code>两次选中另外两个相同的单词</li>
<li>按下c进行修改</li>
<li>键入修改</li>
<li>按下 <code>&lt;Esc&gt;</code> 退出</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/69d56e38gw1ef9pzm3d13g20sy0900zt.gif" alt=""></p>
<p>上图按键：</p>
<ul>
<li>按下V选中整行</li>
<li>按下G到达末行</li>
<li>按下<code>&lt;C-n&gt;</code> 在每行的开头加上一个光标并返回普通模式</li>
<li>按下I在每行的头部插入</li>
<li>键入”, 按下<code>&lt;C-e&gt;</code>到达行末, 键入另一个”和逗号</li>
<li>然后将每个光标都下移一行，按下delete    </li>
</ul>
<p>再也不用羡慕sublime了。</p>
<p>使用也非常简单，几乎0配置。</p>
<p>默认的mapping：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot; Default mapping</span><br><span class="line">let g:multi_cursor_next_key=&apos;&lt;C-n&gt;&apos;</span><br><span class="line">let g:multi_cursor_prev_key=&apos;&lt;C-p&gt;&apos;</span><br><span class="line">let g:multi_cursor_skip_key=&apos;&lt;C-x&gt;&apos;</span><br><span class="line">let g:multi_cursor_quit_key=&apos;&lt;Esc&gt;&apos;</span><br></pre></td></tr></table></figure>
<p>在普通模式下，按下<code>Ctrl-n</code>开始进入可视模式并选中光标下的单词，继续按<code>Ctrl-n</code>选择下一个相同的单词，按下<code>Ctrl-p</code>往回选一个，<code>Ctrl-x</code>则跳过下一个相同单词。</p>
<p>选中后就可以对单词进行批量改动了，比如按下c，就同时修改选中单词。</p>
<p>插件还支持正则匹配，不过要用到正则去匹配的时候我就用%s来替换了。要了解详情可以去插件的github页继续了解。</p>
<p>今天就介绍这个性感无比的插件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前几天清明休假了。每日插件也就休息了几天。不过休假搞的比上班还累……</p>
<p>今天介绍一款我用的非常多，也非常有用的插件–<a href="/">vim-multiple-cursors</a>。</p>
<p>这个插件copy了sublime text的多重光标选取功能，非常强大。</p>
<p>sublime text 官网有几张图来介绍sublime text的多重选取功能，插件作者也实现了一样的效果：<br><img src="http://ww1.sinaimg.cn/large/69d56e38gw1ef9pr4t1i2g20k406ojtw.gif" alt=""></p>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--goyo]]></title>
    <link href="http://foocoder.com/2014/04/03/mei-ri-vimcha-jian-goyo/"/>
    <id>http://foocoder.com/2014/04/03/mei-ri-vimcha-jian-goyo/</id>
    <published>2014-04-03T13:50:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>一如既往很忙……所以今天还是分享一个可以一句话说明白的插件，也是我非常常用的–<a href="https://github.com/junegunn/goyo.vim" target="_blank" rel="external">goyo</a></p>
<p>一直非常喜欢写作软件iawriter，goyo让我可以用同样的方式来写代码，当然goyo还免费开源，这比iawriter好。用作者的描述就是：Distraction-free writing in Vim. 不会被任何的其他元素打扰。<br><a id="more"></a><br>直接上张图：<img src="http://ww4.sinaimg.cn/large/69d56e38gw1ef2r2wod9uj21kw0zkte6.jpg" alt=""><br><img src="https://raw.github.com/junegunn/i/master/goyo.png" alt=""></p>
<p>第一张是我的配色，第二张是作者的示例。是不是很cool？</p>
<p>安装当然借用vundle了。</p>
<pre><code>nnoremap &lt;Leader&gt;d :Goyo&lt;CR&gt;
</code></pre><p>就可以按引导键加逗号呼出goyo模式了。<br>可以按自己的需求配置宽高和位置：</p>
<ul>
<li><code>g:goyo_width</code> (default: 80)</li>
<li><code>g:goyo_margin_top</code> (default: 4)</li>
<li><code>g:goyo_margin_bottom</code> (default: 4)</li>
<li><code>g:goyo_linenr</code> (default: 0)</li>
<li><code>g:goyo_callbacks</code> ([before_funcref, after_funcref])</li>
</ul>
<p>goyo模式中默认禁用了<br><a href="https://github.com/bling/vim-airline" target="_blank" rel="external">vim-airline</a>,<br><a href="https://github.com/Lokaltog/vim-powerline" target="_blank" rel="external">vim-powerline</a>,<br><a href="https://github.com/Lokaltog/powerline" target="_blank" rel="external">powerline</a>,<br><a href="https://github.com/itchyny/lightline.vim" target="_blank" rel="external">lightline.vim</a>, and<br><a href="https://github.com/airblade/vim-gitgutter" target="_blank" rel="external">vim-gitgutter</a>插件。如果需要自定义goyo模式或者一些插件的enable/disable，</p>
<p>可以在vimrc中定义before和after回掉：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">s</span>:<span class="title">goyo_before</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">silent</span> !tmux <span class="keyword">set</span> status off</span><br><span class="line">  <span class="keyword">set</span> noshowmode</span><br><span class="line">  <span class="keyword">set</span> noshowcmd</span><br><span class="line">  <span class="comment">" ...</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">s</span>:<span class="title">goyo_after</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">silent</span> !tmux <span class="keyword">set</span> status <span class="keyword">on</span></span><br><span class="line">  <span class="keyword">set</span> showmode</span><br><span class="line">  <span class="keyword">set</span> showcmd</span><br><span class="line">  <span class="comment">" ...</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:goyo_callbacks</span> = [<span class="function"><span class="keyword">function</span><span class="params">('s:goyo_before')</span>, <span class="title">function</span><span class="params">('s:goyo_after')</span>]</span></span><br></pre></td></tr></table></figure>
<p>可以在<a href="https://github.com/junegunn/goyo.vim/wiki/Customization" target="_blank" rel="external">这里</a>看到更多的自定义示例</p>
<p>好吧，基本就是翻译了一下……因为插件很简单，文档也很详细。我自己非常喜欢这个插件，希望大家也会喜欢～</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一如既往很忙……所以今天还是分享一个可以一句话说明白的插件，也是我非常常用的–<a href="https://github.com/junegunn/goyo.vim">goyo</a></p>
<p>一直非常喜欢写作软件iawriter，goyo让我可以用同样的方式来写代码，当然goyo还免费开源，这比iawriter好。用作者的描述就是：Distraction-free writing in Vim. 不会被任何的其他元素打扰。<br>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--有道翻译]]></title>
    <link href="http://foocoder.com/2014/04/02/mei-ri-vimcha-jian-you-dao-fan-yi/"/>
    <id>http://foocoder.com/2014/04/02/mei-ri-vimcha-jian-you-dao-fan-yi/</id>
    <published>2014-04-02T13:34:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>今天头疼。简短介绍一个实用又好用的插件，在vim中直接进行有道翻译,<a href="https://github.com/ianva/vim-youdao-translater" target="_blank" rel="external">vim-youdao-translater</a>，来自ianva.我非常喜欢的一个插件,在这里再次感谢作者ianva。</p>
<p>安装就不介绍了，不知道怎么安装看上一篇博客。</p>
<p>使用方式copy自ianva：</p>
<p>在普通模式下，按 ctrl+t， 会翻译当前光标下的单词；</p>
<p>在 visual 模式下选中单词，按 ctrl+t，会翻译选择的单词；</p>
<p>点击引导键再点y，d，可以在命令行输入要翻译的单词；</p>
<p>译文将会在编辑器底部的命令栏显示。 </p>
<p>上述操作的配置：</p>
<pre><code>vnoremap &lt;silent&gt; &lt;C-T&gt; &lt;Esc&gt;:Ydv&lt;CR&gt; 
nnoremap &lt;silent&gt; &lt;C-T&gt; &lt;Esc&gt;:Ydc&lt;CR&gt; 
noremap &lt;leader&gt;yd :Yde&lt;CR&gt;
</code></pre><p>明天继续。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天头疼。简短介绍一个实用又好用的插件，在vim中直接进行有道翻译,<a href="https://github.com/ianva/vim-youdao-translater" target="_blank" rel="external">vim-youdao-tran]]>
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日vim插件--开篇之vundle]]></title>
    <link href="http://foocoder.com/2014/04/01/mei-ri-vimcha-jian-kai-pian-zhi-vundle/"/>
    <id>http://foocoder.com/2014/04/01/mei-ri-vimcha-jian-kai-pian-zhi-vundle/</id>
    <published>2014-04-01T14:34:00.000Z</published>
    <updated>2016-01-14T11:12:38.000Z</updated>
    <content type="html"><![CDATA[<p>一直想写一篇博客介绍我的vim配置和插件，但是这篇博客却难产了快半年……<br>工作太忙，写博客变成了奢侈的事情。那何不每天写一点点呢？于是决定每天介绍一个vim插件或者一个技巧。</p>
<p>大致看了一下自己的<a href="https://github.com/notice501/dotfiles" target="_blank" rel="external">vim配置</a>，竟然都快有100个插件之多了……</p>
<p>但是我从来都没有感觉到插件管理有多麻烦，我可以经常更新，删除和安装想用的插件。所以第一个介绍的插件必须是用来管理插件的神器–<a href="https://github.com/gmarik/Vundle.vim" target="_blank" rel="external">Vundle</a></p>
<p>在使用vundle之前，我使用Pathogen与git submodule来管理Vim插件，而vundle更为强大，不需要再手动操作git了。Vundle会自动去对应的插件git库获取最新的插件。<br><a id="more"></a></p>
<p>Vundle的安装非常简单：</p>
<ol>
<li>当然你需要安装git</li>
<li>git clone <a href="https://github.com/gmarik/vundle.git" target="_blank" rel="external">https://github.com/gmarik/vundle.git</a> ~/.vim/bundle/vundle</li>
<li>配置vimrc。我建议像我一样单独写个bundles.vim，(我还是用的Bundle这个名字，但是写这篇博客的时候发现作者已经废弃了这个名字，统一叫做plugin)方便管理。示例如下：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">	 set nocompatible              " be iMproved, required</span><br><span class="line">filetype off                  " required</span><br><span class="line"></span><br><span class="line">" set the runtime path to include Vundle and initialize</span><br><span class="line">set rtp+=~/.vim/bundle/vundle/</span><br><span class="line">call vundle#rc()</span><br><span class="line">" alternatively, pass a path where Vundle should install plugins</span><br><span class="line">"let path = '~/some/path/here'</span><br><span class="line">"call vundle#rc(path)</span><br><span class="line"></span><br><span class="line">" let Vundle manage Vundle, required</span><br><span class="line">Plugin 'gmarik/vundle'</span><br><span class="line"></span><br><span class="line">" The following are examples of different formats supported.</span><br><span class="line">" Keep Plugin commands between here and filetype plugin indent on.</span><br><span class="line">" scripts on GitHub repos</span><br><span class="line">Plugin 'tpope/vim-fugitive'</span><br><span class="line">Plugin 'Lokaltog/vim-easymotion'</span><br><span class="line">Plugin 'tpope/vim-rails.git'</span><br><span class="line">" The sparkup vim script is in a subdirectory of this repo called vim.</span><br><span class="line">" Pass the path to set the runtimepath properly.</span><br><span class="line">Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;</span><br><span class="line">" scripts from http://vim-scripts.org/vim/scripts.html</span><br><span class="line">Plugin 'L9'</span><br><span class="line">Plugin 'FuzzyFinder'</span><br><span class="line">" scripts not on GitHub</span><br><span class="line">Plugin 'git://git.wincent.com/command-t.git'</span><br><span class="line">" git repos on your local machine (i.e. when working on your own plugin)</span><br><span class="line">Plugin 'file:///home/gmarik/path/to/plugin'</span><br><span class="line">" ...</span><br><span class="line"></span><br><span class="line">filetype plugin indent on     " required</span><br><span class="line">" To ignore plugin indent changes, instead use:</span><br><span class="line">"filetype plugin on</span><br><span class="line">"</span><br><span class="line">" Brief help</span><br><span class="line">" :PluginList          - list configured plugins</span><br><span class="line">" :PluginInstall(!)    - install (update) plugins</span><br><span class="line">" :PluginSearch(!) foo - search (or refresh cache first) for foo</span><br><span class="line">" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins</span><br><span class="line">"</span><br><span class="line">" see :h vundle for more details or wiki for FAQ</span><br><span class="line">" NOTE: comments after Plugin commands are not allowed.</span><br><span class="line">" Put your stuff after this line</span><br></pre></td></tr></table></figure>
<p>然后在vimrc的开头引入bundles.vim:</p>
<pre><code>source ~/.vim/bundles.vim
</code></pre><p>4.如示例所示，将所有的插件都写成plugin ‘user/repo’即可。vundle会从该库中去取。</p>
<p>如果未加’/‘，则默认从vim script: <a href="https://github.com/vim-scripts/" target="_blank" rel="external">https://github.com/vim-scripts/</a> 去取<br>    还可以加上非github库：</p>
<pre><code>Plugin &apos;git://git.wincent.com/command-t.git&apos;

或者本地文件

Plugin &apos;file///path/from/root/to/plugin&apos;
</code></pre><p>5.安装只需输入</p>
<pre><code>:BundleInstall 或者 :pluginInstall
</code></pre><p>更新：</p>
<pre><code>:pluginUpdate
</code></pre><p>删除：</p>
<pre><code>:pluginClean
</code></pre><p>6.vundle 还带了插件搜索功能</p>
<pre><code>:PluginSearch foo
</code></pre><p>搜索结果会在新窗口打开，然后可以进行直接安装删除等操作。</p>
<hr>
<p>从Vundle开始，享受vim丰富的插件带来的爽快感吧~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一直想写一篇博客介绍我的vim配置和插件，但是这篇博客却难产了快半年……<br>工作太忙，写博客变成了奢侈的事情。那何不每天写一点点呢？于是决定每天介绍一个vim插件或者一个技巧。</p>
<p>大致看了一下自己的<a href="https://github.com/notice501/dotfiles">vim配置</a>，竟然都快有100个插件之多了……</p>
<p>但是我从来都没有感觉到插件管理有多麻烦，我可以经常更新，删除和安装想用的插件。所以第一个介绍的插件必须是用来管理插件的神器–<a href="https://github.com/gmarik/Vundle.vim">Vundle</a></p>
<p>在使用vundle之前，我使用Pathogen与git submodule来管理Vim插件，而vundle更为强大，不需要再手动操作git了。Vundle会自动去对应的插件git库获取最新的插件。<br>]]>
    
    </summary>
    
      <category term="vim" scheme="http://foocoder.com/categories/vim/"/>
    
  </entry>
  
</feed>
