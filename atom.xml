<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Rush]]></title>
  <link href="http://notice501.github.com/atom.xml" rel="self"/>
  <link href="http://notice501.github.com/"/>
  <updated>2014-04-15T22:36:37+08:00</updated>
  <id>http://notice501.github.com/</id>
  <author>
    <name><![CDATA[foocoder]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[每日vim插件--vim 撤销树Gundo.vim]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-vim-che-xiao-shu-gundo-dot-vim.html/"/>
    <updated>2014-04-15T21:10:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-vim-che-xiao-shu-gundo-dot-vim</id>
    <content type="html"><![CDATA[<p>今天介绍的插件很有意思，也非常有用，也是我最常用的插件之一——<a href="https://github.com/sjl/gundo.vim">Gundo</a>.</p>

<p>大家都知道按<code>u</code>可以撤销操作，但是一般都不知道输入命令<code>:undolist</code>会显示可撤销列表，如图</p>

<p><img src="http://ww1.sinaimg.cn/large/69d56e38gw1efglaef02lj20ki13qthg.jpg" style="     height: 600px; " /> </p>

<p>其实这还不是列表，而是整个vim 撤销树的叶子。为什么说是树，而不是列表，举个例子就明白了：</p>

<!--more-->

<p>你在a状态做了一次修改到b，又回退到a，再做了一次修改到c。大多数编辑器比如sublime text，b这个状态就没了，但是vim会用一个树进行保存。</p>

<p>而Gundo这个插件就是一个撤销树浏览器.直接上张图：</p>

<p><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efgmev2lz4j20ok1ci78i.jpg" style="     height: 600px; " /></p>

<p>当前位置以<code>@</code>标注，其他历史以o标注。</p>

<p>按jk上下移动，就可以在下面的窗口看到对应修改之前的改动。这个就是普通的vim窗口，所有的移动操作都是支持的，比如<code>G</code>到底部，<code>C-U</code>上翻页等。</p>

<p>按<code>p</code>可以查看选中状态和当前状态的差异，按回车就会回到选中状态，按<code>P</code>更是可以一步步播放到选中状态，高上大啊……</p>

<p>btw,我习惯将所有的undo记录都保存下来，即使关闭了vim或者buffer也能继续撤销。</p>

<p>只需要稍加配置，就能将撤销树持久化存储下来：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">try</span>
</span><span class="line">    <span class="k">set</span> <span class="nb">undodir</span><span class="p">=~</span><span class="sr">/.vim/</span>temp_dirs/<span class="nb">undodir</span>
</span><span class="line">    <span class="k">set</span> <span class="nb">undofile</span>
</span><span class="line"><span class="k">catch</span>
</span><span class="line"><span class="k">endtry</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>今天就介绍到这里。有问题直接回复给我。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--vim中的文本对象及相关插件]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-vimzhong-de-wen-ben-dui-xiang-ji-xiang-guan-cha-jian.html/"/>
    <updated>2014-04-14T22:56:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-vimzhong-de-wen-ben-dui-xiang-ji-xiang-guan-cha-jian</id>
    <content type="html"><![CDATA[<p>今天按读者留言的要求，介绍下文本对象。同时还会介绍我在用的几个文本相关的插件，今天是满满的内容啊。</p>

<p>所谓文本对象，简单来说就是以一定标准分隔符来标识一段文本，比如一个单词，一句话，一段话。</p>

<p>使用文本对象后你会发现你在vim中的移动和操作速度提升了不是一点半点。</p>

<p>在vim中编辑命令的结构如下：</p>

<pre><code> &lt;number&gt;&lt;command&gt;&lt;text object or motion&gt;
</code></pre>

<p>可以看到文本对象和motion的操作是完全一致的，第一个是数字，比如3w，就向前移动三个单词。</p>

<!--more-->

<p>文本对象大致有以下几种：</p>

<pre><code>w  s  p '' ""  &lt;&gt;  []  ()  {} &lt;tag&gt;
</code></pre>

<p>其中w表示word，s表示句子，p表示段落，其他的就是昨天介绍过的包围符号，标签用t表示。</p>

<p>文本对象的操作范围有两种，一种用<code>i</code>表示,是inner的意思，即不包括单词边上的空格符，亦或是<code>&lt;</code>包围符号本身。一种用<code>a</code>表示，是arround的意思，和i相反，使用a就包括了空格符或者包围符号本身。</p>

<p>文本对象的编辑命令就是vim中的几个常用编辑命令，分别是</p>

<pre><code>`y：复制`，`d：删除`,`c：替换`，`v：选中`
</code></pre>

<p>说的有点多了，来几个例子相信大家就立刻理解了。（例子中*都是光标所在位置）</p>

<p>比如：</p>

<pre><code>&lt;*h2&gt;Sample Title&lt;/h2&gt;
</code></pre>

<p>按下<code>cit</code>,文本变为：</p>

<pre><code>&lt;h2&gt;*&lt;/h2&gt;
</code></pre>

<p>再比如：
	console.log(“stay hungry,” + “stay *foolish”)</p>

<p>按下<code>da"</code>，文本变为：</p>

<pre><code>console.log("stay hungry," +*)
</code></pre>

<p>再按下<code>di)</code>，文本变为：</p>

<pre><code>console.log()
</code></pre>

<p>比如</p>

<pre><code>Hello Worl*d
</code></pre>

<p>按下<code>diw</code>,文本变为：</p>

<pre><code>Hello
</code></pre>

<p>很容易理解是不是？有没有发现为什么说文本对象会非常方便了？无论光标在文本的哪个位置，都可以直接操作整个文本。体验箭步如飞的感觉吧。</p>

<p>vim还允许使用脚本来自定义文本对象，这就是我们今天要介绍的插件了，这些插件自定义了一些文本对象。</p>

<p>1.CamelCaseMotion</p>

<p>该插件是把驼峰词语的每个单词分开，举个例子：</p>

<pre><code>get*ElementsByClassName
</code></pre>

<p>按下<code>di,w</code>,则文本变为：</p>

<pre><code>getByClassName
</code></pre>

<p>非常方便。</p>

<p>2.argtextobj</p>

<p>该插件定义了函数内的参数文本对象。比如：</p>

<pre><code>foo(text, ti*mes, option) {}
</code></pre>

<p>按下<code>daa</code>,则文本变为：</p>

<pre><code>foo(text, option) {}
</code></pre>

<p>今天暂时就介绍到这里。都快0点了，赶紧发出来。任何问题都可以回复给我。	</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--surround.vim]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-surround-dot-vim.html/"/>
    <updated>2014-04-13T22:11:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-surround-dot-vim</id>
    <content type="html"><![CDATA[<p>今天介绍一个必备的插件——<a href="https://github.com/tpope/vim-surround">surround.vim</a>,来自Tim Pope大神，很多著名的插件包括pathogen.vim都是出自他手，后面我还会介绍更多他写的插件。</p>

<p>是我最常用的插件之一。这个插件专门用来处理成对的包围符号……比如说括号，单双引号，XML标签等。</p>

<p>使用也非常简单好记，遵循vim本身的规则。</p>

<p>先来看一组实例，就知道这个插件的用途和使用方式了：</p>

<p>光标在</p>

<pre><code>"Hello world!"
</code></pre>

<p>中时按下<code>cs"'</code> ，则会替换双引号为单引号：</p>

<pre><code>'Hello world!'
</code></pre>

<!--more-->

<p>继续按下<code>cs'&lt;q&gt;</code>，则会替换单引号为<q>标签</q></p>

<pre><code>&lt;q&gt;Hello world!&lt;/q&gt;
</code></pre>

<p>按下 <code>cst"</code>，则回到初始的双引号：</p>

<pre><code> "Hello world!"
</code></pre>

<p>要删除符号，则按下<code>ds"</code></p>

<pre><code>Hello world!
</code></pre>

<p>当光标在hello上时，按下<code>ysiw]</code>，则会变为</p>

<pre><code> [Hello] world!
</code></pre>

<p>这个操作为其加上了包围符号。</p>

<p>总结下：</p>

<p>1.删除包围符号的命令是<code>ds</code>,后面加的字符表示要删除的符号。比如：</p>

<pre><code>"Hello *world!"           ds"         Hello world!
</code></pre>

<p>2.替换包围符号的命令是<code>cs</code>,命令后跟两个参数，分别是被替换的符号和需要使用的符号。比如</p>

<pre><code>"Hello *world!"           cs"'        'Hello world!'
</code></pre>

<p>3.添加包围符号的命令是<code>ys</code>(ys可以记为you surround)，命令后同样跟两个参数，第一个是一个vim“动作”（motion）或者是一个文本对象。</p>

<p>其中motion即vim动作，比如说<code>w</code>向后一个单词。文本对象简单的来说主要是来通过一些分隔符来标识一段文本，比如<code>iw</code>就是一个文本对象，即光标下的单词。不理解的朋友可以将光标放置在单词hello的中央，分别试一下<code>ysw</code>和<code>ysiw</code>的区别应该就明白啦。如果大家需要详细介绍motion和文本对象，可以留言或者直接公众账号回复，我看看要不要单独介绍下。</p>

<pre><code>  Hello w*orld!             ysiw)       Hello (world)!
</code></pre>

<p>另外：<code>yss</code>命令可以用于整行操作，忽略中间的空格。
<code>yS</code>和<code>ySS</code>还能让包围内容单独一行并且加上缩进。</p>

<p>4.添加包围符号还有个非常好用的方式：在可视模式v下，按下<code>S</code>后即可添加想要添加的包围符号了。</p>

<p>再说一个小技巧：在包围符号为括时，输入左括号<code>(或者{</code>,则会留一个空格</p>

<pre><code>Hello w*orld!             ysiw(       Hello ( world )!
</code></pre>

<p>而右括号则不留空格，也是非常好用，看编码风格使用。</p>

<p>今天就介绍到这里，欢迎关注我的公众账号，最新的文章都会第一时间推送到。有问题可以直接回复。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--缩进显示vim-indent-guides]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-suo-jin-xian-shi-vim-indent-guides.html/"/>
    <updated>2014-04-11T17:49:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-suo-jin-xian-shi-vim-indent-guides</id>
    <content type="html"><![CDATA[<p>今天有朋友留言问昨天晒配色的图中缩进用的什么插件，那今天就介绍这个缩进插件——<a href="https://github.com/nathanaelkane/vim-indent-guides">vim-indent-guides</a></p>

<p>选择这个插件主要有几个理由：</p>

<ol>
  <li>插件对tab和空格的支持都很好。</li>
  <li>比较美观。</li>
  <li>能够自动适配当前使用的colorscheme来选择缩进颜色（只能是gvim，macvim下适配的不错）</li>
</ol>

<!--more-->
<p>默认的快捷键是<code>&lt;Leader&gt;ig</code>,开关插件。我一般都默认启动就开启,只要设置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">let</span> <span class="k">g</span>:indent_guides_enable_on_vim_startup <span class="p">=</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>前面说了缩进的颜色是自动选择的，非常方便，但是想要自定义颜色也是支持的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">let</span> <span class="k">g</span>:indent_guides_auto_colors <span class="p">=</span> <span class="m">0</span>
</span><span class="line">autocmd <span class="nb">VimEnter</span><span class="p">,</span>Colorscheme * :<span class="k">hi</span> IndentGuidesOdd  guibg<span class="p">=</span><span class="k">red</span>   ctermbg<span class="p">=</span><span class="m">3</span>
</span><span class="line">autocmd <span class="nb">VimEnter</span><span class="p">,</span>Colorscheme * :<span class="k">hi</span> IndentGuidesEven guibg<span class="p">=</span>green ctermbg<span class="p">=</span><span class="m">4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在终端中该插件就不支持颜色自动选择了。只取决于<code>background</code>设置为<code>dark</code>还是<code>light</code>,如果设置了<code>dark</code>,就相当于配置了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">hi</span> IndentGuidesOdd  ctermbg<span class="p">=</span>black
</span><span class="line"><span class="k">hi</span> IndentGuidesEven ctermbg<span class="p">=</span>darkgrey
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>来几张图，图上标注了相应的配置：</p>

<p><img src="http://ww4.sinaimg.cn/large/69d56e38gw1efbth8m9aij20cg0cgta5.jpg" alt="" />
<img src="http://ww2.sinaimg.cn/large/69d56e38gw1efbtngrerjj20cg0cg3zt.jpg" alt="" />
<img src="http://ww2.sinaimg.cn/large/69d56e38gw1efbtqa6k47j20cg0cgjsq.jpg" alt="" /></p>

<p>这个插件并不能很好的标记出tab和空格混用的情况，只能显示当前缩进。所以我在我的vimrc中加了一行：
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="vim"><span class="line"><span class="c">&quot; highlight tabs and trailing spaces</span>
</span><span class="line"><span class="k">set</span> <span class="nb">list</span>
</span><span class="line"><span class="k">set</span> <span class="nb">listchars</span><span class="p">=</span><span class="k">tab</span>:<span class="p">&gt;-,</span>trail:<span class="p">-,</span>extends:<span class="p">&gt;,</span>precedes:<span class="p">&lt;</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
这样tab会被显示为&gt;-，而尾部空格被显示为-，这样写出来的代码就不会再有杂乱符号啦。</p>

<p>今天就介绍到这里。我开通了一个微信公众账号，以后每天的文章会通过微信公众账号推送，欢迎关注。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天一个vim插件--我的配色 molokai]]></title>
    <link href="http://notice501.github.com/blog/mei-tian-%5B%3F%5D-ge-vimcha-jian-wo-de-pei-se-molokai.html/"/>
    <updated>2014-04-10T21:24:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-tian-[?]-ge-vimcha-jian-wo-de-pei-se-molokai</id>
    <content type="html"><![CDATA[<p>今天其实不介绍插件。因为有一些朋友问，所以今天单独介绍下我的配色和字体。</p>

<p>配色使用的是我钟爱的monokai，但是换了深色配色，使用了一个<a href="https://github.com/tomasr/molokai">molokai</a>配色插件。之所以叫molokai，因为这个配色是monokai的修改版，将monokai的背景色改为了深色。我想要一个深色背景的molokai.正和我意啊。</p>

<p>下面是两张作者的原图：
<!--more--></p>

<p><img src="http://www.winterdom.com/weblog/content/binary/WindowsLiveWriter/MolokaiforVim_8602/molokai_normal_small_3.png" alt="" /></p>

<p><img src="http://www.winterdom.com/weblog/content/binary/WindowsLiveWriter/MolokaiforVim_8602/molokai_original_small_3.png" alt="" /></p>

<p>如果要使用monokai原始的背景色，加上配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let g:molokai_original = 1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面再放上一张我自己的图：
<img src="http://ww1.sinaimg.cn/large/69d56e38gw1efatpzm085j21kw0zrdnu.jpg" alt="" /></p>

<p>两者的差别除了缩进显示之外就是字体了。</p>

<p>字体也是我非常喜欢，精挑细选的字体<a href="https://github.com/adobe/source-code-pro">Source code pro</a></p>

<p><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efatye9ls3j20lw0haacp.jpg" alt="" /></p>

<p>链接里有下载和安装方法，喜欢就试试吧。</p>

<hr />
<p>4月11号更新：
看到下面评论有晒自己的配色，想起来有个repo，里面收集了非常多的vim 配色。
这里也贴出来——<a href="https://github.com/flazz/vim-colorschemes">vim-colorschemes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天一个vim插件--vim-multiple-cursors]]></title>
    <link href="http://notice501.github.com/blog/mei-tian-%5B%3F%5D-ge-vimcha-jian-vim-multiple-cursors.html/"/>
    <updated>2014-04-09T22:19:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-tian-[?]-ge-vimcha-jian-vim-multiple-cursors</id>
    <content type="html"><![CDATA[<p>前几天清明休假了。每日插件也就休息了几天。不过休假搞的比上班还累……</p>

<p>今天介绍一款我用的非常多，也非常有用的插件–<a href="">vim-multiple-cursors</a>。</p>

<p>这个插件copy了sublime text的多重光标选取功能，非常强大。</p>

<p>sublime text 官网有几张图来介绍sublime text的多重选取功能，插件作者也实现了一样的效果：
<img src="http://ww1.sinaimg.cn/large/69d56e38gw1ef9pr4t1i2g20k406ojtw.gif" alt="" /></p>

<!--more-->

<p>上图按键：</p>

<ul>
  <li>fp跳到p处</li>
  <li>按下<code>&lt;C-n&gt;</code>选中光标下的单词</li>
  <li>继续按下<code>&lt;C-n&gt;</code>两次选中另外两个相同的单词</li>
  <li>按下c进行修改</li>
  <li>键入修改</li>
  <li>按下 <code>&lt;Esc&gt;</code> 退出</li>
</ul>

<p><img src="http://ww1.sinaimg.cn/large/69d56e38gw1ef9pzm3d13g20sy0900zt.gif" alt="" /></p>

<p>上图按键：</p>

<ul>
  <li>按下V选中整行</li>
  <li>按下G到达末行</li>
  <li>按下<code>&lt;C-n&gt;</code> 在每行的开头加上一个光标并返回普通模式</li>
  <li>按下I在每行的头部插入</li>
  <li>键入”, 按下<code>&lt;C-e&gt;</code>到达行末, 键入另一个”和逗号</li>
  <li>然后将每个光标都下移一行，按下delete	</li>
</ul>

<p>再也不用羡慕sublime了。</p>

<p>使用也非常简单，几乎0配置。</p>

<p>默认的mapping：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">" Default mapping
</span><span class="line">let g:multi_cursor_next_key='&lt;C-n&gt;'
</span><span class="line">let g:multi_cursor_prev_key='&lt;C-p&gt;'
</span><span class="line">let g:multi_cursor_skip_key='&lt;C-x&gt;'
</span><span class="line">let g:multi_cursor_quit_key='&lt;Esc&gt;'</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在普通模式下，按下<code>Ctrl-n</code>开始进入可视模式并选中光标下的单词，继续按<code>Ctrl-n</code>选择下一个相同的单词，按下<code>Ctrl-p</code>往回选一个，<code>Ctrl-x</code>则跳过下一个相同单词。</p>

<p>选中后就可以对单词进行批量改动了，比如按下c，就同时修改选中单词。</p>

<p>插件还支持正则匹配，不过要用到正则去匹配的时候我就用%s来替换了。要了解详情可以去插件的github页继续了解。</p>

<p>今天就介绍这个性感无比的插件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天一个vim插件--goyo]]></title>
    <link href="http://notice501.github.com/blog/mei-tian-%5B%3F%5D-ge-vimcha-jian-goyo.html/"/>
    <updated>2014-04-03T21:50:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-tian-[?]-ge-vimcha-jian-goyo</id>
    <content type="html"><![CDATA[<p>一如既往很忙……所以今天还是分享一个可以一句话说明白的插件，也是我非常常用的–<a href="https://github.com/junegunn/goyo.vim">goyo</a></p>

<p>一直非常喜欢写作软件iawriter，goyo让我可以用同样的方式来写代码，当然goyo还免费开源，这比iawriter好。用作者的描述就是：Distraction-free writing in Vim. 不会被任何的其他元素打扰。
<!--more-->
直接上张图：<img src="http://ww4.sinaimg.cn/large/69d56e38gw1ef2r2wod9uj21kw0zkte6.jpg" alt="" />
<img src="https://raw.github.com/junegunn/i/master/goyo.png" alt="" /></p>

<p>第一张是我的配色，第二张是作者的示例。是不是很cool？</p>

<p>安装当然借用vundle了。</p>

<pre><code>nnoremap &lt;Leader&gt;d :Goyo&lt;CR&gt;
</code></pre>

<p>就可以按引导键加逗号呼出goyo模式了。
可以按自己的需求配置宽高和位置：</p>

<ul>
  <li><code>g:goyo_width</code> (default: 80)</li>
  <li><code>g:goyo_margin_top</code> (default: 4)</li>
  <li><code>g:goyo_margin_bottom</code> (default: 4)</li>
  <li><code>g:goyo_linenr</code> (default: 0)</li>
  <li><code>g:goyo_callbacks</code> ([before_funcref, after_funcref])</li>
</ul>

<p>goyo模式中默认禁用了
<a href="https://github.com/bling/vim-airline">vim-airline</a>,
<a href="https://github.com/Lokaltog/vim-powerline">vim-powerline</a>,
<a href="https://github.com/Lokaltog/powerline">powerline</a>,
<a href="https://github.com/itchyny/lightline.vim">lightline.vim</a>, and
<a href="https://github.com/airblade/vim-gitgutter">vim-gitgutter</a>插件。如果需要自定义goyo模式或者一些插件的enable/disable，</p>

<p>可以在vimrc中定义before和after回掉：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:goyo_before<span class="p">()</span>
</span><span class="line">  <span class="k">silent</span> <span class="p">!</span>tmux <span class="k">set</span> status off
</span><span class="line">  <span class="k">set</span> <span class="nb">noshowmode</span>
</span><span class="line">  <span class="k">set</span> <span class="nb">noshowcmd</span>
</span><span class="line"><span class="c">  &quot; ...</span>
</span><span class="line"><span class="k">endfunction</span>
</span><span class="line">
</span><span class="line"><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:goyo_after<span class="p">()</span>
</span><span class="line">  <span class="k">silent</span> <span class="p">!</span>tmux <span class="k">set</span> status <span class="k">on</span>
</span><span class="line">  <span class="k">set</span> <span class="nb">showmode</span>
</span><span class="line">  <span class="k">set</span> <span class="nb">showcmd</span>
</span><span class="line"><span class="c">  &quot; ...</span>
</span><span class="line"><span class="k">endfunction</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="k">g</span>:goyo_callbacks <span class="p">=</span> [<span class="k">function</span><span class="p">(</span><span class="s1">&#39;s:goyo_before&#39;</span><span class="p">),</span> <span class="k">function</span><span class="p">(</span><span class="s1">&#39;s:goyo_after&#39;</span><span class="p">)</span>]
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以在<a href="https://github.com/junegunn/goyo.vim/wiki/Customization">这里</a>看到更多的自定义示例</p>

<p>好吧，基本就是翻译了一下……因为插件很简单，文档也很详细。我自己非常喜欢这个插件，希望大家也会喜欢～</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天一个vim插件--有道翻译]]></title>
    <link href="http://notice501.github.com/blog/mei-tian-%5B%3F%5D-ge-vimcha-jian-you-dao-fan-yi.html/"/>
    <updated>2014-04-02T21:34:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-tian-[?]-ge-vimcha-jian-you-dao-fan-yi</id>
    <content type="html"><![CDATA[<p>今天头疼。简短介绍一个实用又好用的插件，在vim中直接进行有道翻译,<a href="https://github.com/ianva/vim-youdao-translater">vim-youdao-translater</a>，来自ianva.我非常喜欢的一个插件,在这里再次感谢作者ianva。</p>

<p>安装就不介绍了，不知道怎么安装看上一篇博客。</p>

<p>使用方式copy自ianva：</p>

<p>在普通模式下，按 ctrl+t， 会翻译当前光标下的单词；</p>

<p>在 visual 模式下选中单词，按 ctrl+t，会翻译选择的单词；</p>

<p>点击引导键再点y，d，可以在命令行输入要翻译的单词；</p>

<p>译文将会在编辑器底部的命令栏显示。 </p>

<p>上述操作的配置：</p>

<pre><code>vnoremap &lt;silent&gt; &lt;C-T&gt; &lt;Esc&gt;:Ydv&lt;CR&gt; 
nnoremap &lt;silent&gt; &lt;C-T&gt; &lt;Esc&gt;:Ydc&lt;CR&gt; 
noremap &lt;leader&gt;yd :Yde&lt;CR&gt;
</code></pre>

<p>明天继续。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天一个vim插件--开篇之vundle]]></title>
    <link href="http://notice501.github.com/blog/mei-tian-%5B%3F%5D-ge-vimcha-jian-kai-pian-zhi-vundle.html/"/>
    <updated>2014-04-01T22:34:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-tian-[?]-ge-vimcha-jian-kai-pian-zhi-vundle</id>
    <content type="html"><![CDATA[<p>一直想写一篇博客介绍我的vim配置和插件，但是这篇博客却难产了快半年……
工作太忙，写博客变成了奢侈的事情。那何不每天写一点点呢？于是决定每天介绍一个vim插件或者一个技巧。</p>

<p>大致看了一下自己的<a href="https://github.com/notice501/dotfiles">vim配置</a>，竟然都快有100个插件之多了……</p>

<p>但是我从来都没有感觉到插件管理有多麻烦，我可以经常更新，删除和安装想用的插件。所以第一个介绍的插件必须是用来管理插件的神器–<a href="https://github.com/gmarik/Vundle.vim">Vundle</a></p>

<p>在使用vundle之前，我使用Pathogen与git submodule来管理Vim插件，而vundle更为强大，不需要再手动操作git了。Vundle会自动去对应的插件git库获取最新的插件。
<!--more--></p>

<p>Vundle的安装非常简单：</p>

<ol>
  <li>当然你需要安装git</li>
  <li>git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</li>
  <li>配置vimrc。我建议像我一样单独写个bundles.vim，(我还是用的Bundle这个名字，但是写这篇博客的时候发现作者已经废弃了这个名字，统一叫做plugin)方便管理。示例如下：</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"> <span class="k">set</span> <span class="nb">nocompatible</span>              <span class="c">&quot; be iMproved, required</span>
</span><span class="line"><span class="k">filetype</span> off                  <span class="c">&quot; required</span>
</span><span class="line">
</span><span class="line"><span class="c">&quot; set the runtime path to include Vundle and initialize</span>
</span><span class="line"><span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/vundle/</span>
</span><span class="line"><span class="k">call</span> vundle#rc<span class="p">()</span>
</span><span class="line"><span class="c">&quot; alternatively, pass a path where Vundle should install plugins</span>
</span><span class="line"><span class="c">&quot;let path = &#39;~/some/path/here&#39;</span>
</span><span class="line"><span class="c">&quot;call vundle#rc(path)</span>
</span><span class="line">
</span><span class="line"><span class="c">&quot; let Vundle manage Vundle, required</span>
</span><span class="line">Plugin <span class="s1">&#39;gmarik/vundle&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c">&quot; The following are examples of different formats supported.</span>
</span><span class="line"><span class="c">&quot; Keep Plugin commands between here and filetype plugin indent on.</span>
</span><span class="line"><span class="c">&quot; scripts on GitHub repos</span>
</span><span class="line">Plugin <span class="s1">&#39;tpope/vim-fugitive&#39;</span>
</span><span class="line">Plugin <span class="s1">&#39;Lokaltog/vim-easymotion&#39;</span>
</span><span class="line">Plugin <span class="s1">&#39;tpope/vim-rails.git&#39;</span>
</span><span class="line"><span class="c">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</span>
</span><span class="line"><span class="c">&quot; Pass the path to set the runtimepath properly.</span>
</span><span class="line">Plugin <span class="s1">&#39;rstacruz/sparkup&#39;</span><span class="p">,</span> {<span class="s1">&#39;rtp&#39;</span>: <span class="s1">&#39;vim/&#39;</span>}
</span><span class="line"><span class="c">&quot; scripts from http://vim-scripts.org/vim/scripts.html</span>
</span><span class="line">Plugin <span class="s1">&#39;L9&#39;</span>
</span><span class="line">Plugin <span class="s1">&#39;FuzzyFinder&#39;</span>
</span><span class="line"><span class="c">&quot; scripts not on GitHub</span>
</span><span class="line">Plugin <span class="s1">&#39;git://git.wincent.com/command-t.git&#39;</span>
</span><span class="line"><span class="c">&quot; git repos on your local machine (i.e. when working on your own plugin)</span>
</span><span class="line">Plugin <span class="s1">&#39;file:///home/gmarik/path/to/plugin&#39;</span>
</span><span class="line"><span class="c">&quot; ...</span>
</span><span class="line">
</span><span class="line"><span class="k">filetype</span> plugin indent <span class="k">on</span>     <span class="c">&quot; required</span>
</span><span class="line"><span class="c">&quot; To ignore plugin indent changes, instead use:</span>
</span><span class="line"><span class="c">&quot;filetype plugin on</span>
</span><span class="line"><span class="c">&quot;</span>
</span><span class="line"><span class="c">&quot; Brief help</span>
</span><span class="line"><span class="c">&quot; :PluginList          - list configured plugins</span>
</span><span class="line"><span class="c">&quot; :PluginInstall(!)    - install (update) plugins</span>
</span><span class="line"><span class="c">&quot; :PluginSearch(!) foo - search (or refresh cache first) for foo</span>
</span><span class="line"><span class="c">&quot; :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins</span>
</span><span class="line"><span class="c">&quot;</span>
</span><span class="line"><span class="c">&quot; see :h vundle for more details or wiki for FAQ</span>
</span><span class="line"><span class="c">&quot; NOTE: comments after Plugin commands are not allowed.</span>
</span><span class="line"><span class="c">&quot; Put your stuff after this line</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在vimrc的开头引入bundles.vim:</p>

<pre><code>source ~/.vim/bundles.vim
</code></pre>

<p>4.如示例所示，将所有的插件都写成plugin ‘user/repo’即可。vundle会从该库中去取。</p>

<p>如果未加’/’，则默认从vim script: https://github.com/vim-scripts/ 去取
	还可以加上非github库：</p>

<pre><code>Plugin 'git://git.wincent.com/command-t.git'
	
或者本地文件

Plugin 'file///path/from/root/to/plugin'
</code></pre>

<p>5.安装只需输入</p>

<pre><code>:BundleInstall 或者 :pluginInstall
</code></pre>

<p>更新：</p>

<pre><code>:pluginUpdate
</code></pre>

<p>删除：</p>

<pre><code>:pluginClean
</code></pre>

<p>6.vundle 还带了插件搜索功能</p>

<pre><code>:PluginSearch foo
</code></pre>

<p>搜索结果会在新窗口打开，然后可以进行直接安装删除等操作。</p>

<hr />
<p>从Vundle开始，享受vim丰富的插件带来的爽快感吧~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Android传感器高级编程》译者序]]></title>
    <link href="http://notice501.github.com/blog/%3C%3Candroidchuan-gan-qi-gao-ji-bian-cheng-%3E%3E-yi-zhe-xu.html/"/>
    <updated>2014-01-28T10:55:00+08:00</updated>
    <id>http://notice501.github.com/blog/<<androidchuan-gan-qi-gao-ji-bian-cheng->>-yi-zhe-xu</id>
    <content type="html"><![CDATA[<p><img src="http://ww2.sinaimg.cn/large/69d56e38gw1ecz2n3vnnaj209p09qaas.jpg" alt="" /></p>

<p>翻看手机中的应用，就能发现大多数应用都已经使用了传感器。让微信彻底火起来的“附近的人”和“摇一摇”、碰一碰交换信息的Bump、各种运动记录app、神奇的“磁力探测仪”、火爆的游戏Temple Run……手机设备中的传感器让应用的可玩性大大增加，提供了各种创新的交互方式，以及在PC上很难实现的功能。在我看来，移动设备相对PC来说的主要优势在于随时随地的便携性，还有就是丰富的传感器。用好传感器，已经是手机应用开发的必修课。</p>

<p>可是开始听到本书书名时，对翻译本书并没有什么兴趣。我自己也写过一本Android开发方面的书，觉得介绍传感器编程的话，一个章节足以。可是在看了英文书后，发现本书并不是简单地介绍Android传感器API的调用，而是非常专业细致地介绍了Android传感器。这本书将教会你真正用好Android传感器。</p>

<!--more-->

<p>首先，本书对传感器的介绍都非常深入。我一直认为，要真正用好一个东西，必须了解其原理。本书对传感器的原理都作了必要的解读，就拿第1章来说，相信大家都知道GPS的原理，但是你知道A-GPS吗？S-GPS呢？是否知道Wi-Fi定位和移动网络定位的原理呢？想要用好Android的定位服务，这些知识是必需的。我的一位朋友前几天还问我，他玩微信中“附近的人”，明明在杭州却老是定位在南京。其实原因就是他在使用Wi-Fi定位，而这个路由器在南京呆了6年，在Google的数据库中早就被定位在了南京的某地，Google并没有即时更新该数据库。如果微信考虑这种情况，相信可以对这种状况做一些特别的处理。</p>

<p>其次，本书的范围很广。与其说是介绍传感器，倒不如说是介绍如何充分利用Android设备的硬件能力。本书分4个部分，涵盖了定位的相关内容、各种物理传感器的介绍(包括重力传感器、加速计、磁强计等，还介绍了AOA和ADK)，同时还包括了NFC、摄像头、图像处理、麦克风等，以及语音识别和文本转语音的内容。可以说，本书完全涵盖了Android的硬件设备能力，能够用来打造一个非常有趣的应用。运用好这些硬件，可以充分发挥Android设备智能和便携的特性。同时这也是相对Web 应用来说非常大的优势。书中甚至包括了最近火热的Arduino的使用介绍，读者可以尽情地创新创意。</p>

<p>再次，本书的示例非常丰富，并且很多都可以简单复用。书中有着大量的示例，大多都是作者对传感器使用的最佳实践，并且结合了实际的使用场景，而不是简单的demo。同时，作者提供了大量框架性的代码，读者都可以直接复用。通过这些示例，读者可以快速掌握这些传感器的用法。</p>

<p>在翻译本书的过程中，感谢我的家人，你们给了我最大的支持。感谢我的好朋友徐婷翻译了第六章，且对本书一丝不苟的校对，让行文更加通顺优美，在很多专业知识上也提供了宝贵的建议并对本书的第6章有所贡献，在整个翻译过程中给了我莫大的支持和鼓励。感谢我所有的朋友和同事，本书的完成少不了你们的鼓励和支持。感谢清华大学出版社的编辑给了足够的耐心，并给了我很多的建议和帮助，让我获益匪浅。
本书的翻译过程非常艰辛，可谓一波三折。在本书付梓之际，虽然高兴，却也多了几分惶恐。这也是我的第一本译作，自觉水平有限，而本书其实又由多个作者完成，语言风格迥异，虽然我已经尽了很大的努力，但是肯定难免会有一些错漏和偏颇之处。对于本书的任何想法和意见都欢迎发送邮件至notice520@gmail.com。</p>

<p>最后，希望本书能帮助各位开发人员打造更美、更有创意、更有趣的移动应用。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我在用的mac软件(3)-效率篇]]></title>
    <link href="http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian-3-xiao-lu-pian.html/"/>
    <updated>2013-09-22T14:54:00+08:00</updated>
    <id>http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian-3-xiao-lu-pian</id>
    <content type="html"><![CDATA[<p>距离上篇博客竟然一晃就2个月过去了……最近确实太忙了，但一忙其实就容易乱，反而积累就少。</p>

<p>今天继续介绍下我在用的mac软件。标题为效率篇，其实没有严格的限定，就是杂乱的介绍我在用的感觉能提升效率的工具软件。</p>

<h4 id="gtd">GTD</h4>
<p>mac下好用的GTD太多了，比如非常强大的ommniFocus，也有极其简洁的clear。
<!--more-->
在试用了各种以后（这绝对不是一件有效率的事情……），我现在用的是<strong>Things</strong>和<strong>clear</strong>。</p>

<p>Things是标准GTD理念很好的载体。在inbox中记录各个要完成的任务，然后分类整理到不同的project或者不同的周期段。关于具体的使用方式我就不多说了，大家可以去搜索下，GTD或者Things相关的介绍还是非常多的。我用Things主要记一些耗时较长的任务。我会在next里面放一些即将要去做的事情，在someday里放一些不那么紧急却想做的事情（也用来记录灵感）。secheduled用来记录周期性的东西，比如每天固定时间把pocket中的文章一起读一下。而project就是一个项目分类，比如工作项目，比如读书计划等。things遗憾的是没有提醒功能，手机端也只有ios。可以考虑使用免费的<a href="http://doit.im/">doit.im</a>,功能和things基本一致，还弥补了上述不足。</p>

<p>而clear就是一个非常轻量级的任务列表。我会用来记录更加具体细分的任务。比如今天要实现某个功能，那开始编程的时候，会一条条按顺序写出要做的事情。这样思路就不会乱了，而且在计划好后就能立刻开始编程了。原则上，clear的任务是每天清空的。同样，clear不支持android。</p>

<p>在我的使用过程中，两者能很好的互补，偶尔会有交叉，但是总体感觉还是非常不错的。</p>

<h4 id="alfred">Alfred</h4>
<p>一款几乎所有人都会说是神器的软件。Alfred强化了spotlight，不仅可以快速的搜索本地文件，还可以搜索各种网络上的内容，同时也可以实现完全的键盘操作。真正做到快速启动的同时，也支持自定义各种插件，使其无比强大。可以用来查找文件，直接打开文件或者应用，可以直接进行google搜索，可以查询各种词典，可以查看历史剪贴板……如图是用一个豆瓣插件直接去豆瓣搜索电影。<img src="http://foocoder.com/images/mac/alfred.png" alt="" /></p>

<p>这里就不具体介绍Alfred的功能了，这完全可以单独写篇博客来写。Alfred的使用方式也是非常简单，不用什么教程，稍微摸索下就可以了。</p>

<p><a href="http://www.waerfa.com/alfred-workflow">这篇文章</a>罗列了一些实用的插件，大家可以各取所需。其实从这些插件看，就能感觉到Alfred的强大了。</p>

<h4 id="dash">Dash</h4>
<p><a href="http://kapeli.com/dash">dash</a>主要是一个API文档浏览器。可以快速地查阅各种技术的api文档，非常方便。特别是离线环境下，尤其有用。dash还可以存储常用的代码片段以供使用。<img src="http://foocoder.com/images/mac/dash.png" alt="" /></p>

<h4 id="typinator">Typinator</h4>
<p>Typinator是一个自动文本扩展工具。即定义好缩写，就会在你输入该缩写后自动替换定义的文本。比如定义的这条缩写<img src="http://foocoder.com/images/mac/wifi.png" alt="" /></p>

<p>当我输入wifi时，会自动转换为Wi-Fi。有了typinator输入一些常用字符或者文本片段时就会非常方便。遗憾的是对中文输入法不支持，每次必须切换到英文输入法。图为官网的一张介绍图<img src="http://foocoder.com/images/mac/typinator.gif" alt="" /></p>

<h4 id="popclip">popClip</h4>
<p><a href="http://pilotmoon.com/popclip/">popClip</a>也是一个可以提升效率的工具。在你选择文本之后,popClip会弹出，如图所示：<img src="http://foocoder.com/images/mac/popClip.png" alt="" /></p>

<p>可以看到能对选中的文本进行复制，加双引号，打开dash搜索，发微博，添加到things等等。很多功能都不是默认的，和Alfred一样，popClip支持自定义插件。可以在<a href="http://pilotmoon.com/popclip/extensions/">这里</a>下载各种插件满足不同的需求。 非常强大。</p>

<h4 id="magicandocument">magicanDocument</h4>
<p>magicanDocument会根据文件类型进行分类管理。对于我这种东西有时候放的比较乱的人非常有用。不用过多介绍，一看就懂，如图：<img src="http://foocoder.com/images/mac/file.png" alt="" /></p>

<h4 id="timesink">TimeSink</h4>
<p>TimeSink是一个时间跟踪软件。他可以自动记录你在mac上使用各种软件的时间，无论是在前台使用还是后台使用。如图：<img src="http://foocoder.com/images/mac/timesink.png" alt="" /></p>

<p>每天看看自己的时间花在哪里是非常有意思的事情，可以很好的对一天的工作效率做出总结。我设置了每天都会清空重置，从这张图我可以清楚地看到今天没写什么代码，vim时间不超过半小时，时间全部花在了chrome上。因为今天一直在看一个系列博文。然后用mou写博客花了第二多的时间。这都是意料之中，但是没想到聊了这么久的qq……所以，这款软件能让你清楚的知道时间都是被谁偷走了。我很喜欢。</p>

<h4 id="synergy">synergy</h4>
<p>synergy用来用一套键鼠操作多个电脑。如图：<img src="http://foocoder.com/images/mac/synergy1.png" alt="" /></p>

<p>一台作为服务端，共享它的键鼠，其他的作为client端。填上相应的ip地址，拖动屏幕的相对位置即可，非常方便。<img src="http://foocoder.com/images/mac/synergy2.png" alt="" /></p>

<hr />
<p>9.24更新</p>

<h4 id="eggscellent">eggscellent</h4>
<p><a href="http://www.eggscellentapp.com/">eggscellent</a>是一款todolist加上番茄工作法的效率应用。番茄工作法的软件很多，我觉得这款还是很不错的。todolist可以和things等GTD应用融合，非常方便。在things上today中的事项都会自动添加到其列表上。ui也非常漂亮。总的来说，是一款功能强大，又不失简洁的番茄工作法应用。</p>

<p><img src="http://foocoder.com/images/mac/eggs1.jpeg" alt="" /></p>

<p><img src="http://foocoder.com/images/mac/eggs2.jpeg" alt="" /></p>

<p>顺便提一下，在这之前，我用的是叫smart Timer的一个小应用，没有todo list，就一个时间倒计时，非常简洁，也是非常好用的，喜欢功能单一的朋友可以用下这个试试。</p>

<p>就写到这里吧，很多软件我也不知道该不该界定为效率软件。不过这些都是我常用而且感觉对效率有提升的软件。欢迎留言交流。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端环境之tmux]]></title>
    <link href="http://notice501.github.com/blog/zhong-duan-huan-jing-zhi-tmux.html/"/>
    <updated>2013-07-28T17:09:00+08:00</updated>
    <id>http://notice501.github.com/blog/zhong-duan-huan-jing-zhi-tmux</id>
    <content type="html"><![CDATA[<h2 id="tmux">今天继续介绍我的终端环境，tmux。</h2>

<p>tmux 是一个优秀的终端复用软件，类似 GNU Screen，但来自于OpenBSD，采用BSD授权。使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机。简单来说，tmux是一个<code>multiplexers</code>,他可以让你同时运行多个终端，在多个终端之间切换。</p>

<h2 id="why-tmux">why tmux?</h2>
<p>用一个工具的第一问自然还是为什么要用。其实当时使用tmux的原因很简单。工作中经常需要长时间的编译。在想要回家时编译还没结束，可以在计算机休眠的情况下继续编译。简单的寻觅一番之后，就发现了tmux。而且远超预期，就一直用了下来。</p>

<p>其他让我非常喜欢的功能有：</p>

<!--more-->

<ol>
  <li>window，pane的概念可以很好地进行多窗口切换，窗口分割。</li>
  <li>状态行配置很容易。</li>
  <li>vi 模式</li>
  <li>复制粘贴缓冲区</li>
  <li>脚本化.通过脚本可以自动化窗口布局。</li>
</ol>

<h2 id="tmux-1">tmux简单介绍</h2>

<p>tmux是典型的c/s架构。有如下几个概念。</p>

<ul>
  <li>session. session是一个特定的终端组合。输入tmux就可以打开一个新的session。</li>
  <li>window。window 为session中的终端。</li>
  <li>pane 。pane为一个window分隔出来的各个间隔，即window中的终端。</li>
</ul>

<h2 id="tmux-2">tmux的使用</h2>
<p>正如上所述，在终端中输入<code>tmux</code>就可以打开一个tmux session。如图：
<img src="http://foocoder.com/images/mac/tmux.png" alt="" /></p>

<p>底部会出现状态栏。左边表示当前为session 0， window 1， pane 1，中间会显示当前窗口编号和路径，右侧会本机信息和时间。这并不是默认设置，但是配置tmux的状态行非常容易，在后面我会简单的介绍如何配置tmux，并提供我的配置文件。</p>

<p>tmux的所有操作必须先使用一个前缀键进入命令模式，或者说进入控制台，就像vi中的<code>esc</code>。默认的前缀为<code>&lt;c-b&gt;</code>,比较难按，很多人会改为screen中的<code>&lt;c-a&gt;</code>，来保持一致性。可是这和emacs风格的终端回到行首的快捷键冲突，我使用的是<code>c-k</code>。大家可以根据自己喜好来配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">set -g prefix ^k
</span><span class="line">unbind ^b</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>输入<code>?</code>显示所有的bind-key，如图<img src="http://foocoder.com/images/mac/allbindkey.png" alt="" /></p>

<p>如果设置了<code>setw -g mode-keys vi</code>,可以使用vi 的 <code>j</code> <code>k</code>风格快捷键上下浏览。这些bind-key显示了所有的tmux操作。按q退出。</p>

<p>下面就介绍一些常用的操作，为了方便大家查看，所有的bind-key都是系统默认的，而不是我自己配置的。省略了前缀键。</p>

<h3 id="section">复制粘贴</h3>
<ul>
  <li><code>[</code> 进入复制模式。</li>
  <li><code>]</code> 粘贴</li>
</ul>

<p>进入复制模式后，可以用vi风格的快捷键进行移动（按上文的设置）。按下<code>sapce</code>就可以选择文本。回车键进行复制。然后再通过<code>]</code>进行粘贴。</p>

<p>这里我将复制粘贴设为类似vi的模式,使用<code>esc</code>进入复制模式，<code>v</code>进入粘贴模式，选择后<code>y</code>进行复制。<code>&lt;Prefix-p&gt;</code>进行粘贴.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># Copy and paste like in vim
</span><span class="line">unbind [
</span><span class="line">bind Escape copy-mode
</span><span class="line">unbind p
</span><span class="line">bind p paste-buffer
</span><span class="line">bind -t vi-copy 'v' begin-selection
</span><span class="line">bind -t vi-copy 'y' copy-selection</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所有的复制都会被记录到缓冲区，输入<code>#</code>或者 <code>tmux list-buffers</code>查看缓冲区,同时也进入了复制模式。也可以使用”=”来选择并粘贴缓冲区内容。tmux的缓冲区和系统剪贴板是完全独立的，为了复制到系统剪贴板，我做了如下处理，对于mac os X用户：</p>

<p>第一步：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew install reattach-to-user-namespace</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而后增加配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># getting tmux to copy a buffer to system clipboard
</span><span class="line">set-option -g default-command "reattach-to-user-namespace -l zsh" # or bash...
</span><span class="line">bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy" \; display-message "Copied tmux buffer to system clipboard"
</span><span class="line">bind C-v run "reattach-to-user-namespace pbpaste | tmux load-buffer - &amp;&amp; tmux paste-buffer"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样，在tmux中进行复制后。按下前缀键后键入<code>y</code>,就会在状态栏显示已粘贴到剪贴板，如图<img src="http://foocoder.com/images/mac/paste.png" alt="" />
此时，就可以用<code>cmd-v</code>进行粘贴了。系统剪贴板的也可以键入<code>&lt;C-v&gt;</code>粘贴。（当然，更方便的还是直接<code>cmd-v</code>,无需前缀键）。</p>

<p>对于linux用户,可以使用xclip,配置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bind y run-shell "tmux show-buffer | xclip -sel clip -i" \; display-message "Copied tmux buffer to system clipboard"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>同样键入<code>y</code>复制buffer中最新的内容到系统剪贴板。</p>

<h3 id="session">session操作</h3>
<ul>
  <li><code>d</code> deattch当前session。输入<code>tmux attach [-t sessionname]</code>重新进入该session。</li>
  <li><code>tmux ls</code> 列出所有session。如图:<img src="http://foocoder.com/images/mac/allsession.png" alt="" />输入，退出当前session后，<code>tmux attach -t 1</code>即可切换到名字为1的session。</li>
  <li><code>$</code> 重命名当前session</li>
  <li><code>&lt;c-z&gt;</code> 挂起当前session</li>
</ul>

<h3 id="window">window操作</h3>
<ul>
  <li><code>c</code> 创建一个新的window</li>
  <li><code>b</code> 重命名当前window</li>
  <li><code>&amp;</code> 关闭当前window</li>
  <li><code>n</code> 移动到下一个窗口</li>
  <li><code>p</code> 移动到前一个窗口</li>
  <li><code>l</code> 切换到上一个窗口</li>
  <li><code>w</code> 列出所有窗口编号,并进行选择切换</li>
  <li><code>编号</code> 移动到指定编号的窗口。</li>
  <li><code>.</code> 修改窗口编号，相当于排序。</li>
  <li><code>f</code> 搜索所有的窗口。非常方便的功能。如图<img src="http://foocoder.com/images/mac/search.png" alt="" /></li>
</ul>

<h4 id="pane">pane操作</h4>
<ul>
  <li><code>"</code> 横向分割</li>
  <li><code>%</code> 纵向分割</li>
  <li><code>方向键</code> 在pane直接移动</li>
  <li><code>o</code> 到下一个pane</li>
  <li><code>opt+方向键</code> 调整pane大小</li>
  <li><code>{ / }</code>左右pane交换</li>
  <li><code>空格</code> 横竖切换</li>
  <li><code>q</code> 显示pane的编号</li>
  <li><code>x</code> 关闭当前pane</li>
</ul>

<p>我的配置将分割操作改为vi风格的<code>v</code>和<code>s</code>,而pane之间的跳转也改为vi风格,调整pane的大小也是一样。配置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># split windows like vim.  - Note: vim's definition of a horizontal/vertical split is reversed from tmux's
</span><span class="line">unbind '"'
</span><span class="line">unbind %
</span><span class="line">unbind s
</span><span class="line">bind s split-window -v
</span><span class="line">bind S split-window -v -l 40
</span><span class="line">bind v split-window -h
</span><span class="line">bind V split-window -h -l 120
</span><span class="line">
</span><span class="line"># navigate panes with hjkl
</span><span class="line">bind h select-pane -L
</span><span class="line">bind j select-pane -D
</span><span class="line">bind k select-pane -U
</span><span class="line">bind l select-pane -R
</span><span class="line">
</span><span class="line"># resize panes like vim
</span><span class="line">bind &lt; resize-pane -L 10
</span><span class="line">bind L resize-pane -L 100
</span><span class="line">bind &gt; resize-pane -R 10
</span><span class="line">bind R resize-pane -R 100
</span><span class="line">bind - resize-pane -D 5
</span><span class="line">bind D resize-pane -D 36
</span><span class="line">bind + resize-pane -U 5
</span><span class="line">bind U resize-pane -U 35
</span><span class="line">
</span><span class="line"># swap panes
</span><span class="line">bind ^u swapp -U
</span><span class="line">bind ^d swapp -D</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同时还绑定了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bind q killp</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>使用<code>q</code>来关闭pane，免去了关闭确认.但是会覆盖掉原有的<code>p</code>操作，显示pane编号。我不需要这个，覆盖就覆盖了。</p>

<h3 id="tmux-3">脚本化tmux</h3>
<p>tmux可以进入命令行模式，快捷键为<code>:</code>。而且运行的命令在不同的session中都会生效。我绑定了一个命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bind r source-file ~/.tmux.conf \; display "Configuration Reloaded!"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这样只要输入<code>r</code>,就可以重新加载tmux.conf配置文件。</p>

<p>还可以用来进行自动化布局，例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">selectp -t 0             
</span><span class="line">splitw -h -p 50           
</span><span class="line">selectp -t 1              
</span><span class="line">splitw -v -p 40 'node'  
</span><span class="line">selectp -t 2              </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将其保存在随便在一个文件中，而后使用和上述类似的<code>source-file</code>加载该文件，就会分隔三个pane，其中一个pane 会输入node，开启一个node的js shell。其中的50，40 为占窗口大小的百分比。</p>

<p>同时，tmux还支持运行shell脚本。可以写一个shell脚本进行各种环境初始化和布局初始化。这里就不再介绍了。</p>

<h3 id="section-1">状态栏</h3>

<p>tmux的状态栏配置非常简单。相比screen就…… 比如我的配置中：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">set -g status-left "#[fg=green]s#S:w#I.p#P#[default]"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这一行就将状态栏左侧配置为：<img src="http://foocoder.com/images/mac/statusbar.png" alt="" /></p>

<p>绿色，#S,#I,#p分别表示session，window，pane编号。</p>

<p>当然，你可以让状态行更强大,可以使用<a href="https://github.com/erikw/tmux-powerline">tmux-powerline</a>。
如图<img src="http://foocoder.com/images/mac/powerline-status.png" alt="" /></p>

<p>是一个示例样式。
不过我还是喜欢简洁，而且大多数的信息其实都没什么用。自己并没有使用，不过还是推荐大家试一试，使用也不复杂，按照说明一步步来就可以了。使用powerline需要使用pathc过的字体，在<a href="https://github.com/Lokaltog/powerline-fonts">这里</a>可以找到一些，当然也可以自己patch。</p>

<hr />
<p>最后提供我的整个配置文件，可以在我的<a href="https://github.com/notice501/dotfiles">dotfiles</a>的tmux目录下找到。</p>

<p>欢迎留言交流。也可以关注我的微博<strong><a href="http://weibo.com/notice520">foocoder</a></strong>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我在用的mac软件(2)-终端环境之zsh和z(*nix都适用)]]></title>
    <link href="http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian-2.html/"/>
    <updated>2013-07-18T20:53:00+08:00</updated>
    <id>http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian-2</id>
    <content type="html"><![CDATA[<p>继续上篇介绍我的终端环境。这篇介绍zsh和z，其实这不局限于os x，在所有的*nix系统中都是可用的。</p>

<h1 id="zsh">zsh</h1>

<p>zsh作为bash的替代品，自然很多人要问：why zsh？
 在<a href="http://www.acm.uiuc.edu/workshops/zsh/why.html">Zsh Workshop</a> 有个长长的功能列表，用来回答这个问题。这里讲下我选择zsh的原因，当然，也是介绍zsh强大的功能。</p>

<ol>
  <li>兼容bash。这使得切换到zsh没有任何成本。</li>
  <li>OS X默认的bash版本实在是太老了啊……</li>
  <li>拼写纠正。你总会不小心打错命令。这时，zsh会进行自动拼写纠正，如图：<img src="http://foocoder.com/images/mac/cerrect.png" alt="" /></li>
  <li>更强大的补全。
 <!--more-->
    <ul>
      <li>连按两次tab会列出所有的补全列表并直接开始选择。如图：<img src="http://foocoder.com/images/mac/tabcd.png" alt="" />
 	并且可以用方向键来选择，但是对我这种很少用方向键的人来说只能猛敲tab了么，不是，zsh支持使用<code>&lt;ctrl-n/p/f/b&gt;</code>来选择，perfect!</li>
      <li>命令选项补全。有多少人依然记不住tar的命令选项？中枪的去抄20遍……在zsh中只需要键入<code>tar - &lt;tab&gt;</code>就会列出所有的选项和帮助说明。用了zsh之后<code>man</code>少用了好多……</li>
      <li>命令参数补全。zsh 对命令的参数补全也很强大。键入<code>kill &lt;tab&gt;</code>就会列出所有的进程名和对应的进程号。如图：<img src="http://foocoder.com/images/mac/kill2.png" alt="" />这还不够，试试键入<code>kill sbin &lt;tab&gt;</code>,如图所示:<img src="http://foocoder.com/images/mac/kill1.png" alt="" />自动为sbin这个进程名补全了进程号。kill进程再也不用两步操作了。</li>
    </ul>
  </li>
  <li>更智能的历史命令。在用<code>&lt;ctrl-p&gt;</code>或者<code>方向上键</code>查找历史命令时，zsh支持限制查找。比如，输入<code>ls </code>然后再按方向上键,则只会查找用过的ls命令。而此时使用<code>&lt;ctrl-p&gt;</code>则会仍然按之前的方式查找，忽略<code>ls</code>。</li>
  <li>多个终端会话共享历史记录。经常有多个窗口，tab，tmux的多个session，panel。这些命令历史不能共享实在是很糟糕的回忆。但是有了zsh之后，这些确实成了回忆了,所有的命令历史都可以共享。</li>
  <li>更智能的<code>cd</code>。首先你甚至不需要再输入cd了，直接输入路径即可。第二，在你知道路径的情况下，比如<code>/usr/local/bin</code>你可以输入<code>cd /u/l/b</code>然后按<code>&lt;Tab&gt;</code>进行补全快速输入。这显然不够，zsh还支持路径替换，如果你其实想进入的是<code>/usr/local/bin</code>，不再需要<code>../</code> 了，直接在当前输入<code>cd bin share</code>即可，则<code>bin</code>会替换为<code>share</code>。在之后我会介绍z和autojumper，目录跳转会更方便。 </li>
  <li>更强大的alias。zsh不仅支持普通的alias，例如：<code>alias ls ='ls --color=auto'</code>。zsh还支持后缀alias,即以什么命令打开特定的后缀名文件。例如<code>alias -s js=mvim</code>,输入<code>hello.js</code>，会以vim打开该文件,而不在需要<code>vim hello.js</code>。</li>
  <li>通配符搜索。这也是我最爱的功能之一。之前讲过由于命令补全少用了很多<code>man</code>命令，而这个功能让我少用了很多<code>find</code>命令。	一般的通配符搜索无非是<code>ls -l *.log</code>,如图:<img src="http://foocoder.com/images/mac/ls1.png" alt="" />在zsh中可以做到递归的通配符搜索。使用<code>**/</code>来递归搜索，如图<img src="http://foocoder.com/images/mac/ls2.png" alt="" />是不是在很多场景下可以取代<code>find</code>？</li>
</ol>

<p>以上都是我感觉迁移到zsh之后非常实用的功能。要想从头开始了解和学习zsh，可以访问<a href="http://zsh.sourceforge.net/Guide/zshguide.html">A User’s Guide to the Z-Shell</a>。不过大家都很忙，从头开始自己学习和配置会很累。所以现在说到zsh，不得不提的就是<a href="https://github.com/robbyrussell/oh-my-zsh?source=c">oh-my-zsh</a>,oh-my-zsh是一个开源的zsh配置管理框架，提供了大量实用的功能，主题等。现在基本都是标配了吧。如图是我在用的默认zsh主题<code>robbyrussell</code>，如图<img src="http://foocoder.com/images/mac/gitoh.png" alt="" />可以发它能自动显示当前所在的git分支以及当前本地状态（黄色的小叉表示本地有更新未提交）。</p>

<p>当然zsh也不是完美无缺。在我使用过程中有两点不是很舒服：
1. 自动纠正并不总是那么智能。如图：<img src="http://foocoder.com/images/mac/zhuanyi.png" alt="" />
	但是可以对这些命令使用alias 加上<code>nocorrect</code>前缀，如：</p>

<p><code>alias rake deploy='nocorrect rake deploy'</code></p>

<ol>
  <li>一些符号是zsh中保留的，使用需要转义，如图：<img src="http://foocoder.com/images/mac/wrongcorrect.png" alt="" /></li>
</ol>

<hr />

<p>下面讲下zsh和oh-my-zsh的安装。</p>

<p><strong>使用brew来安装zsh</strong></p>

<p><code>
  brew install zsh
</code></p>

<p><strong>设置zsh为默认</strong></p>

<p>在<code>/etc/shells</code>文件末尾添加</p>

<p><code>
 /usr/local/bin/zsh
</code>	</p>

<p>执行：</p>

<p><code>
 chsh -s /usr/local/bin/zsh
</code></p>

<p>最后记得将<code>~/.bash_prorile</code>或者<code>~/.profile</code>等配置拷贝到~/.zshrc中。</p>

<p><strong>安装oh-my-zsh</strong></p>

<p>自动安装:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以选择自己喜欢的<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">主题</a>。只需要修改<code>~/.zshrc</code>文件中的<code>ZSH_THEME</code>即可。</p>

<h1 id="zautojump">z和autojump</h1>

<p><a href="https://github.com/rupa/z">z</a>和<a href="https://github.com/joelthelion/autojump">autojump</a>的功能类似，前者是简单的shell脚本实现，后者由python实现，功能都是可以方便自动匹配到你最多使用的目录并跳转。我在用的是z，如图<img src="http://foocoder.com/images/mac/zjump.png" alt="" />，我在根目录输入<code>z github</code>可以自动跳转到我常用的<code>notice501.github.com</code>这个目录，也就是本博客的工程目录。超级方便的工具。autojump用法类似，命令为<code>j</code>而不是<code>z</code>两者的安装方式：</p>

<p><strong>z</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git@github.com:rupa/z.git</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而后将z.sh放入环境变量即可。</p>

<p><strong>autojump</strong></p>

<p>autojump可以直接使用brew安装</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew install autojump</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有问题和分享欢迎留言交流。也欢迎关注我的<a href="http://weibo.com/notice520">微博</a>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我在用的mac软件(1)--终端环境之iTerm2]]></title>
    <link href="http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian.html/"/>
    <updated>2013-07-14T20:42:00+08:00</updated>
    <id>http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian</id>
    <content type="html"><![CDATA[<p>之前一直有朋友要我分享下在用的mac软件，今天有空就来写一下，可能不止于软件，会有一些配置或者工具，或者叫环境更合适。有些可能一句话带过，有些会详细介绍。也不分类了，想到哪个就写出来。如果已经写的足够长了，就会分几篇来写。</p>

<h3 id="iterm2zshtmux">iTerm2+zsh+tmux的终端环境</h3>

<h5 id="iterm2">iTerm2</h5>

<p>其实现在os x的terminal已经做的很好了，但是iTerm2的功能依然要更强大一些。简述下优点和常用功能：</p>

<ul>
  <li>
    <p>开源免费。 </p>
  </li>
  <li>兼容性比默认Terminal更好。
    <ul>
      <li>对于经常要远程使用的情况下，默认的Terminal在使用vi时经常出现不兼容的问题，而iTerm2在这方面显然做的更好。</li>
    </ul>
  </li>
  <li>快捷键丰富。
    <ul>
      <li><code>⌘ + 数字</code>:  切换标签页。 <code>⌘ + 方向键</code> 按方向切换标签页。</li>
      <li><code>⌘ + enter</code>: 切换全屏
<!--more--></li>
      <li><code>⌘ + f</code>: 查找。支持正则。其中查找的内容会被自动复制。省去了再去⌘+c的步骤。同样，鼠标去选中的内容也会自动复制，也可以鼠标中键直接粘贴。一般在使用时，键入搜索关键词，然后用<code>shift-tab</code>或者<code>tab</code>左右自动补全，<code>option + enter</code>则自动将搜索结果键入，并且复制到剪贴板。</li>
      <li><code>⌘ + d</code>: 垂直分屏，<code>⌘ + shift + d</code>: 水平分屏。使用<code>⌘ + ]</code>和<code>⌘ + [</code>在最近使用的分屏直接切换.而<code>⌘ + opt + 方向键</code>切换到指定位置的分屏。</li>
      <li><code>⌘ + t</code> :新的标签页</li>
      <li><code>⌘ + w</code> :关闭当前标签页</li>
      <li><code>⌘ + ；</code>:自动补全历史命令。如图:<img src="http://foocoder.com/images/mac/autocom.png" alt="自动补全" /></li>
      <li><code>⌘ + shift + h</code>: 剪贴板历史，如图：<img src="http://foocoder.com/images/mac/history.png" alt="剪贴板历史" /></li>
      <li><code>ctrl + u</code>: 清空当前行。这里要注意，mac默认的ctrl+u为清楚当前光标至行首的内容，在iTerm2中则直接清除本行。iTerm2 也支持其他常用的操作命令，这里顺带讲下，因为这些命令都是mac下非常常用也很好用的：
        <ul>
          <li><code>ctrl + a</code>: 到行首	</li>
          <li><code>ctrl + e</code>: 行末</li>
          <li><code>ctrl + f/b</code>: 前进后退，相当于左右方向键，但是显然比移开手按方向键更快 		</li>
          <li><code>ctrl + p</code>: 上一条命令，相当于方向键上</li>
          <li><code>ctrl + r</code>: 搜索命令历史，这个大家都应该很熟悉了</li>
          <li><code>ctrl + d</code>: 删除当前字符</li>
          <li><code>ctrl + h</code>: 删除之前的字符</li>
          <li><code>ctrl + w</code>: 删除光标前的单词</li>
          <li><code>ctrl + k</code>: 删除到文本末尾</li>
          <li><code>ctrl + t</code>: 交换光标处文本</li>
        </ul>
      </li>
      <li><code>⌘ + —/+/0</code>: 调整字体大小</li>
      <li><code>⌘ + r</code>:清屏，其实是滚到新的一屏，并没有清空。ctrl + l 也可以做到。</li>
    </ul>
  </li>
  <li>更多实用功能。
    <ul>
      <li>Exposé 标签 按<code>⌘ + opt + e </code>打开Exposé，并支持搜索。如图：<img src="http://foocoder.com/images/mac/expose.png" alt="Exposé" /></li>
      <li>全局呼出快捷键。如图：
<img src="http://foocoder.com/images/mac/hotkeys.png" alt="呼出快捷键" /></li>
      <li><code>⌘ + /</code>: 找到当前光标位置，有时会很有用。</li>
      <li><code>shift + ⌘ + s</code>: 保存当前窗口快照。</li>
      <li><code>⌘ + opt + b</code>: 快照回放。很有意思的功能，你可以对你的操作根据时间轴进行回放。可以拖动下方的时间轴，也可以按左右方向键。如图：<img src="http://foocoder.com/images/mac/replay.png" alt="快照回放" /></li>
    </ul>
  </li>
  <li>支持256色。方便配置vi配色。但是在某些远超服务器上不支持256色，则只要在Prefences-&gt;Profiles-&gt;Terminal里设置为xterm。</li>
</ul>

<hr />

<p>光写个iTerm2没想到就写了这么多，稍微打了下腹稿，后面zsh + tmux 肯定比这里还要多。下篇继续吧。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记录遇到的零碎问题]]></title>
    <link href="http://notice501.github.com/blog/ji-lu-yu-dao-de-ling-sui-wen-ti.html/"/>
    <updated>2013-07-10T20:47:00+08:00</updated>
    <id>http://notice501.github.com/blog/ji-lu-yu-dao-de-ling-sui-wen-ti</id>
    <content type="html"><![CDATA[<p>日常开发过程中总会遇到各种各样奇怪的问题。相信大家都会有这样的体会：如果有人也遇到过这个问题，并分享了解决过程，自己就会很开心。如果这个问题没人分享过，那恐怕就要费劲一番周折了。这里记录那些各种小的莫名的琐碎的问题。方便自己查阅，也方便他人。会有大致分类，也会不定期更新。</p>

<h3 id="vim">vim</h3>
<ul>
  <li>
    <p>在使用了session的情况下，neocomplete对于session中加载的文件无法正常使用。原因是其completefunc为空。解决办法是在session加载之前，执行vimrcneocomplete#initialize()。（在vimrc中加入execute neocomplete#initialize()即可）
 <!--more--></p>
  </li>
  <li>
    <p>在mac中alt的map会有问题。原因是alt加某个字符都会代表新的字符，比如 ,在我的mac中alt-1/2/3分别是¡/™/£。所以要map alt-1，只要map ¡即可。</p>
  </li>
  <li>
    <p>macvim获取的 $PATH并不是用户常规设置的 $PATH。这会导致一些在 $PATH中加入的执行文件在macvim中无法执行，比如sytanstic众多的语法检查。这可以说是macvim的一个bug。相反，macvim使用的是/usr/libexec/path_helper，它使用两个部分的内容，一部分是/etc/paths，另一部分是/etc/paths.d。所以只要修改etc/paths.d，加入所需的环境变量即可。</p>
  </li>
  <li>
    <p>在终端中用mvim打开文件会直接在新窗口打开，可以加入–remote-tab参数在新标签打开。我还是喜欢在新标签打开，每次输入这个参数太麻烦。修改mvim执行文件，在头部加入tabs=true，并将#last step的if块替换为：</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if [ "$gui" ]; then
</span><span class="line"> 	if $tabs &amp;&amp; [[ `$binary --serverlist` = "VIM" ]]; 	then
</span><span class="line">   	 exec "$binary" -g $opts --remote-tab-silent 	${1:+"$@"}
</span><span class="line">else    exec "$binary" -g $opts ${1:+"$@"}
</span><span class="line">	fi
</span><span class="line">else  exec "$binary" $opts ${1:+"$@"}
</span><span class="line">	fi</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="zsh">zsh</h3>
<ul>
  <li>zsh中使用一些符号需要加上转义字符。比如rake new_post[“记录遇到的零碎问题”],git reset HEAD\^,否则会报zsh: no matches found:错误。</li>
</ul>

<h3 id="parallels">Parallels</h3>
<ul>
  <li>Parallels中登陆windows时提示密码过期，需要更高。但是我根本没设置过密码。原因可能是安装时跳过了设置。只需要保持原密码字段为空，键入新密码设置密码即可。</li>
</ul>

<h3 id="os-x">os x</h3>
<ul>
  <li>在os x中，要让服务器使用1024以下的端口，必须sudo启动服务器。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[详解JavaScript中的this]]></title>
    <link href="http://notice501.github.com/blog/xiang-jie-javascriptzhong-de-this.html/"/>
    <updated>2013-05-03T19:28:00+08:00</updated>
    <id>http://notice501.github.com/blog/xiang-jie-javascriptzhong-de-this</id>
    <content type="html"><![CDATA[<p>JavaScript中的this总是让人迷惑，应该是js众所周知的坑之一。
个人也觉得js中的this不是一个好的设计，由于this晚绑定的特性，它可以是全局对象，当前对象，或者…有人甚至因为坑大而不用this。</p>

<p>其实如果完全掌握了this的工作原理，自然就不会走进这些坑。来看下以下这些情况中的this分别会指向什么：
<!--more--></p>

<h3 id="this">1.全局代码中的this</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="c1">//window</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>全局范围内的this将会指向全局对象，在浏览器中即使window。</p>

<h3 id="section">2.作为单纯的函数调用</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">fooCoder</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">fooCoder</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class="line"><span class="nx">alert</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span><span class="c1">// 全局变量x值为2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里this指向了全局对象，即window。在严格模式中，则是undefined。</p>

<h3 id="section-1">3.作为对象的方法调用</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;clever coder&quot;</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">name</span> <span class="o">:</span> <span class="s2">&quot;foocoder&quot;</span><span class="p">,</span>
</span><span class="line">	<span class="nx">hello</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sth</span><span class="p">){</span>
</span><span class="line">		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; says &quot;</span> <span class="o">+</span> <span class="nx">sth</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">person</span><span class="p">.</span><span class="nx">hello</span><span class="p">(</span><span class="s2">&quot;hello world&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出 foocoder says hello world。this指向person对象，即当前对象。</p>

<h3 id="section-2">4.作为构造函数</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="k">new</span> <span class="nx">FooCoder</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>函数内部的this指向新创建的对象。</p>

<h3 id="section-3">5.内部函数</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;clever coder&quot;</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">name</span> <span class="o">:</span> <span class="s2">&quot;foocoder&quot;</span><span class="p">,</span>
</span><span class="line">	<span class="nx">hello</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sth</span><span class="p">){</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">sayhello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sth</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; says &quot;</span> <span class="o">+</span> <span class="nx">sth</span><span class="p">);</span>
</span><span class="line">		<span class="p">};</span>
</span><span class="line">		<span class="nx">sayhello</span><span class="p">(</span><span class="nx">sth</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">person</span><span class="p">.</span><span class="nx">hello</span><span class="p">(</span><span class="s2">&quot;hello world&quot;</span><span class="p">);</span><span class="c1">//clever coder says hello world</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在内部函数中，this没有按预想的绑定到外层函数对象上，而是绑定到了全局对象。这里普遍被认为是JavaScript语言的设计错误，因为没有人想让内部函数中的this指向全局对象。一般的处理方式是将this作为变量保存下来，一般约定为that或者self：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;clever coder&quot;</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">name</span> <span class="o">:</span> <span class="s2">&quot;foocoder&quot;</span><span class="p">,</span>
</span><span class="line">	<span class="nx">hello</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sth</span><span class="p">){</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">sayhello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sth</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; says &quot;</span> <span class="o">+</span> <span class="nx">sth</span><span class="p">);</span>
</span><span class="line">		<span class="p">};</span>
</span><span class="line">		<span class="nx">sayhello</span><span class="p">(</span><span class="nx">sth</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">person</span><span class="p">.</span><span class="nx">hello</span><span class="p">(</span><span class="s2">&quot;hello world&quot;</span><span class="p">);</span><span class="c1">//foocoder says hello world</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="callapplythis">6.使用call和apply设置this</h3>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">person</span><span class="p">.</span><span class="nx">hello</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="s2">&quot;world&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>apply和call类似，只是后面的参数是通过一个数组传入，而不是分开传入。两者的方法定义：</p>

<pre><code>call( thisArg [，arg1，arg2，… ] );  // 参数列表，arg1，arg2，...
apply(thisArg [，argArray] );     // 参数数组，argArray
</code></pre>

<p>两者都是将某个函数绑定到某个具体对象上使用，自然此时的this会被显式的设置为第一个参数。</p>

<h2 id="section-4">简单地总结</h2>

<p>简单地总结以上几点，可以发现，其实只有第六点是让人疑惑的。</p>

<p>其实就可以总结为以下几点：</p>

<p>1.当函数作为对象的方法调用时，this指向该对象。</p>

<p>2.当函数作为淡出函数调用时，this指向全局对象（严格模式时，为undefined）</p>

<p>3.构造函数中的this指向新创建的对象</p>

<p>4.嵌套函数中的this不会继承上层函数的this，如果需要，可以用一个变量保存上层函数的this。</p>

<p>再总结的简单点，如果在函数中使用了this，只有在该函数直接被某对象调用时，该this才指向该对象。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">obj</span><span class="p">.</span><span class="nx">foocoder</span><span class="p">();</span>
</span><span class="line"><span class="nx">foocoder</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">...);</span>
</span><span class="line"><span class="nx">foocoder</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="err">…</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-5">更进一步</h2>

<p>我们可能经常会写这样的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#some-ele&quot;</span><span class="p">).</span><span class="nx">click</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">handler</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果在handler中用了this，this会绑定在obj上么？显然不是，赋值以后，函数是在回调中执行的，this会绑定到$(“#some-div”)元素上。这就需要理解函数的执行环境。本文不打算长篇赘述函数的执行环境，可以参考《javascript高级程序设计》中对执行环境和作用域链的相关介绍。这里要指出的时，理解js函数的执行环境，会更好地理解this。</p>

<p>那我们如何能解决回调函数绑定的问题？ES5中引入了一个新的方法，bind():</p>

<pre><code>fun.bind(thisArg[, arg1[, arg2[, ...]]])

thisArg
当绑定函数被调用时,该参数会作为原函数运行时的this指向.当使用new 操作符调用绑定函数时,该参数无效.
arg1, arg2, ...
当绑定函数被调用时,这些参数加上绑定函数本身的参数会按照顺序作为原函数运行时的参数.
</code></pre>

<p>该方法创建一个新函数，称为绑定函数，绑定函数会以创建它时传入bind方法的第一个参数作为this，传入bind方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数.</p>

<p>显然bind方法可以很好地解决上述问题。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#some-ele&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">hello</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span>
</span><span class="line"><span class="c1">//相应元素被点击时，输出foocoder says hello world</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其实该方法也很容易模拟，我们看下Prototype.js中bind方法的源码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bind</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span> <span class="nx">args</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span> <span class="nx">object</span> <span class="o">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">object</span><span class="p">,</span>
</span><span class="line">      <span class="nx">args</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)));</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>明白了么？</p>

<p>相信看完全文以后，this不再是坑～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[web app指南之构建html5离线应用]]></title>
    <link href="http://notice501.github.com/blog/web-appzhi-nan-zhi-gou-jian-html5chi-xian-ying-yong.html/"/>
    <updated>2013-02-25T13:02:00+08:00</updated>
    <id>http://notice501.github.com/blog/web-appzhi-nan-zhi-gou-jian-html5chi-xian-ying-yong</id>
    <content type="html"><![CDATA[<p>创建运行在手机上的web app时，鉴于手机用户的网络情况，我们需要考虑到用户离线使用的情况。</p>

<p>html5支持构建离线应用程序。使用它的本地缓存机制可以将应用所需的资源文件都缓存到本地，从而实现应用的离线使用。首先要说明的是，本地缓存和传动的浏览器网页缓存是不同的，网页缓存基于网页，也就是缓存一个网页的内容，而不是整个app。同时网页缓存并不可靠，我们不知道我们的app中哪个页面已经缓存，该页面的哪些资源已经缓存，而本地缓存对于缓存内容是完全可控的。</p>

<!-- more -->
<p>使用离线缓存，除了可以使应用可以离线使用外，还能帮助有效的加快网页加载速度（本地的自然更快），同时降低服务器负载（只需要下载更新的内容）。</p>

<p>正如之前所提到的，本地缓存可以指定要缓存的内容，这同过配置manifest来实现。可以为整个app配置manifest，也可以为单独某个页面来配置。</p>

<p>简单的manifest格式如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">CACHE MANIFEST
</span><span class="line">index.html
</span><span class="line">stylesheet.css
</span><span class="line">images/logo.png
</span><span class="line">scripts/main.js
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>文件的第一行必须是CACHE MANIFEST。</p>

<p>该manifest声明了需要缓存的html页面，css，图片以及js文件。</p>

<p>再看一个比较复杂的manifest文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">CACHE MANIFEST
</span><span class="line"># 指定一个版本号
</span><span class="line"># version 1
</span><span class="line"># 该类别指定要缓存的资源文件
</span><span class="line">CACHE:
</span><span class="line">/favicon.ico
</span><span class="line">index.html
</span><span class="line">stylesheet.css
</span><span class="line">images/logo.png
</span><span class="line">scripts/main.js
</span><span class="line">
</span><span class="line"># 指定不进行缓存的资源文件
</span><span class="line">NETWORK:
</span><span class="line">login.php
</span><span class="line">http://foocoder.com
</span><span class="line">
</span><span class="line"># 每行指定两个文件，第一个为在线时使用的资源，第二个是离线时使用的资源
</span><span class="line">FALLBACK:
</span><span class="line">/main.py /static.html
</span><span class="line">images/large/ images/offline.jpg
</span><span class="line">*.html /offline.html
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中#号开头的为注释。因为只有在manifest文件发生改变时才会更新，所以我们可以加个版本号方便控制。</p>

<p>从该文件中可以看到分为了三个类别：</p>

<p>CACHE类别指定需要被缓存的资源文件。</p>

<p>NETWORK类别指定不缓存的资源文件，即只在联网的情况下才能访问。</p>

<p>FALLBACK每一行都会指定两个文件，第一个为在线时使用的资源，第二个为离线时使用的备用资源。其中*为通配符，表示在线时使用所有的.html文件。</p>

<p>配置好manifest文件之后，我们只需要在页面上引用即可。如下，在html 标签的manifest属性下指定manifest文件的地址：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;html</span> <span class="na">manifest=</span><span class="s">&quot;app.manifest&quot;</span><span class="nt">&gt;</span>
</span><span class="line">...
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>该地址可以是绝对地址也可以是相对地址，但是该文件的吗MIME 类型必须是text/cache-manifest，所以需要在服务器做相应配置对该类型添加支持，例如吗，对于apache服务器，需要在配置mime.types中添加如下内容：</p>

<p>AddType text/cache-manifest .manifest
到这里为止，就完成了离线缓存的基本内容，在manifest文件发生变化时，浏览器会检查manifest文件并更新缓存。</p>

<p>我们不得不考虑一个问题，浏览器如何处理本地缓存？当服务端更新了应用程序后，用户打开时是不是会使用最新的资源了？答案是否定的。这需要了解下在使用离线缓存的情况下，浏览器与服务端的整个交互过程。</p>

<p>1.首次访问</p>

<p>在首次访问时，没有什么特别，浏览器解析index.html，请求所有的资源文件。随后就会处理manifest文件，请求所有的manifest中的资源文件，注意，即使之前已经请求过了所有的资源文件，这里必须进行重复请求。最后将这些文件缓存到本地。</p>

<p>2.再次访问</p>

<p>再次访问时，浏览器发现有本地缓存，所以会加载本地缓存内容。随后会向服务端请求manifest文件，如果manifest文件未更新，返回304代码，浏览器不做处理。如果manifest已经更新过，则请求所有manifest中的资源文件，重新对其缓存。</p>

<p>所以，即使服务端更新了manifest和其他资源，用户打开时扔是之前的页面。需要重新打开才能使用更新过后的资源。</p>

<p>有办法立刻更新缓存么？是可以的。我们可以使用applicationCache对象做到这一点。但是也只是能做到立刻更新缓存，还是需要用户重新打开也没才会生效。接下来就看看如何用applicationCache对象立刻更新缓存。</p>

<p>window.applicationCache下有个status属性。可以通过其知道当前的缓存状态</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">appCache</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">applicationCache</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">switch</span> <span class="p">(</span><span class="nx">appCache</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">case</span> <span class="nx">appCache</span><span class="p">.</span><span class="nx">UNCACHED</span><span class="o">:</span> <span class="c1">// UNCACHED == 0 </span>
</span><span class="line">    <span class="k">return</span> <span class="s1">&#39;UNCACHED&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line">  <span class="k">case</span> <span class="nx">appCache</span><span class="p">.</span><span class="nx">IDLE</span><span class="o">:</span> <span class="c1">// IDLE == 1 </span>
</span><span class="line">    <span class="k">return</span> <span class="s1">&#39;IDLE&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line">  <span class="k">case</span> <span class="nx">appCache</span><span class="p">.</span><span class="nx">CHECKING</span><span class="o">:</span> <span class="c1">// CHECKING == 2 </span>
</span><span class="line">    <span class="k">return</span> <span class="s1">&#39;CHECKING&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line">  <span class="k">case</span> <span class="nx">appCache</span><span class="p">.</span><span class="nx">DOWNLOADING</span><span class="o">:</span> <span class="c1">// DOWNLOADING == 3 </span>
</span><span class="line">    <span class="k">return</span> <span class="s1">&#39;DOWNLOADING&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line">  <span class="k">case</span> <span class="nx">appCache</span><span class="p">.</span><span class="nx">UPDATEREADY</span><span class="o">:</span>  <span class="c1">// UPDATEREADY == 4 </span>
</span><span class="line">    <span class="k">return</span> <span class="s1">&#39;UPDATEREADY&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line">  <span class="k">case</span> <span class="nx">appCache</span><span class="p">.</span><span class="nx">OBSOLETE</span><span class="o">:</span> <span class="c1">// OBSOLETE == 5 </span>
</span><span class="line">    <span class="k">return</span> <span class="s1">&#39;OBSOLETE&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line">  <span class="k">default</span><span class="o">:</span>
</span><span class="line">    <span class="k">return</span> <span class="s1">&#39;UKNOWN CACHE STATUS&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>既然可以获得状态，我们只需要请求更新，随后在状态为appCache.UPDATEREADY时更新缓存时即可。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">applicationCache</span><span class="p">.</span><span class="nx">update</span><span class="p">()</span><span class="err">方法会尝试更新用户缓存，而</span><span class="nx">applicationCache</span><span class="p">.</span><span class="nx">swapCache</span><span class="p">()</span><span class="err">方法会对本地缓存进行更新：</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">appCache</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">applicationCache</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">appCache</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span> <span class="c1">// 开始更新</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">appCache</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="nb">window</span><span class="p">.</span><span class="nx">applicationCache</span><span class="p">.</span><span class="nx">UPDATEREADY</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">appCache</span><span class="p">.</span><span class="nx">swapCache</span><span class="p">();</span>  <span class="c1">// 更新缓存</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>正如之前所说的，即使更新了缓存，还是需要重新加载才能使用最新的资源，此时可以提示用户更新。只需要监听onUpdateReady事件，该事件在缓存被下载到本地后出发，从而可以在此时提示用户：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">  <span class="nb">window</span><span class="p">.</span><span class="nx">applicationCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;updateready&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">applicationCache</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="nb">window</span><span class="p">.</span><span class="nx">applicationCache</span><span class="p">.</span><span class="nx">UPDATEREADY</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">     <span class="c1">//更新本地缓存</span>
</span><span class="line">      <span class="nb">window</span><span class="p">.</span><span class="nx">applicationCache</span><span class="p">.</span><span class="nx">swapCache</span><span class="p">();</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;已经有新的版本，是否立刻切换到最新版?&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">reload</span><span class="p">();</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>applicationCache对象还提供了其他事件，分别为：</p>

<p>onchecking，onerror，onnoupdate，ondownloading，onprogress，onupdateready，oncached和onobsolete</p>

<p>在整个浏览器与服务端交互的过程中，所有的错误都会出发error事件，我们可以通过监听error事件进行处理：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">appCache</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">applicationCache</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">handleCacheError</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">handleCacheError</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Error: Cache failed to update!&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>欢迎留言交流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android中的跨进程通信的实现（一）——远程调用过程和aidl]]></title>
    <link href="http://notice501.github.com/blog/androidzhong-de-kua-jin-cheng-tong-xin-de-shi-xian-%28%5B%3F%5D-%29-yuan-cheng-diao-yong-guo-cheng-he-aidl.html/"/>
    <updated>2012-11-02T10:44:00+08:00</updated>
    <id>http://notice501.github.com/blog/androidzhong-de-kua-jin-cheng-tong-xin-de-shi-xian-([?]-)-yuan-cheng-diao-yong-guo-cheng-he-aidl</id>
    <content type="html"><![CDATA[<p>android在设计理念上强调组件化，组件之间的依赖性很小。我们往往发一个intent请求就可以启动另一个应用的activity，或者一个你不知道在哪个进程的service，或者可以注册一个广播，只要有这个事件发生你都可以收到，又或者你可以查询一个contentProvider获得你想要的数据，这其实都需要跨进程通信的支持。只是android将其封装的如此简单，应用开发者甚至完全不用关注它是不是和我在一个进程里。</p>

<!--more-->
<p>我们有没有想过安全性问题，如此简单就可以跨进程的访问，安全性问题怎么保证。本来每个进程都是一个孤岛，而通过ipc，这个孤岛却可以和世界通信了。这里简单介绍下android中的安全机制。</p>

<p>android的安全机制分为三层。最基础的一层，android将数据分为system和data两个区。其中system是只读的，data用来存放应用自己的数据，这保证了系统数据不会被随意改写。第二层用来使应用之间的数据相互独立。每个应用都会有一个user id和group id，只有相同的user id并且来自同一个作者，才能访问它们的数据。作者通过对apk签名来标识自己。签名和uid构成了双重的保证。第三个层次就是权限体系，这个就不用多说了。</p>

<p>拉回正题，那么android是如何实现ipc的呢？答案是binder。我打算用两篇来介绍android的binder机制，这一篇着重如何使用，介绍跨进程调用的过程和aidl。另一篇着重binder实现机制。
Binder并不是android最早开始使用，它发源于Be和Palm之前的OpenBinder，由Dianne Hackborn领导开发。Hackborn现在就在google，是android framework的工程师，我们可以从https://lkml.org/lkml/2009/6/25/3 看一下，Hackborn如何描述binder。一句话总结：</p>

<pre><code>In the Android platform, the binder is used for nearly everything that happens across processes in the core platform. 
</code></pre>

<p>可是android将binder几乎封装的不可见，我们看下层次结构是怎么样的。</p>

<p><img src="http://foocoder.com/images/aidl1.png" /></p>

<p>最底层的是android的ashmen（Anonymous shared memoryy）机制，它负责辅助实现内存的分配，以及跨进程所需要的内存共享。
AIDL（android interface definition language）对Binder的使用进行了封装，可以让开发者方便的进行方法的远程调用，后面会详细介绍。</p>

<p>Intent是最高一层的抽象，方便开发者进行常用的跨进程调用。</p>

<p>关于如何使用intent去跨进程的启动一个activity或者service等，这里就不再介绍了，是android中非常基础的内容。</p>

<p>这里讲如何实现远程的方法调用。在android中对方法的远程调用无处不在，随便打开framework/base中的包，都会发现很多aidl文件。AIDL是android为了方便开发者进行远程方法调用，定义的一种语言。使用aidl完成一个远程方法调用只需要三个步骤：</p>

<ol>
  <li>用aidl定义需要被调用方法接口。</li>
  <li>实现这些方法。</li>
  <li>调用这些方法。</li>
</ol>

<p>我们拿ApiDemo中的例子来学习。在app包下面有一个ISecondary.aidl</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">interface</span> <span class="nc">ISecondary</span> <span class="o">{</span>
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Request the PID of this service, to do evil things with it.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kt">int</span> <span class="nf">getPid</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * This demonstrates the basic types that you can use as parameters</span>
</span><span class="line"><span class="cm">     * and return values in AIDL.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kt">void</span> <span class="nf">basicTypes</span><span class="o">(</span><span class="kt">int</span> <span class="n">anInt</span><span class="o">,</span> <span class="kt">long</span> <span class="n">aLong</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">aBoolean</span><span class="o">,</span> <span class="kt">float</span> <span class="n">aFloat</span><span class="o">,</span>
</span><span class="line">            <span class="kt">double</span> <span class="n">aDouble</span><span class="o">,</span> <span class="n">String</span> <span class="n">aString</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看起来和java没有什么区别。可以看到它定义个了两个接口方法。从这里我们可以知道AIDL（android接口定义语言的由来）。android会将该aidl生成一个java文件（如果你使用eclipse，会自动生成。在gen目录下。），生成的代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * This file is auto-generated.  DO NOT MODIFY.</span>
</span><span class="line"><span class="cm"> * Original file: /home/dd/workspace/ApiDemos/src/com/example/android/apis/app/ISecondary.aidl</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apis</span><span class="o">.</span><span class="na">app</span><span class="o">;</span>
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Example of a secondary interface associated with a service.  (Note that</span>
</span><span class="line"><span class="cm"> * the interface itself doesn&#39;t impact, it is just a matter of how you</span>
</span><span class="line"><span class="cm"> * retrieve it from the service.)</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ISecondary</span> <span class="kd">extends</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">IInterface</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="cm">/** Local-side IPC implementation stub class. */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Stub</span> <span class="kd">extends</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Binder</span> <span class="kd">implements</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apis</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ISecondary</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">DESCRIPTOR</span> <span class="o">=</span> <span class="s">&quot;com.example.android.apis.app.ISecondary&quot;</span><span class="o">;</span>
</span><span class="line"><span class="cm">/** Construct the stub at attach it to the interface. */</span>
</span><span class="line"><span class="kd">public</span> <span class="nf">Stub</span><span class="o">()</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="k">this</span><span class="o">.</span><span class="na">attachInterface</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">DESCRIPTOR</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Cast an IBinder object into an com.example.android.apis.app.ISecondary interface,</span>
</span><span class="line"><span class="cm"> * generating a proxy if needed.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apis</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ISecondary</span> <span class="nf">asInterface</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">IBinder</span> <span class="n">obj</span><span class="o">)</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="k">if</span> <span class="o">((</span><span class="n">obj</span><span class="o">==</span><span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line"><span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">IInterface</span> <span class="n">iin</span> <span class="o">=</span> <span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">IInterface</span><span class="o">)</span><span class="n">obj</span><span class="o">.</span><span class="na">queryLocalInterface</span><span class="o">(</span><span class="n">DESCRIPTOR</span><span class="o">);</span>
</span><span class="line"><span class="k">if</span> <span class="o">(((</span><span class="n">iin</span><span class="o">!=</span><span class="kc">null</span><span class="o">)&amp;&amp;(</span><span class="n">iin</span> <span class="k">instanceof</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apis</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ISecondary</span><span class="o">)))</span> <span class="o">{</span>
</span><span class="line"><span class="k">return</span> <span class="o">((</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apis</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ISecondary</span><span class="o">)</span><span class="n">iin</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">return</span> <span class="k">new</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apis</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ISecondary</span><span class="o">.</span><span class="na">Stub</span><span class="o">.</span><span class="na">Proxy</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="kd">public</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">IBinder</span> <span class="nf">asBinder</span><span class="o">()</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">onTransact</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span> <span class="n">data</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span> <span class="n">reply</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">RemoteException</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="k">switch</span> <span class="o">(</span><span class="n">code</span><span class="o">)</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="k">case</span> <span class="nl">INTERFACE_TRANSACTION:</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="n">reply</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">DESCRIPTOR</span><span class="o">);</span>
</span><span class="line"><span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">case</span> <span class="nl">TRANSACTION_getPid:</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="n">data</span><span class="o">.</span><span class="na">enforceInterface</span><span class="o">(</span><span class="n">DESCRIPTOR</span><span class="o">);</span>
</span><span class="line"><span class="kt">int</span> <span class="n">_result</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getPid</span><span class="o">();</span>
</span><span class="line"><span class="n">reply</span><span class="o">.</span><span class="na">writeNoException</span><span class="o">();</span>
</span><span class="line"><span class="n">reply</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="n">_result</span><span class="o">);</span>
</span><span class="line"><span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">case</span> <span class="nl">TRANSACTION_basicTypes:</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="n">data</span><span class="o">.</span><span class="na">enforceInterface</span><span class="o">(</span><span class="n">DESCRIPTOR</span><span class="o">);</span>
</span><span class="line"><span class="kt">int</span> <span class="n">_arg0</span><span class="o">;</span>
</span><span class="line"><span class="n">_arg0</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
</span><span class="line"><span class="kt">long</span> <span class="n">_arg1</span><span class="o">;</span>
</span><span class="line"><span class="n">_arg1</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">readLong</span><span class="o">();</span>
</span><span class="line"><span class="kt">boolean</span> <span class="n">_arg2</span><span class="o">;</span>
</span><span class="line"><span class="n">_arg2</span> <span class="o">=</span> <span class="o">(</span><span class="mi">0</span><span class="o">!=</span><span class="n">data</span><span class="o">.</span><span class="na">readInt</span><span class="o">());</span>
</span><span class="line"><span class="kt">float</span> <span class="n">_arg3</span><span class="o">;</span>
</span><span class="line"><span class="n">_arg3</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">readFloat</span><span class="o">();</span>
</span><span class="line"><span class="kt">double</span> <span class="n">_arg4</span><span class="o">;</span>
</span><span class="line"><span class="n">_arg4</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">readDouble</span><span class="o">();</span>
</span><span class="line"><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">_arg5</span><span class="o">;</span>
</span><span class="line"><span class="n">_arg5</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">readString</span><span class="o">();</span>
</span><span class="line"><span class="k">this</span><span class="o">.</span><span class="na">basicTypes</span><span class="o">(</span><span class="n">_arg0</span><span class="o">,</span> <span class="n">_arg1</span><span class="o">,</span> <span class="n">_arg2</span><span class="o">,</span> <span class="n">_arg3</span><span class="o">,</span> <span class="n">_arg4</span><span class="o">,</span> <span class="n">_arg5</span><span class="o">);</span>
</span><span class="line"><span class="n">reply</span><span class="o">.</span><span class="na">writeNoException</span><span class="o">();</span>
</span><span class="line"><span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTransact</span><span class="o">(</span><span class="n">code</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="n">reply</span><span class="o">,</span> <span class="n">flags</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Proxy</span> <span class="kd">implements</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apis</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ISecondary</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="kd">private</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">IBinder</span> <span class="n">mRemote</span><span class="o">;</span>
</span><span class="line"><span class="n">Proxy</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">IBinder</span> <span class="n">remote</span><span class="o">)</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="n">mRemote</span> <span class="o">=</span> <span class="n">remote</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="kd">public</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">IBinder</span> <span class="nf">asBinder</span><span class="o">()</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="k">return</span> <span class="n">mRemote</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="nf">getInterfaceDescriptor</span><span class="o">()</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="k">return</span> <span class="n">DESCRIPTOR</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Request the PID of this service, to do evil things with it.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPid</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">RemoteException</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span> <span class="n">_data</span> <span class="o">=</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span><span class="o">.</span><span class="na">obtain</span><span class="o">();</span>
</span><span class="line"><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span> <span class="n">_reply</span> <span class="o">=</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span><span class="o">.</span><span class="na">obtain</span><span class="o">();</span>
</span><span class="line"><span class="kt">int</span> <span class="n">_result</span><span class="o">;</span>
</span><span class="line"><span class="k">try</span> <span class="o">{</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeInterfaceToken</span><span class="o">(</span><span class="n">DESCRIPTOR</span><span class="o">);</span>
</span><span class="line"><span class="n">mRemote</span><span class="o">.</span><span class="na">transact</span><span class="o">(</span><span class="n">Stub</span><span class="o">.</span><span class="na">TRANSACTION_getPid</span><span class="o">,</span> <span class="n">_data</span><span class="o">,</span> <span class="n">_reply</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="line"><span class="n">_reply</span><span class="o">.</span><span class="na">readException</span><span class="o">();</span>
</span><span class="line"><span class="n">_result</span> <span class="o">=</span> <span class="n">_reply</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">finally</span> <span class="o">{</span>
</span><span class="line"><span class="n">_reply</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">return</span> <span class="n">_result</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm">     * This demonstrates the basic types that you can use as parameters</span>
</span><span class="line"><span class="cm">     * and return values in AIDL.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">basicTypes</span><span class="o">(</span><span class="kt">int</span> <span class="n">anInt</span><span class="o">,</span> <span class="kt">long</span> <span class="n">aLong</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">aBoolean</span><span class="o">,</span> <span class="kt">float</span> <span class="n">aFloat</span><span class="o">,</span> <span class="kt">double</span> <span class="n">aDouble</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">aString</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">RemoteException</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span> <span class="n">_data</span> <span class="o">=</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span><span class="o">.</span><span class="na">obtain</span><span class="o">();</span>
</span><span class="line"><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span> <span class="n">_reply</span> <span class="o">=</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span><span class="o">.</span><span class="na">obtain</span><span class="o">();</span>
</span><span class="line"><span class="k">try</span> <span class="o">{</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeInterfaceToken</span><span class="o">(</span><span class="n">DESCRIPTOR</span><span class="o">);</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="n">anInt</span><span class="o">);</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeLong</span><span class="o">(</span><span class="n">aLong</span><span class="o">);</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(((</span><span class="n">aBoolean</span><span class="o">)?(</span><span class="mi">1</span><span class="o">):(</span><span class="mi">0</span><span class="o">)));</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeFloat</span><span class="o">(</span><span class="n">aFloat</span><span class="o">);</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeDouble</span><span class="o">(</span><span class="n">aDouble</span><span class="o">);</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">aString</span><span class="o">);</span>
</span><span class="line"><span class="n">mRemote</span><span class="o">.</span><span class="na">transact</span><span class="o">(</span><span class="n">Stub</span><span class="o">.</span><span class="na">TRANSACTION_basicTypes</span><span class="o">,</span> <span class="n">_data</span><span class="o">,</span> <span class="n">_reply</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="line"><span class="n">_reply</span><span class="o">.</span><span class="na">readException</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">finally</span> <span class="o">{</span>
</span><span class="line"><span class="n">_reply</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">TRANSACTION_getPid</span> <span class="o">=</span> <span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">IBinder</span><span class="o">.</span><span class="na">FIRST_CALL_TRANSACTION</span> <span class="o">+</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="line"><span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">TRANSACTION_basicTypes</span> <span class="o">=</span> <span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">IBinder</span><span class="o">.</span><span class="na">FIRST_CALL_TRANSACTION</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Request the PID of this service, to do evil things with it.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPid</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">RemoteException</span><span class="o">;</span>
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm">     * This demonstrates the basic types that you can use as parameters</span>
</span><span class="line"><span class="cm">     * and return values in AIDL.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">basicTypes</span><span class="o">(</span><span class="kt">int</span> <span class="n">anInt</span><span class="o">,</span> <span class="kt">long</span> <span class="n">aLong</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">aBoolean</span><span class="o">,</span> <span class="kt">float</span> <span class="n">aFloat</span><span class="o">,</span> <span class="kt">double</span> <span class="n">aDouble</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">aString</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">RemoteException</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们分析下，android工具将我们写的aidl文件生成了怎样的一个文件，它都做哪些工作。</p>

<p>首先这个接口继承了android.os.IInterface.它是所有由aidl文件生成的基类。接口里有一个内部类Stub，它继承自Binder并实现了这个生成的java接口ISecondary。但是它并没有实现我们定义的接口方法。而这些接口方法其实就是留给我们去实现的。在ApiDemo中，RemoteService类实现了这些方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"> <span class="kd">private</span> <span class="kd">final</span> <span class="n">ISecondary</span><span class="o">.</span><span class="na">Stub</span> <span class="n">mSecondaryBinder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ISecondary</span><span class="o">.</span><span class="na">Stub</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPid</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">Process</span><span class="o">.</span><span class="na">myPid</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">basicTypes</span><span class="o">(</span><span class="kt">int</span> <span class="n">anInt</span><span class="o">,</span> <span class="kt">long</span> <span class="n">aLong</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">aBoolean</span><span class="o">,</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">aFloat</span><span class="o">,</span> <span class="kt">double</span> <span class="n">aDouble</span><span class="o">,</span> <span class="n">String</span> <span class="n">aString</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这就是我们要做的第二部操作，实现这些方法 ,这里第二个方法apidemo没有实现。</p>

<p>继续看这个接口类。在stub中实现了一个很重要的方法asInterface(android.os.IBinder obj)。该方法中会去查询是否有一个ISecondary的实例，这其实是去查询是不是在同一个应用里去调用它，那我们就不用实行远程调用，直接本地调用就可以了。如果不是本地接口，这时候会返回一个Proxy对象。Proxy类是Stub的一个内部类，也同样实现了ISecondary接口。但是它却已经实现了这些接口方法。这就意味着如果要进行远程调用，必须获取一个Proxy类的实例，自然是通过stub类的asInterface方法获得。看下ApiDemo里如何获取该实例。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="n">ServiceConnection</span> <span class="n">mSecondaryConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServiceConnection</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServiceConnected</span><span class="o">(</span><span class="n">ComponentName</span> <span class="n">className</span><span class="o">,</span>
</span><span class="line">                    <span class="n">IBinder</span> <span class="n">service</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="c1">// Connecting to a secondary interface is the same as any</span>
</span><span class="line">                <span class="c1">// other interface.</span>
</span><span class="line">                <span class="n">mSecondaryService</span> <span class="o">=</span> <span class="n">ISecondary</span><span class="o">.</span><span class="na">Stub</span><span class="o">.</span><span class="na">asInterface</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
</span><span class="line">                <span class="n">mKillButton</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServiceDisconnected</span><span class="o">(</span><span class="n">ComponentName</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">mSecondaryService</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">                <span class="n">mKillButton</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到是在onServiceConnected里获得了这个远程实例，具体如何得到？ServiceConnection对象其实是在更早之前用来绑定service而调用的bindService方法的参数。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">bindService</span><span class="o">(</span><span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">ISecondary</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()),</span>
</span><span class="line">                        <span class="n">mSecondaryConnection</span><span class="o">,</span> <span class="n">Context</span><span class="o">.</span><span class="na">BIND_AUTO_CREATE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ActivityManagerService在bindService时，会调用ActivityThread的方法，并会传递一个Binder引用，而ActivityThread会回调ServiceConnection中的OnServiceConnected方法，并将这个Binder对象传入，也就是anInterface方法中的这个service。这样整个流程走完就获得了远程实例，我们一般会把它保存到一个全局变量中，供以后调用远程方法。</p>

<p>这时候我们就可以执行第三步了，进行方法调用。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">int</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">mSecondaryService</span><span class="o">.</span><span class="na">getPid</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其实这时候我们已经完成了远程调用，获取了pid的值。</p>

<p>不过我们不妨继续看下去。我们看另一个方法basicTypes，apidemo没有使用，但是另一个方法传入了参数，更具代表意义，我们去实现basicTypes方法，并通过Proxy进进行远程调用它（代码就不贴了）。此时这个调用会被proxy对象转换成可以用pacel包装的基础数据类型，参数也被序列化写入一个数据包。一个用户定义的int型code将会被指派给transaction，这个code用来标识方法名，因为Binder此时只允许传递int类型。这就需要客户端和远程服务端做好约定。</p>

<p>方法实现如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">basicTypes</span><span class="o">(</span><span class="kt">int</span> <span class="n">anInt</span><span class="o">,</span> <span class="kt">long</span> <span class="n">aLong</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">aBoolean</span><span class="o">,</span> <span class="kt">float</span> <span class="n">aFloat</span><span class="o">,</span> <span class="kt">double</span> <span class="n">aDouble</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">aString</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">RemoteException</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span> <span class="n">_data</span> <span class="o">=</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span><span class="o">.</span><span class="na">obtain</span><span class="o">();</span>
</span><span class="line"><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span> <span class="n">_reply</span> <span class="o">=</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span><span class="o">.</span><span class="na">obtain</span><span class="o">();</span>
</span><span class="line"><span class="k">try</span> <span class="o">{</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeInterfaceToken</span><span class="o">(</span><span class="n">DESCRIPTOR</span><span class="o">);</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="n">anInt</span><span class="o">);</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeLong</span><span class="o">(</span><span class="n">aLong</span><span class="o">);</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(((</span><span class="n">aBoolean</span><span class="o">)?(</span><span class="mi">1</span><span class="o">):(</span><span class="mi">0</span><span class="o">)));</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeFloat</span><span class="o">(</span><span class="n">aFloat</span><span class="o">);</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeDouble</span><span class="o">(</span><span class="n">aDouble</span><span class="o">);</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">aString</span><span class="o">);</span>
</span><span class="line"><span class="n">mRemote</span><span class="o">.</span><span class="na">transact</span><span class="o">(</span><span class="n">Stub</span><span class="o">.</span><span class="na">TRANSACTION_basicTypes</span><span class="o">,</span> <span class="n">_data</span><span class="o">,</span> <span class="n">_reply</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="line"><span class="n">_reply</span><span class="o">.</span><span class="na">readException</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">finally</span> <span class="o">{</span>
</span><span class="line"><span class="n">_reply</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class="line"><span class="n">_data</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>方法首先通过obtain方法获取两个Parcel对象。调用writeInterfaceToken方法用来标识，以便服务端能够识别。然后写入参数，注意这个写入顺序和取出顺序必须是一致的。然后对传给Proxy的binder对象调用了transact方法，该方法中就将code作为参数传入。pacel对象通过jni接口传递到Binder的C++空间，最终传递到Binder驱动。binder驱动会让客户端进程休眠，并且将传过来的pacel数据从客户端进程映射到服务端进程。然后反向的传递，从binder驱动传递到C++中间层，再通过JNI传递到java层。此时Stub的ontransact方法会被调用。方法如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">onTransact</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span> <span class="n">data</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcel</span> <span class="n">reply</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">RemoteException</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="k">switch</span> <span class="o">(</span><span class="n">code</span><span class="o">)</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="k">case</span> <span class="nl">INTERFACE_TRANSACTION:</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="n">reply</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">DESCRIPTOR</span><span class="o">);</span>
</span><span class="line"><span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">case</span> <span class="nl">TRANSACTION_getPid:</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="n">data</span><span class="o">.</span><span class="na">enforceInterface</span><span class="o">(</span><span class="n">DESCRIPTOR</span><span class="o">);</span>
</span><span class="line"><span class="kt">int</span> <span class="n">_result</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getPid</span><span class="o">();</span>
</span><span class="line"><span class="n">reply</span><span class="o">.</span><span class="na">writeNoException</span><span class="o">();</span>
</span><span class="line"><span class="n">reply</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="n">_result</span><span class="o">);</span>
</span><span class="line"><span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">case</span> <span class="nl">TRANSACTION_basicTypes:</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line"><span class="n">data</span><span class="o">.</span><span class="na">enforceInterface</span><span class="o">(</span><span class="n">DESCRIPTOR</span><span class="o">);</span>
</span><span class="line"><span class="kt">int</span> <span class="n">_arg0</span><span class="o">;</span>
</span><span class="line"><span class="n">_arg0</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
</span><span class="line"><span class="kt">long</span> <span class="n">_arg1</span><span class="o">;</span>
</span><span class="line"><span class="n">_arg1</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">readLong</span><span class="o">();</span>
</span><span class="line"><span class="kt">boolean</span> <span class="n">_arg2</span><span class="o">;</span>
</span><span class="line"><span class="n">_arg2</span> <span class="o">=</span> <span class="o">(</span><span class="mi">0</span><span class="o">!=</span><span class="n">data</span><span class="o">.</span><span class="na">readInt</span><span class="o">());</span>
</span><span class="line"><span class="kt">float</span> <span class="n">_arg3</span><span class="o">;</span>
</span><span class="line"><span class="n">_arg3</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">readFloat</span><span class="o">();</span>
</span><span class="line"><span class="kt">double</span> <span class="n">_arg4</span><span class="o">;</span>
</span><span class="line"><span class="n">_arg4</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">readDouble</span><span class="o">();</span>
</span><span class="line"><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">_arg5</span><span class="o">;</span>
</span><span class="line"><span class="n">_arg5</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">readString</span><span class="o">();</span>
</span><span class="line"><span class="k">this</span><span class="o">.</span><span class="na">basicTypes</span><span class="o">(</span><span class="n">_arg0</span><span class="o">,</span> <span class="n">_arg1</span><span class="o">,</span> <span class="n">_arg2</span><span class="o">,</span> <span class="n">_arg3</span><span class="o">,</span> <span class="n">_arg4</span><span class="o">,</span> <span class="n">_arg5</span><span class="o">);</span>
</span><span class="line"><span class="n">reply</span><span class="o">.</span><span class="na">writeNoException</span><span class="o">();</span>
</span><span class="line"><span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTransact</span><span class="o">(</span><span class="n">code</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="n">reply</span><span class="o">,</span> <span class="n">flags</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>首先通过对code的判断，执行对应方法的内容，对数据按顺序一一解包，读出参数。最终调用方法，并将返回值写入parcel，传递给binder驱动。binder驱动重新唤醒客户端进程并把返回值传递给proxy对象，并最后被解包并作为proxy方法的返回值。</p>

<p>从这一个流程下来，我们可以知道aidl主要就帮助我们完成了包装数据和解包的过程，并调用了transact过程。而用来传递的数据包我们就称为parcel。关于parcel，我们直接看下官方文档的描述;</p>

<pre><code>Container for a message (data and object references) that can be sent through an IBinder. A Parcel can contain both flattened data that will be unflattened on the other side of the IPC (using the various methods here for writing specific types, or the general Parcelable interface), and references to live IBinder objects that will result in the other side receiving a proxy IBinder connected with the original IBinder in the Parcel.
</code></pre>

<p>如果要传递的参数不是基础类型，那就需要对其进行包装，成为parcelable的实例。如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyParcelable</span> <span class="kd">implements</span> <span class="n">Parcelable</span> <span class="o">{</span>
</span><span class="line">     <span class="kd">private</span> <span class="kt">int</span> <span class="n">mData</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">describeContents</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">         <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">     <span class="o">}</span>
</span><span class="line">
</span><span class="line">     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeToParcel</span><span class="o">(</span><span class="n">Parcel</span> <span class="n">out</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">         <span class="n">out</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="n">mData</span><span class="o">);</span>
</span><span class="line">     <span class="o">}</span>
</span><span class="line">
</span><span class="line">     <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Parcelable</span><span class="o">.</span><span class="na">Creator</span><span class="o">&lt;</span><span class="n">MyParcelable</span><span class="o">&gt;</span> <span class="n">CREATOR</span>
</span><span class="line">             <span class="o">=</span> <span class="k">new</span> <span class="n">Parcelable</span><span class="o">.</span><span class="na">Creator</span><span class="o">&lt;</span><span class="n">MyParcelable</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">         <span class="kd">public</span> <span class="n">MyParcelable</span> <span class="nf">createFromParcel</span><span class="o">(</span><span class="n">Parcel</span> <span class="n">in</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">             <span class="k">return</span> <span class="k">new</span> <span class="nf">MyParcelable</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class="line">         <span class="o">}</span>
</span><span class="line">
</span><span class="line">         <span class="kd">public</span> <span class="n">MyParcelable</span><span class="o">[]</span> <span class="nf">newArray</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">             <span class="k">return</span> <span class="k">new</span> <span class="n">MyParcelable</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
</span><span class="line">         <span class="o">}</span>
</span><span class="line">     <span class="o">};</span>
</span><span class="line">
</span><span class="line">     <span class="kd">private</span> <span class="nf">MyParcelable</span><span class="o">(</span><span class="n">Parcel</span> <span class="n">in</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">         <span class="n">mData</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
</span><span class="line">     <span class="o">}</span>
</span><span class="line"> <span class="o">}</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后看下这张图：</p>

<p><img src="http://foocoder.com/images/aidl2.png" /></p>

<p>是不是很明了了？我想大家看完以后手动写一个远程调用而不使用aidl也是可以完成了。不得不说，android设计的非常好，也用aidl让需要用到ipc的时候对开发者非常友好。android中ipc通信的使用和过程大致如此。欢迎转载，请注明出处，http://foocoder.com  谢谢了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android窗口管理框架解析]]></title>
    <link href="http://notice501.github.com/blog/androidchuang-kou-guan-li-kuang-jia-jie-xi.html/"/>
    <updated>2012-10-25T16:17:00+08:00</updated>
    <id>http://notice501.github.com/blog/androidchuang-kou-guan-li-kuang-jia-jie-xi</id>
    <content type="html"><![CDATA[<p>窗口管理是android的一个核心内容。它管理着窗口的创建和销毁，布局和大小，焦点的控制等等。</p>

<p>窗口可以分为两类：</p>

<ul>
  <li>
    <p>一种是应用窗口，即由具体应用创建的窗口，其实其中还可以细分出父窗口和子窗口。窗口一般都会对应一个activity。</p>
  </li>
  <li>
    <p>一种是系统窗口，如状态栏，这类窗口由系统直接通过windowManager来创建，和activity无关。</p>
  </li>
</ul>

<!--more-->
<p>在这里，窗口的概念其实可以说由三部分构成，一部分是用来描述窗口信息的，由WindowState对象表示。一个WindowState对象对应一个窗口，它拥有绘制窗口所需要的信息。但是真正去绘制窗口需要另一部分内容Surface来完成，最终会通过surfaceflinger完成绘图。还有一部分就是对消息的处理，windowmanagerService把窗口信息传递给InputManager，这样InputDispatcher就能根据当前窗口的状态进行消息处理。
我们先看下整体的架构图，然后再来看这两种窗口的创建。WindowManager和其他很多android的服务一样，采用C/S的架构。其中windowManagerService跑在System_server进程，作为服务端，客户端通过ipc调用和它进行交互。
<img src="http://foocoder.com/images/androidWIndow.png" title="'窗口管理框架图'" /></p>

<p>我们通过完整的应用程序窗口创建流程来了解这个结构和整个过程。我们不去纠结其中代码的一些细枝末节的东西，不去贴一堆代码，通过整体和重要的东西来看。</p>

<h5 id="section">一.客户端部分</h5>

<p>在客户端，在应用启动的时候，ActivityThread会调用performLaunchActivity方法，去实例化一个activity，同时调用attach方法，并传递很多和activity相关的参数信息。</p>

<p>其中有个比较重要的东西是一个IBinder对象token，这个token成为activity的标识，windowmanagerService可以通过这个token获得activity当前的运行状态。在WindowManager中会通过该token生成一个WindowToken对象，一个父窗口对应一个WindowToken，而具有相同token的所有其子窗口都会被归到一个WindowToken中。即如果token相同，表示他们都会在一个窗口中。还有个用来标识窗口的类AppWindowToken，继承自WindowToken，它由activity传过来的token生成，和Activity一一对应。通过token，就能找到activity和window的对应关系了。</p>

<p>继续往下看，attach方法会通过代码mWindow = PolicyManager.makeNewWindow(this)实例化一个phoneWindow对象，但是这个对象还是比较抽象的东西。在activity开始oncreate调用时，会调用setContentView方法。会去获得之前那个phoneWIndow对象对应的DecorView，最后通过层层窗口修饰（状态栏等）后调用activity的makeVisible方法，在方法中通过addiew方法完成窗口的添加。</p>

<p>windowManager只是提供接口，用了桥接模式，真正实现是WindowManagerImpl类。而调用addiew方法的对象来自另一个类LocalWindowManager，它会做一些简单检查，再通过WindowManagerImp类的addview完成窗口添加。addview大概分三步执行：</p>

<ol>
  <li>校验该窗口是否已经添加过了。</li>
  <li>判断窗口类型如果是子窗口，则找到它附属的父窗口</li>
  <li>new一个ViewRootImpl对象，最后调用该对象的setView方法。</li>
</ol>

<p>setView 方法会最终会通过ipc调用IwindowSession的add方法。Session类实现了该方法，并最终给WindowManagerService处理。客户端的工作至此就完成了。
这里说明一下ViewRootImpl类，这其实是个handler。自然的，它一部分功能就是对消息进行处理，将用户的一些操作分发到view中。它也是view和WindowManagerService的桥梁。可以看到它通过一个会话将信息传递到了WindowManagerService。而WIndowManagerService也会通过IWindow接口将指令通过消息的方式发送到ViewRootImpl，ViewRootImpl处理这些消息。</p>

<h5 id="section-1">二.服务端</h5>

<p>WindowManagerService的addWindow方法主要做三部分的处理。</p>

<ol>
  <li>做一些合法性校验</li>
  <li>完成窗口数据的构建</li>
  <li>完成窗口创建后需要作出的一些调整</li>
</ol>

<p>我们只看第二部分。首先会new一个WindowState类，该类表示一个窗口。结合WindowToken和AppWindowToken，完整的定义了一个窗口内容。接着创建一个管道，用于处理消息输入。再然后调用attach方法，创建和Surface相关的内容，用于和surfaceFlinger交互。这样，整个窗口就搭建完成了。有了WindowState类对窗口属性的保存以及token对窗口归属的标识，之后就可以通过SurfaceFlinger绘制在屏幕上了。之后通过InputManager，也能处理消息和WindowManagerService之间的传递。保证窗口显示内容和用户操作保持一致性。
当然，WindowManagerService靠近10000行的代码完成了很多功能，因为这篇文章只会了解窗口管理的整个架构，这里不一一详解，以后有时间可能会把一些比较有意思的内容再看下：</p>

<ol>
  <li>窗口的创建和删除</li>
  <li>窗口的显示和隐藏控制</li>
  <li>Z-order顺序管理</li>
  <li>焦点窗口管理</li>
  <li>输入法窗口管理和墙纸窗口管理</li>
  <li>切换动画</li>
  <li>系统消息收集和分发</li>
</ol>

<p>现在，再来看开始的架构图，应该就比较清晰了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈数据库索引和Sqlite中索引的使用]]></title>
    <link href="http://notice501.github.com/blog/tan-shu-ju-ku-suo-yin-he-sqlitezhong-suo-yin-de-shi-yong.html/"/>
    <updated>2012-09-28T19:36:00+08:00</updated>
    <id>http://notice501.github.com/blog/tan-shu-ju-ku-suo-yin-he-sqlitezhong-suo-yin-de-shi-yong</id>
    <content type="html"><![CDATA[<p>要使用索引对数据库的数据操作进行优化，那必须明确几个问题</p>

<ol>
  <li>什么是索引</li>
  <li>索引的原理</li>
  <li>索引的优缺点</li>
  <li>什么时候需要使用索引，如何使用
围绕这几个问题，来探究索引在数据库操作中所起到的作用。
<!--more-->
###1. 数据库索引简介	</li>
</ol>

<p>回忆一下小时候查字典的步骤，索引和字典目录的概念是一致的。字典目录可以让我们不用翻整本字典就找到我们需要的内容页数，然后翻到那一页就可以。
索引也是一样，索引是对记录按照多个字段进行排序的一种展现。</p>

<p>对表中的某个字段建立索引会创建另一种数据结构，其中保存着字段的值，每个值还包括指向与它相关记录的指针。这样，就不必要查询整个数据库，自然提升了查询效率。同时，索引的数据结构是经过排序的，因而可以对其执行二分查找，那就更快了。</p>

<h3 id="b-">2. B-树与索引</h3>
<p>大多数的数据库都是以B-树或者B+树作为存储结构的，B树索引也是最常见的索引。先简单介绍下B-树，可以增强对索引的理解。</p>

<p>B-树是为磁盘设计的一种多叉平衡树，B树的真正最准确的定义为：一棵含有t（t&gt;=2）个关键字的平衡多路查找树。一棵M阶的B树满足以下条件：</p>

<ul>
  <li>每个结点至多有M个孩子；</li>
  <li>除根结点和叶结点外，其它每个结点至少有M/2个孩子；</li>
  <li>根结点至少有两个孩子（除非该树仅包含一个结点）；</li>
  <li>所有叶结点在同一层，叶结点不包含任何关键字信息，可以看作一种外部节点；</li>
  <li>有K个关键字的非叶结点恰好包含K+1个孩子；</li>
</ul>

<p>B树中的每个结点根据实际情况可以包含大量的关键字信息和分支(当然是不能超过磁盘块的大小，根据磁盘驱动(disk drives)的不同，一般块的大小在1k~4k左右)；这样树的深度降低了，这就意味着查找一个元素只要很少结点从外存磁盘中读入内存，很快访问到要查找的数据。B-树上操作的时间通常由存取磁盘的时间和CPU计算时间这两部分构成。而相对于磁盘的io速度，cpu的计算时间可以忽略不计，所以B树的意义就显现出来了，树的深度降低，而深度决定了io的读写次数。</p>

<p>B树索引是一个典型的树结构，其包含的组件主要是：</p>

<ul>
  <li>叶子节点（Leaf node）：包含条目直接指向表里的数据行。</li>
  <li>分支节点（Branch node）：包含的条目指向索引里其他的分支节点或者是叶子节点。</li>
  <li>根节点（Root node）：一个B树索引只有一个根节点，它实际就是位于树的最顶端的分支节点。</li>
</ul>

<p>如下图所示</p>

<p><img src="http://foocoder.com/images/index1.jpg" /></p>

<p>每个索引都包含两部分内容，一部分是索引本身的值，第二部分即指向数据页或者另一个索引也的指针。每个节点即为一个索引页，包含了多个索引。
当你为一个空表建立一个索引，数据库会分配一个空的索引页，这个索引页即代表根节点，在你插入数据之前，这个索引页都是空的。每当你插入数据，数据库就会在根节点创建索引条目，。当根节点插满的时候，再插入数据时，根节点就会分裂。举个例子，根节点插入了如图所示的数据。（超过4个就分裂），这时候插入H，就会分裂成2个节点，移动G到新的根节点，把H和N放在新的右孩子节点中。</p>

<p>如图所示：</p>

<p><img src="http://foocoder.com/images/index2.png" title="'根节点插满4个节点'" />  </p>

<p><img src="http://foocoder.com/images/index3.png" title="'插入H，进行分裂'" /></p>

<p>大致的分裂步骤如下：
1）	创建两个儿子节点
2）	将原节点中的数据近似分为两半，写入两个新的孩子节点中。
3）	在跟节点中放置指向页节点的指针</p>

<p>当你不断向表中插入数据，根节点中指向叶节点的指针也被插满，当叶子还需要分裂的时候，根节点没有空间再创建指向新的叶节点的指针。那么数据库就会创建分支节点。随着叶子节点的分裂，根节点中的指针都指向了这些分支节点。随着数据的不断插入，索引会增加更多的分支节点，使树结构变成这样的一个多级结构。</p>

<h3 id="section">3. 索引的种类</h3>
<ul>
  <li>聚集索引：表中行的物理顺序与键值的逻辑（索引）顺序相同。因为数据的物理顺序只能有一种，所以一张表只能有一个聚集索引。如果一张表没有聚集索引，那么这张表就没有顺序的概念，所有的新行都会插入到表的末尾。对于聚集索引，叶节点即存储了数据行，不再有单独的数据页。就比如说我小时候查字典从来不看目录，我觉得字典本身就是一个目录，比如查裴字，只需要翻到p字母开头的，再按顺序找到e。通过这个方法我每次都能最快的查到老师说的那个字，得到老师的表扬。</li>
  <li>非聚集索引：表中行的物理顺序与索引顺序无关。对于非聚集索引，叶节点存储了索引字段值以及指向相应数据页的指针。叶节点紧邻在数据之上，对数据页的每一行都有相应的索引行与之对应。有时候查字典，我并不知道这个字读什么，那我就不得不通过字典目录的“部首”来查找了。这时候我会发现，目录中的排序和实际正文的排序是不一样的，这对我来说很苦恼，因为我不能比别人快了，我需要先再目录中找到这个字，再根据页数去找到正文中的字。 </li>
</ul>

<h3 id="section-1">4．索引与数据的查询，插入与删除</h3>

<ul>
  <li>查询。查询操作就和查字典是一样的。当我们去查找指定记录时，数据库会先查找根节点，将待查数据与根节点的数据进行比较，再通过根节点的指针查询下一个记录，直到找到这个记录。这是一个简单的平衡树的二分搜索的过程，我就不赘述了。在聚集索引中，找到页节点即找到了数据行，而在非聚集索引中，我们还需要再去读取数据页。</li>
  <li>插入。聚集索引的插入操作比较复杂，最简单的情况，插入操作会找到对于的数据页，然后为新数据腾出空间，执行插入操作。如果该数据页已经没有空间，那就需要拆分数据页，这是一个非常耗费资源的操作。对于仅有非聚集索引的表，插入只需在表的末尾插入即可。如果也包含了聚集索引，那么也会执行聚集索引需要的插入操作。</li>
  <li>删除。删除行后下方的数据会向上移动以填补空缺。如果删除的数据是该数据页的最后一行，那么这个数据页会被回收，它的前后一页的指针会被改变，被回收的数据页也会在特定的情况被重新使用。与此同时，对于聚集索引，如果索引页只剩一条记录，那么该记录可能会移动到邻近的索引表中，原来的索引页也会被回收。而非聚集索引没办法做到这一点，这就会导致出现多个数据页都只有少量数据的情况。</li>
</ul>

<h3 id="section-2">5. 索引的优缺点</h3>
<p>其实通过前面的介绍，索引的优缺点已经一目了然。</p>

<p>先说优点：</p>

<ul>
  <li>大大加快数据的检索速度，这也是创建索引的最主要的原因</li>
  <li>加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</li>
  <li>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</li>
</ul>

<p>再说缺点：</p>

<ul>
  <li>创建索引需要耗费一定的时间，但是问题不大，一般索引只要build一次</li>
  <li>索引需要占用物理空间，特别是聚集索引，需要较大的空间</li>
  <li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，降低了数据的维护速度，这个是比较大的问题。</li>
</ul>

<h3 id="section-3">6.索引的使用</h3>

<p>根据上文的分析，我们大致对什么时候使用索引有了自己的想法（如果你没有，回头再看一遍……）。</p>

<p>一般我们需要在这些列上建立索引：</p>

<ul>
  <li>在经常需要搜索的列上，这是毋庸置疑的； </li>
  <li>经常同时对多列进行查询，且每列都含有重复值可以建立组合索引，组合索引尽量要使常用查询形成索引覆盖（查询中包含的所需字段皆包含于一个索引中，我们只需要搜索索引页即可完成查询）。 同时，该组合索引的前导列一定要是使用最频繁的列。对于前导列的问题，在后面sqlite的索引使用介绍中还会做讨论。</li>
  <li>在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度，连接条件要充分考虑带有索引的表。</li>
  <li>在经常需要对范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的，同样，在经常需要排序的列上最好也创建索引。</li>
  <li>在经常放到where子句中的列上面创建索引，加快条件的判断速度。要注意的是where字句中对列的任何操作（如计算表达式，函数）都需要对表进行整表搜索，而没有使用该列的索引。所以查询时尽量把操作移到等号右边。</li>
</ul>

<p>对于以下的列我们不应该创建索引：</p>

<ul>
  <li>很少在查询中使用的列</li>
  <li>含有很少非重复数据值的列，比如只有0，1，这时候扫描整表通常会更有效</li>
  <li>对于定义为TEXT，IMAGE的数据不应该创建索引。这些字段长度不固定，或许很长，或许为空。
当然，对于更新操作远大于查询操作时，不建立索引。也可以考虑在大规模的更新操作前drop索引，之后重新创建，不过这就需要把创建索引对资源的消耗考虑在内。总之，使用索引需要平衡投入与产出，找到一个产出最好的点。</li>
</ul>

<h3 id="sqlite">7. 在sqlite中使用索引</h3>
<ol>
  <li>
    <p>Sqlite不支持聚集索引，android默认需要一个”_id”字段，这保证了你插入的数据会按“_id”的整数顺序插入，这个integer类型的主键就会扮演和聚集索引一样的角色。所以不要再在对于声明为：INTEGER PRIMARY KEY的主键上创建索引。</p>
  </li>
  <li>
    <p>很多对索引不熟悉的朋友在表中创建了索引，却发现没有生效，其实这大多数和我接下来讲的有关。对于where子句中出现的列要想索引生效，会有一些限制，这就和前导列有关。所谓前导列，就是在创建复合索引语句的第一列或者连续的多列。比如通过：CREATE INDEX comp_ind ON table1(x, y, z)创建索引，那么x,xy,xyz都是前导列，而yz，y，z这样的就不是。下面讲的这些，对于其他数据库或许会有一些小的差别，这里以sqlite为标准。在where子句中，前导列必须使用等于或者in操作，最右边的列可以使用不等式，这样索引才可以完全生效。同时，where子句中的列不需要全建立了索引，但是必须保证建立索引的列之间没有间隙。举几个例子来看吧.
用如下语句创建索引</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">CREATE INDEX idx_ex1 ON ex1(a,b,c,d,e,...,y,z);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里是一个查询语句</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">...WHERE a=5 AND b IN (1,2,3) AND c IS NULL AND d='hello'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这显然对于abcd四列都是有效的，因为只有等于和in操作，并且是前导列。</p>

<p>再看一个查询语句</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">... WHERE a=5 AND b IN (1,2,3) AND c&gt;12 AND d='hello'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>那这里只有a，b和c的索引会是有效的，d列的索引会失效，因为它在c列的右边，而c列使用了不等式，根据使用不等式的限制，c列已经属于最右边。</p>

<p>最后再看一条：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">... WHERE b IN (1,2,3) AND c NOT NULL AND d='hello'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>索引将不会被使用，因为没有使用前导列，这个查询会是一个全表查询。</p>

<p>其实除了索引，对查询性能的影响因素还有很多，比如表的连接，是否排序等。影响数据库操作的整体性能就需要考虑更多因素，使用更对的技巧，不得不说这是一个很大的学问。</p>

<p>最后在android上使用sqlite写一个简单的例子，看下索引对数据库操作的影响。</p>

<p>创建如下表和索引：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">db.execSQL("create table if not exists t1(a,b)"); 
</span><span class="line">db.execSQL("create index if not exists ia on t1(a,b)");</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>插入10万条数据，分别对表进行如下操作：</p>

<p>查询：select * from t1 where a=’90012’</p>

<p>插入：insert into t1(a,b) values(‘10008’,’name1.6982235534984673’)</p>

<p>更新：update t1 set b=’name1.999999’ where a = ‘887’</p>

<p>删除：delete from t1 where a = ‘1010’</p>

<p>数据如下（5次不同的操作取平均值）：</p>

<p>操作	无索引	有索引</p>

<p>查询	170ms	5ms</p>

<p>插入	65ms	75ms</p>

<p>更新	240ms	52ms</p>

<p>删除	234ms	78ms</p>

<p>可以看到显著提升了查询的速度，稍稍减慢了插入速度，还稍稍提升了更新数据和删除数据的速度。如果把更新和删除中的where子句中的列换成b，速度就和没有索引一样了，因为索引失效。所以索引能大幅度提升查询速度，对于删除和更新操作，如果where子句中的列使用了索引，即使需要重新build索引，有可能速度还是比不使用索引要快的。对与插入操作，索引显然是个负担。同时，索引让db的大小增加了2倍多。</p>

<p>还有个要吐槽的是，android中的rawQurey方法，执行完sql语句后返回一个cursor，其实并没有完成一个查询操作，我在rawquery之前和之后计算查询时间，永远是1ms…这让我无比苦闷。看了下源码，在对cursor调用moveToNext这些移动游标方法时，都会最终先调用getCount方法，而getCount方法才会调用native方法调用真正的查询操作。这种设计显然更加合理。</p>

]]></content>
  </entry>
  
</feed>
