<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Rush]]></title>
  <link href="http://notice501.github.com/atom.xml" rel="self"/>
  <link href="http://notice501.github.com/"/>
  <updated>2014-04-25T22:01:06+08:00</updated>
  <id>http://notice501.github.com/</id>
  <author>
    <name><![CDATA[foocoder]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[每日vim插件--Gist.vim]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-gist-dot-vim.html/"/>
    <updated>2014-04-25T19:58:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-gist-dot-vim</id>
    <content type="html"><![CDATA[<p><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efs6kvu5zpj20m80go3z0.jpg" alt="" />
今天介绍的插件<a href="https://github.com/mattn/gist-vim">Gist.vim</a>能够在vim中方便的创建和查看gist。</p>

<p>gist我就不过多介绍了，github提供的一个代码片段托管服务。不太了解的同学可以看看<a href="http://www.worldhello.net/gotgithub/06-side-projects/gist.html">这个教程</a></p>

<p>要使用这个插件需要安装ygie依赖插件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line">Bundle <span class="s1">&#39;mattn/webapi-vim&#39;</span>
</span><span class="line">Bundle <span class="s1">&#39;mattn/gist-vim&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>确保在git的global配置中设置的是github用户名：</p>

<pre><code>$ git config --global github.user &lt;username&gt;
</code></pre>

<p>该插件在首次使用时会需要你输入github密码来获取token，并将其保存在<code>~/.gist-vim</code>.</p>

<!--more-->

<p>使用非常的简单，输入命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="p">:</span>Gist
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就会将该整个文件创建一个Gist，创建成功后会显示Gist地址，如图：
<img src="http://ww3.sinaimg.cn/large/69d56e38gw1efs60clnedj20my040gm2.jpg" alt="" /></p>

<p>也可以选中一段代码创建Gist：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"> :<span class="s1">&#39;&lt;,&#39;</span><span class="p">&gt;</span>Gist
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>还提供了一些参数</p>

<p>例如<code>-a</code>,表示匿名创建，<code>-p</code>创建pravite 的gist，<code>-P</code>创建public的gist。<code>-m</code>为所有打开的buffer创建Gist。</p>

<p>除此之外，还可以编辑Gist(已打开了一个gist buffer的情况下)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="p">:</span>Gist <span class="p">-</span><span class="k">e</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>加上描述</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="p">:</span>Gist <span class="p">-</span><span class="k">s</span> something
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>删除：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="p">:</span>Gist <span class="p">-</span><span class="k">d</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>fork:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="p">:</span>Gist <span class="p">-</span><span class="k">f</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>star:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="p">:</span>Gist <span class="p">+</span><span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>unstar:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="p">:</span>Gist <span class="m">-1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>还可以直接取得Gist：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="p">:</span>Gist XXXXX
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一般你不记得gist号码，没关系，还可以列出所有的Gist,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="p">:</span>Gist <span class="p">-</span><span class="k">l</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样会打开一个新的分隔窗口显示你已有的gist列表，按回车就可以直接去取这个gist并在vim中查看了。</p>

<p>还提供了一些非常有用的配置，比如：</p>

<p>如果你想要在创建了gist后立刻打开浏览器查看：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">let</span> <span class="k">g</span>:gist_open_browser_after_post <span class="p">=</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果想要默认创建的gist不是public而是private：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">let</span> <span class="k">g</span>:gist_post_private <span class="p">=</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有了这个插件，玩转gist是不是非常easy啦。这个插件唯一的不足在于在创建gist或者请求gist时会阻塞界面，这个有点糟糕。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--代码搜索ack.vim/ag/ctlsf.vim]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-dai-ma-sou-suo-ctlsf-dot-vim.html/"/>
    <updated>2014-04-24T19:11:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-dai-ma-sou-suo-ctlsf-dot-vim</id>
    <content type="html"><![CDATA[<h1 id="ackvim">ack.vim</h1>

<p><a href="https://github.com/petdance/ack">ack.vim</a>。应该是大多数vimer的必装插件。</p>

<p>在写这篇文章的时候才发现ack已经发布了2.0版本，并且ack 1已经不再维护。但是两者差别不大。这里介绍的基于2.0版本。</p>

<p>ack就是一个代码搜索工具，类似grep，用perl编写，充分利用了perl对正则的强大处理能力。为什么用ack而不是直接用grep？ack号称超越了grep。我基本认同。</p>

<ol>
  <li>ack会显示搜索到的行号列号。</li>
  <li>会自动忽略.git这样的文件类型。</li>
  <li>速度很快。</li>
  <li>最重要的是相对grep是一个文本搜索工具，ack就是一个代码搜索工具。你只会搜索到你的js文件，php文件，而不会搜到一些意外的文件类型。</li>
</ol>

<!--more-->

<p>再也不用这样输入：</p>

<pre><code>grep foo $(find . -name '*.pm' | grep -v .svn)
</code></pre>

<p>ack的使用很简单，命令输入：</p>

<pre><code>ack [OPTION]... PATTERN [FILES OR DIRECTORIES]
</code></pre>

<p>如果不输入文件或者文件夹，则默认在当前目录及子目录下搜索。</p>

<p>ack大致有如下几类OPTION，</p>

<ol>
  <li>搜索选项，例如-i, –ignore-case ，忽略pattern的大小写</li>
  <li>搜索结果处理选项，例如 -l，只打印有匹配的文件名。</li>
  <li>搜索输出展现选项，例如–heading，在头部输出匹配文件的文件名</li>
  <li>文件搜索，是的，他还是find。例如 <code>Ack -f servicemodel</code> 查找servicemodel相匹配的文件。</li>
  <li>文件过滤。例如 –[no]ignore-dir=name  从待搜索目录中添加或删除目录。</li>
</ol>

<p>具体的option可以查看ack文档.</p>

<p>这些option都可以直接配置到.ackrc中，作为默认配置。全局的ackrc放置于<code>/etc/ackrc</code>,用户的放在<code>$HOME/.ackrc</code>,仅仅用于某项目的就放在项目根目录中。</p>

<p>ack搜索结果如图所示：</p>

<p><img src="http://ww3.sinaimg.cn/large/69d56e38gw1efr1w9s9i8j21kw0ghafr.jpg" alt="" /></p>

<p>会打开Quickfix窗口。显示文件名，对于的行列和该行内容。按<code>t</code>可以在新标签打开，按回车直接打开，按v分隔垂直窗口打开等等。和前天介绍的NERD Tree等大多数插件的操作类似。</p>

<h1 id="agvim">ag.vim</h1>

<p>ack的用法就介绍到这里，这里还要介绍的是<a href="https://github.com/ggreer/the_silver_searcher">ag</a>.和ack没什么区别，只是更快。</p>

<p>OS X下安装：</p>

<pre><code>brew install the_silver_searcher
</code></pre>

<p>在vim中进行配置：</p>

<pre><code>let g:ackprg = 'ag --nogroup --nocolor --column'
</code></pre>

<p>也可以直接安装<a href="https://github.com/rking/ag.vim">ag.vim</a>.ack 的 Silver Searcher fork版本。</p>

<h1 id="ctrlsfvim">ctrlsf.vim</h1>

<p>作者原图：</p>

<p><img src="https://camo.githubusercontent.com/fae368edf534ce2228eda41418cb55ee68e19c20/687474703a2f2f692e696d6775722e636f6d2f6d6c576a336d7a2e676966" alt="" /></p>

<p>在安装了ack或者ag的基础上再安装该插件即可。正如它的名字，它提供了和sublime text 2中Ctrl-Shift-F 一样的搜索效果。和ack或者ag不同的是，不再是显示一行，而是显示整个上下文。非常好用。</p>

<p>除此之外，可以按下<code>p</code>进行预览，运行<code>:CtrlSFOpen</code>重新打开搜索结果窗口(默认选择后关闭搜索窗口)。这个插件也是来自国内的朋友。</p>

<p>今天就介绍到这。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--命令行补全cmdline-completion]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-ming-ling-xing-bu-quan-cmdline-completion.html/"/>
    <updated>2014-04-23T21:57:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-ming-ling-xing-bu-quan-cmdline-completion</id>
    <content type="html"><![CDATA[<p>今天介绍一个非常实用简单的插件，叫做<a href="https://github.com/vim-scripts/cmdline-completion">cmdline-completion</a>.功能就和名字描述的一样，在输入命令的时候，提供补全功能。vim自身对一些命令有补全功能，该插件对其进行了增强。比如：</p>

<ol>
  <li>:something<c-p /></li>
  <li>/else<c-n /></li>
</ol>

<p>也可以自定义快捷键进行补全：</p>

<p><code>vim
 cmap &lt;C-J&gt; &lt;Plug&gt;CmdlineCompletionBackward 
 cmap &lt;C-K&gt; &lt;Plug&gt;CmdlineCompletionForward
</code></p>

<p>今天的介绍非常简短，希望大家喜欢。有问题可以回复给我。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--文件浏览器NERD Tree以及git-nerdtree,vim-nerdtree-tabs]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-wen-jian-liu-lan-qi-nerd-treeyi-ji-git-nerdtree-vim-nerdtree-tabs.html/"/>
    <updated>2014-04-22T19:43:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-wen-jian-liu-lan-qi-nerd-treeyi-ji-git-nerdtree-vim-nerdtree-tabs</id>
    <content type="html"><![CDATA[<p>今天介绍一个必备插件——<a href="https://github.com/scrooloose/nerdtree">NERD Tree</a>。这个插件基本用vim的都会知道吧。看图就知道了：
<img src="http://ww2.sinaimg.cn/large/69d56e38gw1efoqvqpramj21gu12i46s.jpg" alt="" /></p>

<p>用它可以让vim像其他大多数编辑器或者IDE一样，打开一个分割窗口显示文件树，在这个文件树上可以通过<code>j</code>,<code>k</code>上下浏览以及其他一些快捷键进行快速文件导航。按回车就直接打开该文件，当然还可以通过<code>i</code>,<code>s</code>,<code>t</code>在分隔窗口或者在新标签页打开.</p>

<!--more-->

<p>NERD Tree还支持书签。所谓书签，就是标记该文件或文件夹会优先显示在最上方。如前面图中的_posts文件夹。只要光标在该文件上输入命令<code>:Bookmark &lt;name&gt;</code>.非常方便</p>

<p>NERD Tree不想介绍过多，使用非常简单。在NerdTree窗口按下问号就会有帮助信息介绍所有的操作和对应的快捷键，常用下很快就很熟了。</p>

<p>NERD Tree有个问题在于和大多数IDE或者编辑器不同的是，在新的Tab中，NERD Tree默认是不打开的。不同的tab不能共享一个NERD Tree窗口，有人对这种方式可能就比较别扭。这时候就诞生了<a href="https://github.com/jistr/vim-nerdtree-tabs">vim-nerdtree-tabs</a>.该插件就解决了这个问题，它让每个tab都有相同的NERD Tree，看起来就像NERD Tree固定在最左一样。按下<code>:NERDTreeTabsToggle</code>就可以打开或关闭所有窗口。关闭文件窗口的时候，对于tab的NERD Tree窗口也会自动关闭。</p>

<p>接下来介绍的<a href="https://github.com/Xuyuanp/git-nerdtree">git-nerdtree</a>是来自@Xuyuanp的作品,通过微信公众号介绍给我。也是对NERD Tree的增强修改，增加了文件的git状态显示，和昨天的gitgutter类似，Gitgutter显示文件内的git diff，而git-nerdtree为NERD Tree增加了文件git状态的显示：</p>

<p><img src="https://camo.githubusercontent.com/3fe0388df11cb787f36e1fa108398fd3f757eef4/687474703a2f2f692e696d6775722e636f6d2f6a534377476a552e6769663f31" alt="" /></p>

<p>相对应的标识如下：</p>

<ul>
  <li><code>✭</code> / <code>*</code> : Untracked</li>
  <li><code>✹</code> / <code>~</code> : Modified in the working tree</li>
  <li><code>✚</code> / <code>+</code> : Staged in the index (Exclude Renamed status)</li>
  <li><code>➜</code> / <code>»</code> : Renamed</li>
  <li><code>═</code> / <code>=</code> : Unmerged</li>
  <li><code>✖</code> / <code>-</code> : Deleted (This indicator can’t be shown, as NERDTree doesn’t display deleted files. I have no prefect idea to solve this problem currently.)</li>
  <li><code>✗</code> / <code>×</code> : Dirty (Only for directory)</li>
  <li><code>✔</code> / <code>ø</code> : Clean (Only for directory)</li>
</ul>

<p>标识方式和我之前介绍的zsh配置对git库状态的处理类似（可以查看我之前的博客）。</p>

<p>同时还支持和gitgutter一样的快捷键在各个有状态的文件之间跳转<code>[c</code>,<code>]c</code>.我只能说太棒了，再次感谢@Xuyuanp。</p>

<p>今天就介绍到这里，任何问题都可以直接回复。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--显示git diff:GitGutter.vim]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-xian-shi-git-diff-gitgutter-dot-vim.html/"/>
    <updated>2014-04-21T20:44:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-xian-shi-git-diff-gitgutter-dot-vim</id>
    <content type="html"><![CDATA[<p>周末休息了两天。今天继续。今天介绍的是一个可以显示git diff状态的插件——<a href="https://github.com/airblade/vim-gitgutter">vim-gitgutter</a>.</p>

<p>所谓显示diff状态，看一张图大家就明白了
<img src="http://ww1.sinaimg.cn/large/69d56e38gw1efni76kr62j20po0os78b.jpg" alt="" /></p>

<!--more-->

<p>看最左边的标记列，一看就应该明白了。波浪线表示该行相比HEAD修改过，红色的减号表示这里删除了一行，绿色的+号表示这些行都是新增的。</p>

<p>这样git diff直接就一目了然，对自己的修改就更清晰了。</p>

<p>Gitgutter还支持在每个diff区块之间跳转（像图中就分了3块）。默认快捷键为<code>[c</code>和<code>]c</code>。可以非常方便地在各diff之间跳转了。</p>

<p>当然必须可以自定义mapping：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line">nmap ]<span class="k">h</span> <span class="p">&lt;</span>Plug<span class="p">&gt;</span>GitGutterNextHunk
</span><span class="line">nmap [<span class="k">h</span> <span class="p">&lt;</span>Plug<span class="p">&gt;</span>GitGutterPrevHunk
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Gitgutter不仅能显示这些git diff，还能暂存<code>&lt;Leader&gt;hs</code>和回退<code>&lt;Leader&gt;hr</code>修改。</p>

<p>同样支持自定义mapping：
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="vim"><span class="line">nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">ha</span> <span class="p">&lt;</span>Plug<span class="p">&gt;</span>GitGutterStageHunk
</span><span class="line">nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>hu <span class="p">&lt;</span>Plug<span class="p">&gt;</span>GitGutterRevertHunk
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>不过这个我用的不是很多，暂时没感觉需要这样细粒度的执行暂存操作。</p>

<p>但是查看diff的修改我会比较常用，快捷键<code>&lt;Leader&gt;hp</code>,他会显示diff差异。如图所示：</p>

<p><img src="http://ww3.sinaimg.cn/large/69d56e38gw1efnire8hi2j20va0po0yl.jpg" alt="" /></p>

<p>gitgutter还支持自定义git diff的参数，比如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">let</span> <span class="k">g</span>:gitgutter_diff_args <span class="p">=</span> <span class="s1">&#39;-w&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就介绍这么多了。btw，感觉用了gitgutter，Gundo的会变得略微慢一点。但是，Gitgutter显然是必备插件啊。有问题直接回复。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--快速选择文本对象wildfile.vim]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-kuai-su-xuan-ze-wen-ben-dui-xiang-wildfile-dot-vim.html/"/>
    <updated>2014-04-18T20:06:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-kuai-su-xuan-ze-wen-ben-dui-xiang-wildfile-dot-vim</id>
    <content type="html"><![CDATA[<p>之前我们介绍了文本对象，并介绍了两个自定义文本对象的插件。今天介绍的插件也和文本对象有关。他可以用来快速的就近选择一个候选文本对象，并能通过快捷键继续简单的扩大文本对象范围。</p>

<p>这个插件就是–<a href="https://github.com/Shougo/wildfire.vim">wildfire</a>（给的是shougo fork的repo地址，比较喜欢shougo这个插件作者，而且这个fork fix了一个bug）</p>

<p>插件默认定义的候选文本对象为：</p>

<pre><code> `i'`, `i"`, `i)`, `i]`, `i}`, `ip` and `it`
</code></pre>

<p>来一张官方图</p>

<!--more-->

<p><img src="http://ww1.sinaimg.cn/large/69d56e38gw1efk07xfk7kg20jv087myy.gif" alt="" /></p>

<p>有图应该大家能理解这个插件的作用了。</p>

<p>使用方式也非常简单，按<code>enter</code>选择最近一个文本对象，再按下<code>enter</code>在刚刚的选择之上再选择最近的文本对象。按下<code>&lt;BS&gt;</code>就能回退到上一个选择。</p>

<p>当然，你可以自定义快捷键：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="c">&quot; This selects the next closest text object.</span>
</span><span class="line"><span class="k">let</span> <span class="k">g</span>:wildfire_fuel_map <span class="p">=</span> <span class="s2">&quot;&lt;ENTER&gt;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c">&quot; This selects the previous closest text object.</span>
</span><span class="line"><span class="k">let</span> <span class="k">g</span>:wildfire_water_map <span class="p">=</span> <span class="s2">&quot;&lt;BS&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>候选的文本对象也是可以配置的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">let</span> <span class="k">g</span>:wildfire_objects <span class="p">=</span> [<span class="s2">&quot;i&#39;&quot;</span><span class="p">,</span> <span class="s1">&#39;i&quot;&#39;</span><span class="p">,</span> <span class="s2">&quot;i)&quot;</span><span class="p">,</span> <span class="s2">&quot;i]&quot;</span><span class="p">,</span> <span class="s2">&quot;i}&quot;</span><span class="p">,</span> <span class="s2">&quot;ip&quot;</span><span class="p">,</span> <span class="s2">&quot;it&quot;</span>]
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>插件还支持对文件类型分别定义，比如要在html中只处理tag，忽略其他文本对象，只需要配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="c">&quot; use &#39;*&#39; to mean &#39;all other filetypes&#39;</span>
</span><span class="line"><span class="c">&quot; in this example, html and xml share the same text objects</span>
</span><span class="line"><span class="k">let</span> <span class="k">g</span>:wildfire_objects <span class="p">=</span> {
</span><span class="line">    \ <span class="s2">&quot;*&quot;</span> : [<span class="s2">&quot;i&#39;&quot;</span><span class="p">,</span> <span class="s1">&#39;i&quot;&#39;</span><span class="p">,</span> <span class="s2">&quot;i)&quot;</span><span class="p">,</span> <span class="s2">&quot;i]&quot;</span><span class="p">,</span> <span class="s2">&quot;i}&quot;</span><span class="p">,</span> <span class="s2">&quot;ip&quot;</span>]<span class="p">,</span>
</span><span class="line">    \ <span class="s2">&quot;html,xml&quot;</span> : [<span class="s2">&quot;at&quot;</span>]<span class="p">,</span>
</span><span class="line">\ }
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>与之类似的一个用的相当广泛的插件还有<a href="https://github.com/terryma/vim-expand-region">vim-expand-region</a>。大家可以自己选择。有问题欢迎留言或回复交流。也希望大家推荐自己在用，自己写的插件给我。今天看到一个朋友微信回复我的一个他自己写的插件，我已经立刻用上了，卖个关子，下次介绍。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--可以重复motion的space.vim]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-zhong-fu-motion-space-dot-vim.html/"/>
    <updated>2014-04-17T21:10:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-zhong-fu-motion-space-dot-vim</id>
    <content type="html"><![CDATA[<p><img src="http://ww3.sinaimg.cn/large/69d56e38gw1efiwusn0uhj20m80godg5.jpg" style="height: 400px;" /></p>

<p>今天头疼的厉害。不过昨天没更新，今天必须有了。介绍个简单点的。</p>

<p>vim中在普通模式下，空格这么大一按键不用有点浪费，所以有了<a href="https://github.com/spiiph/vim-space">space.vim</a>.</p>

<!--more-->

<p>他能重复执行motion，比如</p>

<pre><code>*Hello World
</code></pre>

<p>按下<code>fo</code>,会将光标移动到第一个o上，再按下空格，就能移动到第二个o了，他会重复执行上一个<code>fo</code>。按下<code>&lt;Shift-Space&gt;</code>反向执行改操作，也就是光标又会回到第一个<code>o</code>.</p>

<p>除此之外，space.vim还能重复搜索命令，diff移动命令，qucikfix等操作。让空格键变的非常有用.下面是space.vim可以重复的全部命令列表：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Character movements:                                    |left-right-motions|
</span><span class="line">    |f| |F| |t| |T| |;| |,|
</span><span class="line">
</span><span class="line">Search commands:                                           |search-commands|
</span><span class="line">    |star| |gstar| |#| |g#| |n| |N|
</span><span class="line">
</span><span class="line">Jump list jumps:                                              |jump-motions|
</span><span class="line">    |CTRL-O| |CTRL-I|
</span><span class="line">
</span><span class="line">Change list jumps:                                       |change-list-jumps|
</span><span class="line">    |g;| |g,|
</span><span class="line">
</span><span class="line">Diff jumps:                                                   |jumpto-diffs|
</span><span class="line">    |]c| |[c|
</span><span class="line">
</span><span class="line">Parenthesis and bracket jumps:                             |various-motions|
</span><span class="line">    |])| |[(| |]}| |[{|
</span><span class="line">
</span><span class="line">Method jumps:                                              |various-motions|
</span><span class="line">    |]m| |[m| |]M| |[M|
</span><span class="line">
</span><span class="line">Section jumps:                                              |object-motions|
</span><span class="line">    |]]| |[]| |][| |[[|
</span><span class="line">
</span><span class="line">Fold movements:
</span><span class="line">    |zj| |zk| |]z| |[z|
</span><span class="line">
</span><span class="line">Tag movements:                                                |tag-commands|
</span><span class="line">    |CTRL-]|
</span><span class="line">    |:tag|
</span><span class="line">    |:tnext|
</span><span class="line">    |:tprevious|
</span><span class="line">    |:tNext|
</span><span class="line">    |:trewind|
</span><span class="line">    |:tfirst|
</span><span class="line">    |:tlast|
</span><span class="line">
</span><span class="line">Undolist movements:                                          |undo-branches|
</span><span class="line">    |g-||g+|
</span><span class="line">
</span><span class="line">Quickfix commands:                                                |quickfix|
</span><span class="line">    |:make|
</span><span class="line">    |:vimgrep|
</span><span class="line">    |:grep|
</span><span class="line">    |:cc|
</span><span class="line">    |:cnext|
</span><span class="line">    |:cprevious|
</span><span class="line">    |:cNext|
</span><span class="line">    |:cfirst|
</span><span class="line">    |:clast|
</span><span class="line">    |:crewind|
</span><span class="line">    |:cfile|
</span><span class="line">    |:cnfile|
</span><span class="line">    |:cpfile|
</span><span class="line">    |:cNfile|
</span><span class="line">
</span><span class="line">Location list commands:                                      |location-list|
</span><span class="line">    |:lmake|
</span><span class="line">    |:lvimgrep|
</span><span class="line">    |:lgrep|
</span><span class="line">    |:ll|
</span><span class="line">    |:lcnext|
</span><span class="line">    |:lcprevious|
</span><span class="line">    |:lcNext|
</span><span class="line">    |:lcfirst|
</span><span class="line">    |:lclast|
</span><span class="line">    |:lcrewind|
</span><span class="line">    |:lcfile|
</span><span class="line">    |:lcnfile|
</span><span class="line">    |:lcpfile|
</span><span class="line">    |:lcNfile|</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>今天解介绍到这里。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--vim 撤销树Gundo.vim]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-vim-che-xiao-shu-gundo-dot-vim.html/"/>
    <updated>2014-04-15T21:10:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-vim-che-xiao-shu-gundo-dot-vim</id>
    <content type="html"><![CDATA[<p>今天介绍的插件很有意思，也非常有用，也是我最常用的插件之一——<a href="https://github.com/sjl/gundo.vim">Gundo</a>.</p>

<p>大家都知道按<code>u</code>可以撤销操作，但是一般都不知道输入命令<code>:undolist</code>会显示可撤销列表，如图</p>

<p><img src="http://ww1.sinaimg.cn/large/69d56e38gw1efglaef02lj20ki13qthg.jpg" style="     height: 600px; " /> </p>

<p>其实这还不是列表，而是整个vim 撤销树的叶子。为什么说是树，而不是列表，举个例子就明白了：</p>

<!--more-->

<p>你在a状态做了一次修改到b，又回退到a，再做了一次修改到c。大多数编辑器比如sublime text，b这个状态就没了，但是vim会用一个树进行保存。</p>

<p>而Gundo这个插件就是一个撤销树浏览器.直接上张图：</p>

<p><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efgmev2lz4j20ok1ci78i.jpg" style="     height: 600px; " /></p>

<p>当前位置以<code>@</code>标注，其他历史以o标注。</p>

<p>按jk上下移动，就可以在下面的窗口看到对应修改之前的改动。这个就是普通的vim窗口，所有的移动操作都是支持的，比如<code>G</code>到底部，<code>C-U</code>上翻页等。</p>

<p>按<code>p</code>可以查看选中状态和当前状态的差异，按回车就会回到选中状态，按<code>P</code>更是可以一步步播放到选中状态，高上大啊……</p>

<p>btw,我习惯将所有的undo记录都保存下来，即使关闭了vim或者buffer也能继续撤销。</p>

<p>只需要稍加配置，就能将撤销树持久化存储下来：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">try</span>
</span><span class="line">    <span class="k">set</span> <span class="nb">undodir</span><span class="p">=~</span><span class="sr">/.vim/</span>temp_dirs/<span class="nb">undodir</span>
</span><span class="line">    <span class="k">set</span> <span class="nb">undofile</span>
</span><span class="line"><span class="k">catch</span>
</span><span class="line"><span class="k">endtry</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>今天就介绍到这里。有问题直接回复给我。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--vim中的文本对象及相关插件]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-vimzhong-de-wen-ben-dui-xiang-ji-xiang-guan-cha-jian.html/"/>
    <updated>2014-04-14T22:56:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-vimzhong-de-wen-ben-dui-xiang-ji-xiang-guan-cha-jian</id>
    <content type="html"><![CDATA[<p>今天按读者留言的要求，介绍下文本对象。同时还会介绍我在用的几个文本相关的插件，今天是满满的内容啊。</p>

<p>所谓文本对象，简单来说就是以一定标准分隔符来标识一段文本，比如一个单词，一句话，一段话。</p>

<p>使用文本对象后你会发现你在vim中的移动和操作速度提升了不是一点半点。</p>

<p>在vim中编辑命令的结构如下：</p>

<pre><code> &lt;number&gt;&lt;command&gt;&lt;text object or motion&gt;
</code></pre>

<p>可以看到文本对象和motion的操作是完全一致的，第一个是数字，比如3w，就向前移动三个单词。</p>

<!--more-->

<p>文本对象大致有以下几种：</p>

<pre><code>w  s  p '' ""  &lt;&gt;  []  ()  {} &lt;tag&gt;
</code></pre>

<p>其中w表示word，s表示句子，p表示段落，其他的就是昨天介绍过的包围符号，标签用t表示。</p>

<p>文本对象的操作范围有两种，一种用<code>i</code>表示,是inner的意思，即不包括单词边上的空格符，亦或是<code>&lt;</code>包围符号本身。一种用<code>a</code>表示，是arround的意思，和i相反，使用a就包括了空格符或者包围符号本身。</p>

<p>文本对象的编辑命令就是vim中的几个常用编辑命令，分别是</p>

<pre><code>`y：复制`，`d：删除`,`c：替换`，`v：选中`
</code></pre>

<p>说的有点多了，来几个例子相信大家就立刻理解了。（例子中*都是光标所在位置）</p>

<p>比如：</p>

<pre><code>&lt;*h2&gt;Sample Title&lt;/h2&gt;
</code></pre>

<p>按下<code>cit</code>,文本变为：</p>

<pre><code>&lt;h2&gt;*&lt;/h2&gt;
</code></pre>

<p>再比如：
	console.log(“stay hungry,” + “stay *foolish”)</p>

<p>按下<code>da"</code>，文本变为：</p>

<pre><code>console.log("stay hungry," +*)
</code></pre>

<p>再按下<code>di)</code>，文本变为：</p>

<pre><code>console.log()
</code></pre>

<p>比如</p>

<pre><code>Hello Worl*d
</code></pre>

<p>按下<code>diw</code>,文本变为：</p>

<pre><code>Hello
</code></pre>

<p>很容易理解是不是？有没有发现为什么说文本对象会非常方便了？无论光标在文本的哪个位置，都可以直接操作整个文本。体验箭步如飞的感觉吧。</p>

<p>vim还允许使用脚本来自定义文本对象，这就是我们今天要介绍的插件了，这些插件自定义了一些文本对象。</p>

<p>1.CamelCaseMotion</p>

<p>该插件是把驼峰词语的每个单词分开，举个例子：</p>

<pre><code>get*ElementsByClassName
</code></pre>

<p>按下<code>di,w</code>,则文本变为：</p>

<pre><code>getByClassName
</code></pre>

<p>非常方便。</p>

<p>2.argtextobj</p>

<p>该插件定义了函数内的参数文本对象。比如：</p>

<pre><code>foo(text, ti*mes, option) {}
</code></pre>

<p>按下<code>daa</code>,则文本变为：</p>

<pre><code>foo(text, option) {}
</code></pre>

<p>今天暂时就介绍到这里。都快0点了，赶紧发出来。任何问题都可以回复给我。	</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--surround.vim]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-surround-dot-vim.html/"/>
    <updated>2014-04-13T22:11:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-surround-dot-vim</id>
    <content type="html"><![CDATA[<p>今天介绍一个必备的插件——<a href="https://github.com/tpope/vim-surround">surround.vim</a>,来自Tim Pope大神，很多著名的插件包括pathogen.vim都是出自他手，后面我还会介绍更多他写的插件。</p>

<p>是我最常用的插件之一。这个插件专门用来处理成对的包围符号……比如说括号，单双引号，XML标签等。</p>

<p>使用也非常简单好记，遵循vim本身的规则。</p>

<p>先来看一组实例，就知道这个插件的用途和使用方式了：</p>

<p>光标在</p>

<pre><code>"Hello world!"
</code></pre>

<p>中时按下<code>cs"'</code> ，则会替换双引号为单引号：</p>

<pre><code>'Hello world!'
</code></pre>

<!--more-->

<p>继续按下<code>cs'&lt;q&gt;</code>，则会替换单引号为<q>标签</q></p>

<pre><code>&lt;q&gt;Hello world!&lt;/q&gt;
</code></pre>

<p>按下 <code>cst"</code>，则回到初始的双引号：</p>

<pre><code> "Hello world!"
</code></pre>

<p>要删除符号，则按下<code>ds"</code></p>

<pre><code>Hello world!
</code></pre>

<p>当光标在hello上时，按下<code>ysiw]</code>，则会变为</p>

<pre><code> [Hello] world!
</code></pre>

<p>这个操作为其加上了包围符号。</p>

<p>总结下：</p>

<p>1.删除包围符号的命令是<code>ds</code>,后面加的字符表示要删除的符号。比如：</p>

<pre><code>"Hello *world!"           ds"         Hello world!
</code></pre>

<p>2.替换包围符号的命令是<code>cs</code>,命令后跟两个参数，分别是被替换的符号和需要使用的符号。比如</p>

<pre><code>"Hello *world!"           cs"'        'Hello world!'
</code></pre>

<p>3.添加包围符号的命令是<code>ys</code>(ys可以记为you surround)，命令后同样跟两个参数，第一个是一个vim“动作”（motion）或者是一个文本对象。</p>

<p>其中motion即vim动作，比如说<code>w</code>向后一个单词。文本对象简单的来说主要是来通过一些分隔符来标识一段文本，比如<code>iw</code>就是一个文本对象，即光标下的单词。不理解的朋友可以将光标放置在单词hello的中央，分别试一下<code>ysw</code>和<code>ysiw</code>的区别应该就明白啦。如果大家需要详细介绍motion和文本对象，可以留言或者直接公众账号回复，我看看要不要单独介绍下。</p>

<pre><code>  Hello w*orld!             ysiw)       Hello (world)!
</code></pre>

<p>另外：<code>yss</code>命令可以用于整行操作，忽略中间的空格。
<code>yS</code>和<code>ySS</code>还能让包围内容单独一行并且加上缩进。</p>

<p>4.添加包围符号还有个非常好用的方式：在可视模式v下，按下<code>S</code>后即可添加想要添加的包围符号了。</p>

<p>再说一个小技巧：在包围符号为括时，输入左括号<code>(或者{</code>,则会留一个空格</p>

<pre><code>Hello w*orld!             ysiw(       Hello ( world )!
</code></pre>

<p>而右括号则不留空格，也是非常好用，看编码风格使用。</p>

<p>今天就介绍到这里，欢迎关注我的公众账号，最新的文章都会第一时间推送到。有问题可以直接回复。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--缩进显示vim-indent-guides]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-suo-jin-xian-shi-vim-indent-guides.html/"/>
    <updated>2014-04-11T17:49:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-suo-jin-xian-shi-vim-indent-guides</id>
    <content type="html"><![CDATA[<p>今天有朋友留言问昨天晒配色的图中缩进用的什么插件，那今天就介绍这个缩进插件——<a href="https://github.com/nathanaelkane/vim-indent-guides">vim-indent-guides</a></p>

<p>选择这个插件主要有几个理由：</p>

<ol>
  <li>插件对tab和空格的支持都很好。</li>
  <li>比较美观。</li>
  <li>能够自动适配当前使用的colorscheme来选择缩进颜色（只能是gvim，macvim下适配的不错）</li>
</ol>

<!--more-->
<p>默认的快捷键是<code>&lt;Leader&gt;ig</code>,开关插件。我一般都默认启动就开启,只要设置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">let</span> <span class="k">g</span>:indent_guides_enable_on_vim_startup <span class="p">=</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>前面说了缩进的颜色是自动选择的，非常方便，但是想要自定义颜色也是支持的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">let</span> <span class="k">g</span>:indent_guides_auto_colors <span class="p">=</span> <span class="m">0</span>
</span><span class="line">autocmd <span class="nb">VimEnter</span><span class="p">,</span>Colorscheme * :<span class="k">hi</span> IndentGuidesOdd  guibg<span class="p">=</span><span class="k">red</span>   ctermbg<span class="p">=</span><span class="m">3</span>
</span><span class="line">autocmd <span class="nb">VimEnter</span><span class="p">,</span>Colorscheme * :<span class="k">hi</span> IndentGuidesEven guibg<span class="p">=</span>green ctermbg<span class="p">=</span><span class="m">4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在终端中该插件就不支持颜色自动选择了。只取决于<code>background</code>设置为<code>dark</code>还是<code>light</code>,如果设置了<code>dark</code>,就相当于配置了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">hi</span> IndentGuidesOdd  ctermbg<span class="p">=</span>black
</span><span class="line"><span class="k">hi</span> IndentGuidesEven ctermbg<span class="p">=</span>darkgrey
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>来几张图，图上标注了相应的配置：</p>

<p><img src="http://ww4.sinaimg.cn/large/69d56e38gw1efbth8m9aij20cg0cgta5.jpg" alt="" />
<img src="http://ww2.sinaimg.cn/large/69d56e38gw1efbtngrerjj20cg0cg3zt.jpg" alt="" />
<img src="http://ww2.sinaimg.cn/large/69d56e38gw1efbtqa6k47j20cg0cgjsq.jpg" alt="" /></p>

<p>这个插件并不能很好的标记出tab和空格混用的情况，只能显示当前缩进。所以我在我的vimrc中加了一行：
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="vim"><span class="line"><span class="c">&quot; highlight tabs and trailing spaces</span>
</span><span class="line"><span class="k">set</span> <span class="nb">list</span>
</span><span class="line"><span class="k">set</span> <span class="nb">listchars</span><span class="p">=</span><span class="k">tab</span>:<span class="p">&gt;-,</span>trail:<span class="p">-,</span>extends:<span class="p">&gt;,</span>precedes:<span class="p">&lt;</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
这样tab会被显示为&gt;-，而尾部空格被显示为-，这样写出来的代码就不会再有杂乱符号啦。</p>

<p>今天就介绍到这里。我开通了一个微信公众账号，以后每天的文章会通过微信公众账号推送，欢迎关注。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--我的配色 molokai]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-wo-de-pei-se-molokai.html/"/>
    <updated>2014-04-10T21:24:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-wo-de-pei-se-molokai</id>
    <content type="html"><![CDATA[<p>今天其实不介绍插件。因为有一些朋友问，所以今天单独介绍下我的配色和字体。</p>

<p>配色使用的是我钟爱的monokai，但是换了深色配色，使用了一个<a href="https://github.com/tomasr/molokai">molokai</a>配色插件。之所以叫molokai，因为这个配色是monokai的修改版，将monokai的背景色改为了深色。我想要一个深色背景的molokai.正和我意啊。</p>

<p>下面是两张作者的原图：
<!--more--></p>

<p><img src="http://www.winterdom.com/weblog/content/binary/WindowsLiveWriter/MolokaiforVim_8602/molokai_normal_small_3.png" alt="" /></p>

<p><img src="http://www.winterdom.com/weblog/content/binary/WindowsLiveWriter/MolokaiforVim_8602/molokai_original_small_3.png" alt="" /></p>

<p>如果要使用monokai原始的背景色，加上配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let g:molokai_original = 1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面再放上一张我自己的图：
<img src="http://ww1.sinaimg.cn/large/69d56e38gw1efatpzm085j21kw0zrdnu.jpg" alt="" /></p>

<p>两者的差别除了缩进显示之外就是字体了。</p>

<p>字体也是我非常喜欢，精挑细选的字体<a href="https://github.com/adobe/source-code-pro">Source code pro</a></p>

<p><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efatye9ls3j20lw0haacp.jpg" alt="" /></p>

<p>链接里有下载和安装方法，喜欢就试试吧。</p>

<hr />
<p>4月11号更新：
看到下面评论有晒自己的配色，想起来有个repo，里面收集了非常多的vim 配色。
这里也贴出来——<a href="https://github.com/flazz/vim-colorschemes">vim-colorschemes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--vim-multiple-cursors]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-vim-multiple-cursors.html/"/>
    <updated>2014-04-09T22:19:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-vim-multiple-cursors</id>
    <content type="html"><![CDATA[<p>前几天清明休假了。每日插件也就休息了几天。不过休假搞的比上班还累……</p>

<p>今天介绍一款我用的非常多，也非常有用的插件–<a href="">vim-multiple-cursors</a>。</p>

<p>这个插件copy了sublime text的多重光标选取功能，非常强大。</p>

<p>sublime text 官网有几张图来介绍sublime text的多重选取功能，插件作者也实现了一样的效果：
<img src="http://ww1.sinaimg.cn/large/69d56e38gw1ef9pr4t1i2g20k406ojtw.gif" alt="" /></p>

<!--more-->

<p>上图按键：</p>

<ul>
  <li>fp跳到p处</li>
  <li>按下<code>&lt;C-n&gt;</code>选中光标下的单词</li>
  <li>继续按下<code>&lt;C-n&gt;</code>两次选中另外两个相同的单词</li>
  <li>按下c进行修改</li>
  <li>键入修改</li>
  <li>按下 <code>&lt;Esc&gt;</code> 退出</li>
</ul>

<p><img src="http://ww1.sinaimg.cn/large/69d56e38gw1ef9pzm3d13g20sy0900zt.gif" alt="" /></p>

<p>上图按键：</p>

<ul>
  <li>按下V选中整行</li>
  <li>按下G到达末行</li>
  <li>按下<code>&lt;C-n&gt;</code> 在每行的开头加上一个光标并返回普通模式</li>
  <li>按下I在每行的头部插入</li>
  <li>键入”, 按下<code>&lt;C-e&gt;</code>到达行末, 键入另一个”和逗号</li>
  <li>然后将每个光标都下移一行，按下delete	</li>
</ul>

<p>再也不用羡慕sublime了。</p>

<p>使用也非常简单，几乎0配置。</p>

<p>默认的mapping：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">" Default mapping
</span><span class="line">let g:multi_cursor_next_key='&lt;C-n&gt;'
</span><span class="line">let g:multi_cursor_prev_key='&lt;C-p&gt;'
</span><span class="line">let g:multi_cursor_skip_key='&lt;C-x&gt;'
</span><span class="line">let g:multi_cursor_quit_key='&lt;Esc&gt;'</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在普通模式下，按下<code>Ctrl-n</code>开始进入可视模式并选中光标下的单词，继续按<code>Ctrl-n</code>选择下一个相同的单词，按下<code>Ctrl-p</code>往回选一个，<code>Ctrl-x</code>则跳过下一个相同单词。</p>

<p>选中后就可以对单词进行批量改动了，比如按下c，就同时修改选中单词。</p>

<p>插件还支持正则匹配，不过要用到正则去匹配的时候我就用%s来替换了。要了解详情可以去插件的github页继续了解。</p>

<p>今天就介绍这个性感无比的插件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--goyo]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-goyo.html/"/>
    <updated>2014-04-03T21:50:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-goyo</id>
    <content type="html"><![CDATA[<p>一如既往很忙……所以今天还是分享一个可以一句话说明白的插件，也是我非常常用的–<a href="https://github.com/junegunn/goyo.vim">goyo</a></p>

<p>一直非常喜欢写作软件iawriter，goyo让我可以用同样的方式来写代码，当然goyo还免费开源，这比iawriter好。用作者的描述就是：Distraction-free writing in Vim. 不会被任何的其他元素打扰。
<!--more-->
直接上张图：<img src="http://ww4.sinaimg.cn/large/69d56e38gw1ef2r2wod9uj21kw0zkte6.jpg" alt="" />
<img src="https://raw.github.com/junegunn/i/master/goyo.png" alt="" /></p>

<p>第一张是我的配色，第二张是作者的示例。是不是很cool？</p>

<p>安装当然借用vundle了。</p>

<pre><code>nnoremap &lt;Leader&gt;d :Goyo&lt;CR&gt;
</code></pre>

<p>就可以按引导键加逗号呼出goyo模式了。
可以按自己的需求配置宽高和位置：</p>

<ul>
  <li><code>g:goyo_width</code> (default: 80)</li>
  <li><code>g:goyo_margin_top</code> (default: 4)</li>
  <li><code>g:goyo_margin_bottom</code> (default: 4)</li>
  <li><code>g:goyo_linenr</code> (default: 0)</li>
  <li><code>g:goyo_callbacks</code> ([before_funcref, after_funcref])</li>
</ul>

<p>goyo模式中默认禁用了
<a href="https://github.com/bling/vim-airline">vim-airline</a>,
<a href="https://github.com/Lokaltog/vim-powerline">vim-powerline</a>,
<a href="https://github.com/Lokaltog/powerline">powerline</a>,
<a href="https://github.com/itchyny/lightline.vim">lightline.vim</a>, and
<a href="https://github.com/airblade/vim-gitgutter">vim-gitgutter</a>插件。如果需要自定义goyo模式或者一些插件的enable/disable，</p>

<p>可以在vimrc中定义before和after回掉：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:goyo_before<span class="p">()</span>
</span><span class="line">  <span class="k">silent</span> <span class="p">!</span>tmux <span class="k">set</span> status off
</span><span class="line">  <span class="k">set</span> <span class="nb">noshowmode</span>
</span><span class="line">  <span class="k">set</span> <span class="nb">noshowcmd</span>
</span><span class="line"><span class="c">  &quot; ...</span>
</span><span class="line"><span class="k">endfunction</span>
</span><span class="line">
</span><span class="line"><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:goyo_after<span class="p">()</span>
</span><span class="line">  <span class="k">silent</span> <span class="p">!</span>tmux <span class="k">set</span> status <span class="k">on</span>
</span><span class="line">  <span class="k">set</span> <span class="nb">showmode</span>
</span><span class="line">  <span class="k">set</span> <span class="nb">showcmd</span>
</span><span class="line"><span class="c">  &quot; ...</span>
</span><span class="line"><span class="k">endfunction</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="k">g</span>:goyo_callbacks <span class="p">=</span> [<span class="k">function</span><span class="p">(</span><span class="s1">&#39;s:goyo_before&#39;</span><span class="p">),</span> <span class="k">function</span><span class="p">(</span><span class="s1">&#39;s:goyo_after&#39;</span><span class="p">)</span>]
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以在<a href="https://github.com/junegunn/goyo.vim/wiki/Customization">这里</a>看到更多的自定义示例</p>

<p>好吧，基本就是翻译了一下……因为插件很简单，文档也很详细。我自己非常喜欢这个插件，希望大家也会喜欢～</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--有道翻译]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-you-dao-fan-yi.html/"/>
    <updated>2014-04-02T21:34:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-you-dao-fan-yi</id>
    <content type="html"><![CDATA[<p>今天头疼。简短介绍一个实用又好用的插件，在vim中直接进行有道翻译,<a href="https://github.com/ianva/vim-youdao-translater">vim-youdao-translater</a>，来自ianva.我非常喜欢的一个插件,在这里再次感谢作者ianva。</p>

<p>安装就不介绍了，不知道怎么安装看上一篇博客。</p>

<p>使用方式copy自ianva：</p>

<p>在普通模式下，按 ctrl+t， 会翻译当前光标下的单词；</p>

<p>在 visual 模式下选中单词，按 ctrl+t，会翻译选择的单词；</p>

<p>点击引导键再点y，d，可以在命令行输入要翻译的单词；</p>

<p>译文将会在编辑器底部的命令栏显示。 </p>

<p>上述操作的配置：</p>

<pre><code>vnoremap &lt;silent&gt; &lt;C-T&gt; &lt;Esc&gt;:Ydv&lt;CR&gt; 
nnoremap &lt;silent&gt; &lt;C-T&gt; &lt;Esc&gt;:Ydc&lt;CR&gt; 
noremap &lt;leader&gt;yd :Yde&lt;CR&gt;
</code></pre>

<p>明天继续。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--开篇之vundle]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-kai-pian-zhi-vundle.html/"/>
    <updated>2014-04-01T22:34:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-kai-pian-zhi-vundle</id>
    <content type="html"><![CDATA[<p>一直想写一篇博客介绍我的vim配置和插件，但是这篇博客却难产了快半年……
工作太忙，写博客变成了奢侈的事情。那何不每天写一点点呢？于是决定每天介绍一个vim插件或者一个技巧。</p>

<p>大致看了一下自己的<a href="https://github.com/notice501/dotfiles">vim配置</a>，竟然都快有100个插件之多了……</p>

<p>但是我从来都没有感觉到插件管理有多麻烦，我可以经常更新，删除和安装想用的插件。所以第一个介绍的插件必须是用来管理插件的神器–<a href="https://github.com/gmarik/Vundle.vim">Vundle</a></p>

<p>在使用vundle之前，我使用Pathogen与git submodule来管理Vim插件，而vundle更为强大，不需要再手动操作git了。Vundle会自动去对应的插件git库获取最新的插件。
<!--more--></p>

<p>Vundle的安装非常简单：</p>

<ol>
  <li>当然你需要安装git</li>
  <li>git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</li>
  <li>配置vimrc。我建议像我一样单独写个bundles.vim，(我还是用的Bundle这个名字，但是写这篇博客的时候发现作者已经废弃了这个名字，统一叫做plugin)方便管理。示例如下：</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"> <span class="k">set</span> <span class="nb">nocompatible</span>              <span class="c">&quot; be iMproved, required</span>
</span><span class="line"><span class="k">filetype</span> off                  <span class="c">&quot; required</span>
</span><span class="line">
</span><span class="line"><span class="c">&quot; set the runtime path to include Vundle and initialize</span>
</span><span class="line"><span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/vundle/</span>
</span><span class="line"><span class="k">call</span> vundle#rc<span class="p">()</span>
</span><span class="line"><span class="c">&quot; alternatively, pass a path where Vundle should install plugins</span>
</span><span class="line"><span class="c">&quot;let path = &#39;~/some/path/here&#39;</span>
</span><span class="line"><span class="c">&quot;call vundle#rc(path)</span>
</span><span class="line">
</span><span class="line"><span class="c">&quot; let Vundle manage Vundle, required</span>
</span><span class="line">Plugin <span class="s1">&#39;gmarik/vundle&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c">&quot; The following are examples of different formats supported.</span>
</span><span class="line"><span class="c">&quot; Keep Plugin commands between here and filetype plugin indent on.</span>
</span><span class="line"><span class="c">&quot; scripts on GitHub repos</span>
</span><span class="line">Plugin <span class="s1">&#39;tpope/vim-fugitive&#39;</span>
</span><span class="line">Plugin <span class="s1">&#39;Lokaltog/vim-easymotion&#39;</span>
</span><span class="line">Plugin <span class="s1">&#39;tpope/vim-rails.git&#39;</span>
</span><span class="line"><span class="c">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</span>
</span><span class="line"><span class="c">&quot; Pass the path to set the runtimepath properly.</span>
</span><span class="line">Plugin <span class="s1">&#39;rstacruz/sparkup&#39;</span><span class="p">,</span> {<span class="s1">&#39;rtp&#39;</span>: <span class="s1">&#39;vim/&#39;</span>}
</span><span class="line"><span class="c">&quot; scripts from http://vim-scripts.org/vim/scripts.html</span>
</span><span class="line">Plugin <span class="s1">&#39;L9&#39;</span>
</span><span class="line">Plugin <span class="s1">&#39;FuzzyFinder&#39;</span>
</span><span class="line"><span class="c">&quot; scripts not on GitHub</span>
</span><span class="line">Plugin <span class="s1">&#39;git://git.wincent.com/command-t.git&#39;</span>
</span><span class="line"><span class="c">&quot; git repos on your local machine (i.e. when working on your own plugin)</span>
</span><span class="line">Plugin <span class="s1">&#39;file:///home/gmarik/path/to/plugin&#39;</span>
</span><span class="line"><span class="c">&quot; ...</span>
</span><span class="line">
</span><span class="line"><span class="k">filetype</span> plugin indent <span class="k">on</span>     <span class="c">&quot; required</span>
</span><span class="line"><span class="c">&quot; To ignore plugin indent changes, instead use:</span>
</span><span class="line"><span class="c">&quot;filetype plugin on</span>
</span><span class="line"><span class="c">&quot;</span>
</span><span class="line"><span class="c">&quot; Brief help</span>
</span><span class="line"><span class="c">&quot; :PluginList          - list configured plugins</span>
</span><span class="line"><span class="c">&quot; :PluginInstall(!)    - install (update) plugins</span>
</span><span class="line"><span class="c">&quot; :PluginSearch(!) foo - search (or refresh cache first) for foo</span>
</span><span class="line"><span class="c">&quot; :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins</span>
</span><span class="line"><span class="c">&quot;</span>
</span><span class="line"><span class="c">&quot; see :h vundle for more details or wiki for FAQ</span>
</span><span class="line"><span class="c">&quot; NOTE: comments after Plugin commands are not allowed.</span>
</span><span class="line"><span class="c">&quot; Put your stuff after this line</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在vimrc的开头引入bundles.vim:</p>

<pre><code>source ~/.vim/bundles.vim
</code></pre>

<p>4.如示例所示，将所有的插件都写成plugin ‘user/repo’即可。vundle会从该库中去取。</p>

<p>如果未加’/’，则默认从vim script: https://github.com/vim-scripts/ 去取
	还可以加上非github库：</p>

<pre><code>Plugin 'git://git.wincent.com/command-t.git'
	
或者本地文件

Plugin 'file///path/from/root/to/plugin'
</code></pre>

<p>5.安装只需输入</p>

<pre><code>:BundleInstall 或者 :pluginInstall
</code></pre>

<p>更新：</p>

<pre><code>:pluginUpdate
</code></pre>

<p>删除：</p>

<pre><code>:pluginClean
</code></pre>

<p>6.vundle 还带了插件搜索功能</p>

<pre><code>:PluginSearch foo
</code></pre>

<p>搜索结果会在新窗口打开，然后可以进行直接安装删除等操作。</p>

<hr />
<p>从Vundle开始，享受vim丰富的插件带来的爽快感吧~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Android传感器高级编程》译者序]]></title>
    <link href="http://notice501.github.com/blog/androidchuan-gan-qi-gao-ji-bian-cheng-yi-zhe-xu.html/"/>
    <updated>2014-01-28T10:55:00+08:00</updated>
    <id>http://notice501.github.com/blog/androidchuan-gan-qi-gao-ji-bian-cheng-yi-zhe-xu</id>
    <content type="html"><![CDATA[<p><img src="http://ww2.sinaimg.cn/large/69d56e38gw1ecz2n3vnnaj209p09qaas.jpg" alt="" /></p>

<p>翻看手机中的应用，就能发现大多数应用都已经使用了传感器。让微信彻底火起来的“附近的人”和“摇一摇”、碰一碰交换信息的Bump、各种运动记录app、神奇的“磁力探测仪”、火爆的游戏Temple Run……手机设备中的传感器让应用的可玩性大大增加，提供了各种创新的交互方式，以及在PC上很难实现的功能。在我看来，移动设备相对PC来说的主要优势在于随时随地的便携性，还有就是丰富的传感器。用好传感器，已经是手机应用开发的必修课。</p>

<p>可是开始听到本书书名时，对翻译本书并没有什么兴趣。我自己也写过一本Android开发方面的书，觉得介绍传感器编程的话，一个章节足以。可是在看了英文书后，发现本书并不是简单地介绍Android传感器API的调用，而是非常专业细致地介绍了Android传感器。这本书将教会你真正用好Android传感器。</p>

<!--more-->

<p>首先，本书对传感器的介绍都非常深入。我一直认为，要真正用好一个东西，必须了解其原理。本书对传感器的原理都作了必要的解读，就拿第1章来说，相信大家都知道GPS的原理，但是你知道A-GPS吗？S-GPS呢？是否知道Wi-Fi定位和移动网络定位的原理呢？想要用好Android的定位服务，这些知识是必需的。我的一位朋友前几天还问我，他玩微信中“附近的人”，明明在杭州却老是定位在南京。其实原因就是他在使用Wi-Fi定位，而这个路由器在南京呆了6年，在Google的数据库中早就被定位在了南京的某地，Google并没有即时更新该数据库。如果微信考虑这种情况，相信可以对这种状况做一些特别的处理。</p>

<p>其次，本书的范围很广。与其说是介绍传感器，倒不如说是介绍如何充分利用Android设备的硬件能力。本书分4个部分，涵盖了定位的相关内容、各种物理传感器的介绍(包括重力传感器、加速计、磁强计等，还介绍了AOA和ADK)，同时还包括了NFC、摄像头、图像处理、麦克风等，以及语音识别和文本转语音的内容。可以说，本书完全涵盖了Android的硬件设备能力，能够用来打造一个非常有趣的应用。运用好这些硬件，可以充分发挥Android设备智能和便携的特性。同时这也是相对Web 应用来说非常大的优势。书中甚至包括了最近火热的Arduino的使用介绍，读者可以尽情地创新创意。</p>

<p>再次，本书的示例非常丰富，并且很多都可以简单复用。书中有着大量的示例，大多都是作者对传感器使用的最佳实践，并且结合了实际的使用场景，而不是简单的demo。同时，作者提供了大量框架性的代码，读者都可以直接复用。通过这些示例，读者可以快速掌握这些传感器的用法。</p>

<p>在翻译本书的过程中，感谢我的家人，你们给了我最大的支持。感谢我的好朋友徐婷翻译了第六章，且对本书一丝不苟的校对，让行文更加通顺优美，在很多专业知识上也提供了宝贵的建议并对本书的第6章有所贡献，在整个翻译过程中给了我莫大的支持和鼓励。感谢我所有的朋友和同事，本书的完成少不了你们的鼓励和支持。感谢清华大学出版社的编辑给了足够的耐心，并给了我很多的建议和帮助，让我获益匪浅。
本书的翻译过程非常艰辛，可谓一波三折。在本书付梓之际，虽然高兴，却也多了几分惶恐。这也是我的第一本译作，自觉水平有限，而本书其实又由多个作者完成，语言风格迥异，虽然我已经尽了很大的努力，但是肯定难免会有一些错漏和偏颇之处。对于本书的任何想法和意见都欢迎发送邮件至notice520@gmail.com。</p>

<p>最后，希望本书能帮助各位开发人员打造更美、更有创意、更有趣的移动应用。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我在用的mac软件(3)-效率篇]]></title>
    <link href="http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian-3-xiao-lu-pian.html/"/>
    <updated>2013-09-22T14:54:00+08:00</updated>
    <id>http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian-3-xiao-lu-pian</id>
    <content type="html"><![CDATA[<p>距离上篇博客竟然一晃就2个月过去了……最近确实太忙了，但一忙其实就容易乱，反而积累就少。</p>

<p>今天继续介绍下我在用的mac软件。标题为效率篇，其实没有严格的限定，就是杂乱的介绍我在用的感觉能提升效率的工具软件。</p>

<h4 id="gtd">GTD</h4>
<p>mac下好用的GTD太多了，比如非常强大的ommniFocus，也有极其简洁的clear。
<!--more-->
在试用了各种以后（这绝对不是一件有效率的事情……），我现在用的是<strong>Things</strong>和<strong>clear</strong>。</p>

<p>Things是标准GTD理念很好的载体。在inbox中记录各个要完成的任务，然后分类整理到不同的project或者不同的周期段。关于具体的使用方式我就不多说了，大家可以去搜索下，GTD或者Things相关的介绍还是非常多的。我用Things主要记一些耗时较长的任务。我会在next里面放一些即将要去做的事情，在someday里放一些不那么紧急却想做的事情（也用来记录灵感）。secheduled用来记录周期性的东西，比如每天固定时间把pocket中的文章一起读一下。而project就是一个项目分类，比如工作项目，比如读书计划等。things遗憾的是没有提醒功能，手机端也只有ios。可以考虑使用免费的<a href="http://doit.im/">doit.im</a>,功能和things基本一致，还弥补了上述不足。</p>

<p>而clear就是一个非常轻量级的任务列表。我会用来记录更加具体细分的任务。比如今天要实现某个功能，那开始编程的时候，会一条条按顺序写出要做的事情。这样思路就不会乱了，而且在计划好后就能立刻开始编程了。原则上，clear的任务是每天清空的。同样，clear不支持android。</p>

<p>在我的使用过程中，两者能很好的互补，偶尔会有交叉，但是总体感觉还是非常不错的。</p>

<h4 id="alfred">Alfred</h4>
<p>一款几乎所有人都会说是神器的软件。Alfred强化了spotlight，不仅可以快速的搜索本地文件，还可以搜索各种网络上的内容，同时也可以实现完全的键盘操作。真正做到快速启动的同时，也支持自定义各种插件，使其无比强大。可以用来查找文件，直接打开文件或者应用，可以直接进行google搜索，可以查询各种词典，可以查看历史剪贴板……如图是用一个豆瓣插件直接去豆瓣搜索电影。<img src="http://foocoder.com/images/mac/alfred.png" alt="" /></p>

<p>这里就不具体介绍Alfred的功能了，这完全可以单独写篇博客来写。Alfred的使用方式也是非常简单，不用什么教程，稍微摸索下就可以了。</p>

<p><a href="http://www.waerfa.com/alfred-workflow">这篇文章</a>罗列了一些实用的插件，大家可以各取所需。其实从这些插件看，就能感觉到Alfred的强大了。</p>

<h4 id="dash">Dash</h4>
<p><a href="http://kapeli.com/dash">dash</a>主要是一个API文档浏览器。可以快速地查阅各种技术的api文档，非常方便。特别是离线环境下，尤其有用。dash还可以存储常用的代码片段以供使用。<img src="http://foocoder.com/images/mac/dash.png" alt="" /></p>

<h4 id="typinator">Typinator</h4>
<p>Typinator是一个自动文本扩展工具。即定义好缩写，就会在你输入该缩写后自动替换定义的文本。比如定义的这条缩写<img src="http://foocoder.com/images/mac/wifi.png" alt="" /></p>

<p>当我输入wifi时，会自动转换为Wi-Fi。有了typinator输入一些常用字符或者文本片段时就会非常方便。遗憾的是对中文输入法不支持，每次必须切换到英文输入法。图为官网的一张介绍图<img src="http://foocoder.com/images/mac/typinator.gif" alt="" /></p>

<h4 id="popclip">popClip</h4>
<p><a href="http://pilotmoon.com/popclip/">popClip</a>也是一个可以提升效率的工具。在你选择文本之后,popClip会弹出，如图所示：<img src="http://foocoder.com/images/mac/popClip.png" alt="" /></p>

<p>可以看到能对选中的文本进行复制，加双引号，打开dash搜索，发微博，添加到things等等。很多功能都不是默认的，和Alfred一样，popClip支持自定义插件。可以在<a href="http://pilotmoon.com/popclip/extensions/">这里</a>下载各种插件满足不同的需求。 非常强大。</p>

<h4 id="magicandocument">magicanDocument</h4>
<p>magicanDocument会根据文件类型进行分类管理。对于我这种东西有时候放的比较乱的人非常有用。不用过多介绍，一看就懂，如图：<img src="http://foocoder.com/images/mac/file.png" alt="" /></p>

<h4 id="timesink">TimeSink</h4>
<p>TimeSink是一个时间跟踪软件。他可以自动记录你在mac上使用各种软件的时间，无论是在前台使用还是后台使用。如图：<img src="http://foocoder.com/images/mac/timesink.png" alt="" /></p>

<p>每天看看自己的时间花在哪里是非常有意思的事情，可以很好的对一天的工作效率做出总结。我设置了每天都会清空重置，从这张图我可以清楚地看到今天没写什么代码，vim时间不超过半小时，时间全部花在了chrome上。因为今天一直在看一个系列博文。然后用mou写博客花了第二多的时间。这都是意料之中，但是没想到聊了这么久的qq……所以，这款软件能让你清楚的知道时间都是被谁偷走了。我很喜欢。</p>

<h4 id="synergy">synergy</h4>
<p>synergy用来用一套键鼠操作多个电脑。如图：<img src="http://foocoder.com/images/mac/synergy1.png" alt="" /></p>

<p>一台作为服务端，共享它的键鼠，其他的作为client端。填上相应的ip地址，拖动屏幕的相对位置即可，非常方便。<img src="http://foocoder.com/images/mac/synergy2.png" alt="" /></p>

<hr />
<p>9.24更新</p>

<h4 id="eggscellent">eggscellent</h4>
<p><a href="http://www.eggscellentapp.com/">eggscellent</a>是一款todolist加上番茄工作法的效率应用。番茄工作法的软件很多，我觉得这款还是很不错的。todolist可以和things等GTD应用融合，非常方便。在things上today中的事项都会自动添加到其列表上。ui也非常漂亮。总的来说，是一款功能强大，又不失简洁的番茄工作法应用。</p>

<p><img src="http://foocoder.com/images/mac/eggs1.jpeg" alt="" /></p>

<p><img src="http://foocoder.com/images/mac/eggs2.jpeg" alt="" /></p>

<p>顺便提一下，在这之前，我用的是叫smart Timer的一个小应用，没有todo list，就一个时间倒计时，非常简洁，也是非常好用的，喜欢功能单一的朋友可以用下这个试试。</p>

<p>就写到这里吧，很多软件我也不知道该不该界定为效率软件。不过这些都是我常用而且感觉对效率有提升的软件。欢迎留言交流。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端环境之tmux]]></title>
    <link href="http://notice501.github.com/blog/zhong-duan-huan-jing-zhi-tmux.html/"/>
    <updated>2013-07-28T17:09:00+08:00</updated>
    <id>http://notice501.github.com/blog/zhong-duan-huan-jing-zhi-tmux</id>
    <content type="html"><![CDATA[<h2 id="tmux">今天继续介绍我的终端环境，tmux。</h2>

<p>tmux 是一个优秀的终端复用软件，类似 GNU Screen，但来自于OpenBSD，采用BSD授权。使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机。简单来说，tmux是一个<code>multiplexers</code>,他可以让你同时运行多个终端，在多个终端之间切换。</p>

<h2 id="why-tmux">why tmux?</h2>
<p>用一个工具的第一问自然还是为什么要用。其实当时使用tmux的原因很简单。工作中经常需要长时间的编译。在想要回家时编译还没结束，可以在计算机休眠的情况下继续编译。简单的寻觅一番之后，就发现了tmux。而且远超预期，就一直用了下来。</p>

<p>其他让我非常喜欢的功能有：</p>

<!--more-->

<ol>
  <li>window，pane的概念可以很好地进行多窗口切换，窗口分割。</li>
  <li>状态行配置很容易。</li>
  <li>vi 模式</li>
  <li>复制粘贴缓冲区</li>
  <li>脚本化.通过脚本可以自动化窗口布局。</li>
</ol>

<h2 id="tmux-1">tmux简单介绍</h2>

<p>tmux是典型的c/s架构。有如下几个概念。</p>

<ul>
  <li>session. session是一个特定的终端组合。输入tmux就可以打开一个新的session。</li>
  <li>window。window 为session中的终端。</li>
  <li>pane 。pane为一个window分隔出来的各个间隔，即window中的终端。</li>
</ul>

<h2 id="tmux-2">tmux的使用</h2>
<p>正如上所述，在终端中输入<code>tmux</code>就可以打开一个tmux session。如图：
<img src="http://foocoder.com/images/mac/tmux.png" alt="" /></p>

<p>底部会出现状态栏。左边表示当前为session 0， window 1， pane 1，中间会显示当前窗口编号和路径，右侧会本机信息和时间。这并不是默认设置，但是配置tmux的状态行非常容易，在后面我会简单的介绍如何配置tmux，并提供我的配置文件。</p>

<p>tmux的所有操作必须先使用一个前缀键进入命令模式，或者说进入控制台，就像vi中的<code>esc</code>。默认的前缀为<code>&lt;c-b&gt;</code>,比较难按，很多人会改为screen中的<code>&lt;c-a&gt;</code>，来保持一致性。可是这和emacs风格的终端回到行首的快捷键冲突，我使用的是<code>c-k</code>。大家可以根据自己喜好来配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">set -g prefix ^k
</span><span class="line">unbind ^b</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>输入<code>?</code>显示所有的bind-key，如图<img src="http://foocoder.com/images/mac/allbindkey.png" alt="" /></p>

<p>如果设置了<code>setw -g mode-keys vi</code>,可以使用vi 的 <code>j</code> <code>k</code>风格快捷键上下浏览。这些bind-key显示了所有的tmux操作。按q退出。</p>

<p>下面就介绍一些常用的操作，为了方便大家查看，所有的bind-key都是系统默认的，而不是我自己配置的。省略了前缀键。</p>

<h3 id="section">复制粘贴</h3>
<ul>
  <li><code>[</code> 进入复制模式。</li>
  <li><code>]</code> 粘贴</li>
</ul>

<p>进入复制模式后，可以用vi风格的快捷键进行移动（按上文的设置）。按下<code>sapce</code>就可以选择文本。回车键进行复制。然后再通过<code>]</code>进行粘贴。</p>

<p>这里我将复制粘贴设为类似vi的模式,使用<code>esc</code>进入复制模式，<code>v</code>进入粘贴模式，选择后<code>y</code>进行复制。<code>&lt;Prefix-p&gt;</code>进行粘贴.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># Copy and paste like in vim
</span><span class="line">unbind [
</span><span class="line">bind Escape copy-mode
</span><span class="line">unbind p
</span><span class="line">bind p paste-buffer
</span><span class="line">bind -t vi-copy 'v' begin-selection
</span><span class="line">bind -t vi-copy 'y' copy-selection</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所有的复制都会被记录到缓冲区，输入<code>#</code>或者 <code>tmux list-buffers</code>查看缓冲区,同时也进入了复制模式。也可以使用”=”来选择并粘贴缓冲区内容。tmux的缓冲区和系统剪贴板是完全独立的，为了复制到系统剪贴板，我做了如下处理，对于mac os X用户：</p>

<p>第一步：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew install reattach-to-user-namespace</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而后增加配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># getting tmux to copy a buffer to system clipboard
</span><span class="line">set-option -g default-command "reattach-to-user-namespace -l zsh" # or bash...
</span><span class="line">bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy" \; display-message "Copied tmux buffer to system clipboard"
</span><span class="line">bind C-v run "reattach-to-user-namespace pbpaste | tmux load-buffer - &amp;&amp; tmux paste-buffer"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样，在tmux中进行复制后。按下前缀键后键入<code>y</code>,就会在状态栏显示已粘贴到剪贴板，如图<img src="http://foocoder.com/images/mac/paste.png" alt="" />
此时，就可以用<code>cmd-v</code>进行粘贴了。系统剪贴板的也可以键入<code>&lt;C-v&gt;</code>粘贴。（当然，更方便的还是直接<code>cmd-v</code>,无需前缀键）。</p>

<p>对于linux用户,可以使用xclip,配置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bind y run-shell "tmux show-buffer | xclip -sel clip -i" \; display-message "Copied tmux buffer to system clipboard"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>同样键入<code>y</code>复制buffer中最新的内容到系统剪贴板。</p>

<h3 id="session">session操作</h3>
<ul>
  <li><code>d</code> deattch当前session。输入<code>tmux attach [-t sessionname]</code>重新进入该session。</li>
  <li><code>tmux ls</code> 列出所有session。如图:<img src="http://foocoder.com/images/mac/allsession.png" alt="" />输入，退出当前session后，<code>tmux attach -t 1</code>即可切换到名字为1的session。</li>
  <li><code>$</code> 重命名当前session</li>
  <li><code>&lt;c-z&gt;</code> 挂起当前session</li>
</ul>

<h3 id="window">window操作</h3>
<ul>
  <li><code>c</code> 创建一个新的window</li>
  <li><code>b</code> 重命名当前window</li>
  <li><code>&amp;</code> 关闭当前window</li>
  <li><code>n</code> 移动到下一个窗口</li>
  <li><code>p</code> 移动到前一个窗口</li>
  <li><code>l</code> 切换到上一个窗口</li>
  <li><code>w</code> 列出所有窗口编号,并进行选择切换</li>
  <li><code>编号</code> 移动到指定编号的窗口。</li>
  <li><code>.</code> 修改窗口编号，相当于排序。</li>
  <li><code>f</code> 搜索所有的窗口。非常方便的功能。如图<img src="http://foocoder.com/images/mac/search.png" alt="" /></li>
</ul>

<h4 id="pane">pane操作</h4>
<ul>
  <li><code>"</code> 横向分割</li>
  <li><code>%</code> 纵向分割</li>
  <li><code>方向键</code> 在pane直接移动</li>
  <li><code>o</code> 到下一个pane</li>
  <li><code>opt+方向键</code> 调整pane大小</li>
  <li><code>{ / }</code>左右pane交换</li>
  <li><code>空格</code> 横竖切换</li>
  <li><code>q</code> 显示pane的编号</li>
  <li><code>x</code> 关闭当前pane</li>
</ul>

<p>我的配置将分割操作改为vi风格的<code>v</code>和<code>s</code>,而pane之间的跳转也改为vi风格,调整pane的大小也是一样。配置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># split windows like vim.  - Note: vim's definition of a horizontal/vertical split is reversed from tmux's
</span><span class="line">unbind '"'
</span><span class="line">unbind %
</span><span class="line">unbind s
</span><span class="line">bind s split-window -v
</span><span class="line">bind S split-window -v -l 40
</span><span class="line">bind v split-window -h
</span><span class="line">bind V split-window -h -l 120
</span><span class="line">
</span><span class="line"># navigate panes with hjkl
</span><span class="line">bind h select-pane -L
</span><span class="line">bind j select-pane -D
</span><span class="line">bind k select-pane -U
</span><span class="line">bind l select-pane -R
</span><span class="line">
</span><span class="line"># resize panes like vim
</span><span class="line">bind &lt; resize-pane -L 10
</span><span class="line">bind L resize-pane -L 100
</span><span class="line">bind &gt; resize-pane -R 10
</span><span class="line">bind R resize-pane -R 100
</span><span class="line">bind - resize-pane -D 5
</span><span class="line">bind D resize-pane -D 36
</span><span class="line">bind + resize-pane -U 5
</span><span class="line">bind U resize-pane -U 35
</span><span class="line">
</span><span class="line"># swap panes
</span><span class="line">bind ^u swapp -U
</span><span class="line">bind ^d swapp -D</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同时还绑定了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bind q killp</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>使用<code>q</code>来关闭pane，免去了关闭确认.但是会覆盖掉原有的<code>p</code>操作，显示pane编号。我不需要这个，覆盖就覆盖了。</p>

<h3 id="tmux-3">脚本化tmux</h3>
<p>tmux可以进入命令行模式，快捷键为<code>:</code>。而且运行的命令在不同的session中都会生效。我绑定了一个命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bind r source-file ~/.tmux.conf \; display "Configuration Reloaded!"</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这样只要输入<code>r</code>,就可以重新加载tmux.conf配置文件。</p>

<p>还可以用来进行自动化布局，例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">selectp -t 0             
</span><span class="line">splitw -h -p 50           
</span><span class="line">selectp -t 1              
</span><span class="line">splitw -v -p 40 'node'  
</span><span class="line">selectp -t 2              </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将其保存在随便在一个文件中，而后使用和上述类似的<code>source-file</code>加载该文件，就会分隔三个pane，其中一个pane 会输入node，开启一个node的js shell。其中的50，40 为占窗口大小的百分比。</p>

<p>同时，tmux还支持运行shell脚本。可以写一个shell脚本进行各种环境初始化和布局初始化。这里就不再介绍了。</p>

<h3 id="section-1">状态栏</h3>

<p>tmux的状态栏配置非常简单。相比screen就…… 比如我的配置中：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">set -g status-left "#[fg=green]s#S:w#I.p#P#[default]"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这一行就将状态栏左侧配置为：<img src="http://foocoder.com/images/mac/statusbar.png" alt="" /></p>

<p>绿色，#S,#I,#p分别表示session，window，pane编号。</p>

<p>当然，你可以让状态行更强大,可以使用<a href="https://github.com/erikw/tmux-powerline">tmux-powerline</a>。
如图<img src="http://foocoder.com/images/mac/powerline-status.png" alt="" /></p>

<p>是一个示例样式。
不过我还是喜欢简洁，而且大多数的信息其实都没什么用。自己并没有使用，不过还是推荐大家试一试，使用也不复杂，按照说明一步步来就可以了。使用powerline需要使用pathc过的字体，在<a href="https://github.com/Lokaltog/powerline-fonts">这里</a>可以找到一些，当然也可以自己patch。</p>

<hr />
<p>最后提供我的整个配置文件，可以在我的<a href="https://github.com/notice501/dotfiles">dotfiles</a>的tmux目录下找到。</p>

<p>欢迎留言交流。也可以关注我的微博<strong><a href="http://weibo.com/notice520">foocoder</a></strong>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我在用的mac软件(2)-终端环境之zsh和z(*nix都适用)]]></title>
    <link href="http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian-2.html/"/>
    <updated>2013-07-18T20:53:00+08:00</updated>
    <id>http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian-2</id>
    <content type="html"><![CDATA[<p>继续上篇介绍我的终端环境。这篇介绍zsh和z，其实这不局限于os x，在所有的*nix系统中都是可用的。</p>

<h1 id="zsh">zsh</h1>

<p>zsh作为bash的替代品，自然很多人要问：why zsh？
 在<a href="http://www.acm.uiuc.edu/workshops/zsh/why.html">Zsh Workshop</a> 有个长长的功能列表，用来回答这个问题。这里讲下我选择zsh的原因，当然，也是介绍zsh强大的功能。</p>

<ol>
  <li>兼容bash。这使得切换到zsh没有任何成本。</li>
  <li>OS X默认的bash版本实在是太老了啊……</li>
  <li>拼写纠正。你总会不小心打错命令。这时，zsh会进行自动拼写纠正，如图：<img src="http://foocoder.com/images/mac/cerrect.png" alt="" /></li>
  <li>更强大的补全。
 <!--more-->
    <ul>
      <li>连按两次tab会列出所有的补全列表并直接开始选择。如图：<img src="http://foocoder.com/images/mac/tabcd.png" alt="" />
 	并且可以用方向键来选择，但是对我这种很少用方向键的人来说只能猛敲tab了么，不是，zsh支持使用<code>&lt;ctrl-n/p/f/b&gt;</code>来选择，perfect!</li>
      <li>命令选项补全。有多少人依然记不住tar的命令选项？中枪的去抄20遍……在zsh中只需要键入<code>tar - &lt;tab&gt;</code>就会列出所有的选项和帮助说明。用了zsh之后<code>man</code>少用了好多……</li>
      <li>命令参数补全。zsh 对命令的参数补全也很强大。键入<code>kill &lt;tab&gt;</code>就会列出所有的进程名和对应的进程号。如图：<img src="http://foocoder.com/images/mac/kill2.png" alt="" />这还不够，试试键入<code>kill sbin &lt;tab&gt;</code>,如图所示:<img src="http://foocoder.com/images/mac/kill1.png" alt="" />自动为sbin这个进程名补全了进程号。kill进程再也不用两步操作了。</li>
    </ul>
  </li>
  <li>更智能的历史命令。在用<code>&lt;ctrl-p&gt;</code>或者<code>方向上键</code>查找历史命令时，zsh支持限制查找。比如，输入<code>ls </code>然后再按方向上键,则只会查找用过的ls命令。而此时使用<code>&lt;ctrl-p&gt;</code>则会仍然按之前的方式查找，忽略<code>ls</code>。</li>
  <li>多个终端会话共享历史记录。经常有多个窗口，tab，tmux的多个session，panel。这些命令历史不能共享实在是很糟糕的回忆。但是有了zsh之后，这些确实成了回忆了,所有的命令历史都可以共享。</li>
  <li>更智能的<code>cd</code>。首先你甚至不需要再输入cd了，直接输入路径即可。第二，在你知道路径的情况下，比如<code>/usr/local/bin</code>你可以输入<code>cd /u/l/b</code>然后按<code>&lt;Tab&gt;</code>进行补全快速输入。这显然不够，zsh还支持路径替换，如果你其实想进入的是<code>/usr/local/bin</code>，不再需要<code>../</code> 了，直接在当前输入<code>cd bin share</code>即可，则<code>bin</code>会替换为<code>share</code>。在之后我会介绍z和autojumper，目录跳转会更方便。 </li>
  <li>更强大的alias。zsh不仅支持普通的alias，例如：<code>alias ls ='ls --color=auto'</code>。zsh还支持后缀alias,即以什么命令打开特定的后缀名文件。例如<code>alias -s js=mvim</code>,输入<code>hello.js</code>，会以vim打开该文件,而不在需要<code>vim hello.js</code>。</li>
  <li>通配符搜索。这也是我最爱的功能之一。之前讲过由于命令补全少用了很多<code>man</code>命令，而这个功能让我少用了很多<code>find</code>命令。	一般的通配符搜索无非是<code>ls -l *.log</code>,如图:<img src="http://foocoder.com/images/mac/ls1.png" alt="" />在zsh中可以做到递归的通配符搜索。使用<code>**/</code>来递归搜索，如图<img src="http://foocoder.com/images/mac/ls2.png" alt="" />是不是在很多场景下可以取代<code>find</code>？</li>
</ol>

<p>以上都是我感觉迁移到zsh之后非常实用的功能。要想从头开始了解和学习zsh，可以访问<a href="http://zsh.sourceforge.net/Guide/zshguide.html">A User’s Guide to the Z-Shell</a>。不过大家都很忙，从头开始自己学习和配置会很累。所以现在说到zsh，不得不提的就是<a href="https://github.com/robbyrussell/oh-my-zsh?source=c">oh-my-zsh</a>,oh-my-zsh是一个开源的zsh配置管理框架，提供了大量实用的功能，主题等。现在基本都是标配了吧。如图是我在用的默认zsh主题<code>robbyrussell</code>，如图<img src="http://foocoder.com/images/mac/gitoh.png" alt="" />可以发它能自动显示当前所在的git分支以及当前本地状态（黄色的小叉表示本地有更新未提交）。</p>

<p>当然zsh也不是完美无缺。在我使用过程中有两点不是很舒服：
1. 自动纠正并不总是那么智能。如图：<img src="http://foocoder.com/images/mac/zhuanyi.png" alt="" />
	但是可以对这些命令使用alias 加上<code>nocorrect</code>前缀，如：</p>

<p><code>alias rake deploy='nocorrect rake deploy'</code></p>

<ol>
  <li>一些符号是zsh中保留的，使用需要转义，如图：<img src="http://foocoder.com/images/mac/wrongcorrect.png" alt="" /></li>
</ol>

<hr />

<p>下面讲下zsh和oh-my-zsh的安装。</p>

<p><strong>使用brew来安装zsh</strong></p>

<p><code>
  brew install zsh
</code></p>

<p><strong>设置zsh为默认</strong></p>

<p>在<code>/etc/shells</code>文件末尾添加</p>

<p><code>
 /usr/local/bin/zsh
</code>	</p>

<p>执行：</p>

<p><code>
 chsh -s /usr/local/bin/zsh
</code></p>

<p>最后记得将<code>~/.bash_prorile</code>或者<code>~/.profile</code>等配置拷贝到~/.zshrc中。</p>

<p><strong>安装oh-my-zsh</strong></p>

<p>自动安装:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以选择自己喜欢的<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">主题</a>。只需要修改<code>~/.zshrc</code>文件中的<code>ZSH_THEME</code>即可。</p>

<h1 id="zautojump">z和autojump</h1>

<p><a href="https://github.com/rupa/z">z</a>和<a href="https://github.com/joelthelion/autojump">autojump</a>的功能类似，前者是简单的shell脚本实现，后者由python实现，功能都是可以方便自动匹配到你最多使用的目录并跳转。我在用的是z，如图<img src="http://foocoder.com/images/mac/zjump.png" alt="" />，我在根目录输入<code>z github</code>可以自动跳转到我常用的<code>notice501.github.com</code>这个目录，也就是本博客的工程目录。超级方便的工具。autojump用法类似，命令为<code>j</code>而不是<code>z</code>两者的安装方式：</p>

<p><strong>z</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git@github.com:rupa/z.git</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而后将z.sh放入环境变量即可。</p>

<p><strong>autojump</strong></p>

<p>autojump可以直接使用brew安装</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew install autojump</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有问题和分享欢迎留言交流。也欢迎关注我的<a href="http://weibo.com/notice520">微博</a>。</p>

]]></content>
  </entry>
  
</feed>
