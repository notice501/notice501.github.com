---
layout: post
title: "每日vim插件--vim中的文本对象及相关插件"
date: 2014-04-14 22:56
comments: true
categories: [vim]
---
今天按读者留言的要求，介绍下文本对象。同时还会介绍我在用的几个文本相关的插件，今天是满满的内容啊。

所谓文本对象，简单来说就是以一定标准分隔符来标识一段文本，比如一个单词，一句话，一段话。

使用文本对象后你会发现你在vim中的移动和操作速度提升了不是一点半点。

在vim中编辑命令的结构如下：

	 <number><command><text object or motion>
	 
可以看到文本对象和motion的操作是完全一致的，第一个是数字，比如3w，就向前移动三个单词。

<!--more-->

文本对象大致有以下几种：

	w  s  p '' ""  <>  []  ()  {} <tag>

其中w表示word，s表示句子，p表示段落，其他的就是昨天介绍过的包围符号，标签用t表示。

文本对象的操作范围有两种，一种用`i`表示,是inner的意思，即不包括单词边上的空格符，亦或是`<`包围符号本身。一种用`a`表示，是arround的意思，和i相反，使用a就包括了空格符或者包围符号本身。

文本对象的编辑命令就是vim中的几个常用编辑命令，分别是

	`y：复制`，`d：删除`,`c：替换`，`v：选中`

说的有点多了，来几个例子相信大家就立刻理解了。（例子中*都是光标所在位置）

比如：

	<*h2>Sample Title</h2>

按下`cit`,文本变为：

	<h2>*</h2>
	
再比如：
	console.log("stay hungry," + "stay *foolish")

按下`da"`，文本变为：

	console.log("stay hungry," +*)
	
再按下`di)`，文本变为：

	console.log()

比如

	Hello Worl*d
	
按下`diw`,文本变为：

	Hello


很容易理解是不是？有没有发现为什么说文本对象会非常方便了？无论光标在文本的哪个位置，都可以直接操作整个文本。体验箭步如飞的感觉吧。

vim还允许使用脚本来自定义文本对象，这就是我们今天要介绍的插件了，这些插件自定义了一些文本对象。

1.CamelCaseMotion

该插件是把驼峰词语的每个单词分开，举个例子：
	
	get*ElementsByClassName

按下`di,w`,则文本变为：
	
	getByClassName
	
非常方便。

2.argtextobj

该插件定义了函数内的参数文本对象。比如：
	
	foo(text, ti*mes, option) {}
	
按下`daa`,则文本变为：

	foo(text, option) {}
	
今天暂时就介绍到这里。都快0点了，赶紧发出来。任何问题都可以回复给我。	



	