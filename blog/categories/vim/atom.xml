<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：vim | Code Rush]]></title>
  <link href="http://notice501.github.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://notice501.github.com/"/>
  <updated>2014-04-03T22:22:05+08:00</updated>
  <id>http://notice501.github.com/</id>
  <author>
    <name><![CDATA[foocoder]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[每天一个vim插件--goyo]]></title>
    <link href="http://notice501.github.com/blog/mei-tian-%5B%3F%5D-ge-vimcha-jian-goyo.html/"/>
    <updated>2014-04-03T21:50:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-tian-[?]-ge-vimcha-jian-goyo</id>
    <content type="html"><![CDATA[<p>一如既往很忙……所以今天还是分享一个可以一句话说明白的插件，也是我非常常用的–<a href="https://github.com/junegunn/goyo.vim">goyo</a></p>

<p>一直非常喜欢写作软件iawriter，goyo让我可以用同样的方式来写代码，当然goyo还免费开源，这比iawriter好。用作者的描述就是：Distraction-free writing in Vim. 不会被任何的其他元素打扰。
<!--more-->
直接上张图：<img src="http://ww4.sinaimg.cn/large/69d56e38gw1ef2r2wod9uj21kw0zkte6.jpg" alt="" />
<img src="https://raw.github.com/junegunn/i/master/goyo.png" alt="" /></p>

<p>第一张是我的配色，第二张是作者的示例。是不是很cool？</p>

<p>安装当然借用vundle了。</p>

<pre><code>nnoremap &lt;Leader&gt;d :Goyo&lt;CR&gt;
</code></pre>

<p>就可以按引导键加逗号呼出goyo模式了。
可以按自己的需求配置宽高和位置：</p>

<ul>
  <li><code>g:goyo_width</code> (default: 80)</li>
  <li><code>g:goyo_margin_top</code> (default: 4)</li>
  <li><code>g:goyo_margin_bottom</code> (default: 4)</li>
  <li><code>g:goyo_linenr</code> (default: 0)</li>
  <li><code>g:goyo_callbacks</code> ([before_funcref, after_funcref])</li>
</ul>

<p>goyo模式中默认禁用了
<a href="https://github.com/bling/vim-airline">vim-airline</a>,
<a href="https://github.com/Lokaltog/vim-powerline">vim-powerline</a>,
<a href="https://github.com/Lokaltog/powerline">powerline</a>,
<a href="https://github.com/itchyny/lightline.vim">lightline.vim</a>, and
<a href="https://github.com/airblade/vim-gitgutter">vim-gitgutter</a>插件。如果需要自定义goyo模式或者一些插件的enable/disable，</p>

<p>可以在vimrc中定义before和after回掉：</p>

<p>```vim
function! s:goyo_before()
  silent !tmux set status off
  set noshowmode
  set noshowcmd
  “ …
endfunction</p>

<p>function! s:goyo_after()
  silent !tmux set status on
  set showmode
  set showcmd
  “ …
endfunction</p>

<p>let g:goyo_callbacks = [function(‘s:goyo_before’), function(‘s:goyo_after’)]
```</p>

<p>可以在<a href="https://github.com/junegunn/goyo.vim/wiki/Customization">这里</a>看到更多的自定义示例</p>

<p>好吧，基本就是翻译了一下……因为插件很简单，文档也很详细。我自己非常喜欢这个插件，希望大家也会喜欢～</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天一个vim插件--有道翻译]]></title>
    <link href="http://notice501.github.com/blog/mei-tian-%5B%3F%5D-ge-vimcha-jian-you-dao-fan-yi.html/"/>
    <updated>2014-04-02T21:34:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-tian-[?]-ge-vimcha-jian-you-dao-fan-yi</id>
    <content type="html"><![CDATA[<p>今天头疼。简短介绍一个实用又好用的插件，在vim中直接进行有道翻译,<a href="https://github.com/ianva/vim-youdao-translater">vim-youdao-translater</a>，来自ianva.我非常喜欢的一个插件,在这里再次感谢作者ianva。</p>

<p>安装就不介绍了，不知道怎么安装看上一篇博客。</p>

<p>使用方式copy自ianva：</p>

<p>在普通模式下，按 ctrl+t， 会翻译当前光标下的单词；</p>

<p>在 visual 模式下选中单词，按 ctrl+t，会翻译选择的单词；</p>

<p>点击引导键再点y，d，可以在命令行输入要翻译的单词；</p>

<p>译文将会在编辑器底部的命令栏显示。 </p>

<p>上述操作的配置：</p>

<pre><code>vnoremap &lt;silent&gt; &lt;C-T&gt; &lt;Esc&gt;:Ydv&lt;CR&gt; 
nnoremap &lt;silent&gt; &lt;C-T&gt; &lt;Esc&gt;:Ydc&lt;CR&gt; 
noremap &lt;leader&gt;yd :Yde&lt;CR&gt;
</code></pre>

<p>明天继续。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天一个vim插件--开篇之vundle]]></title>
    <link href="http://notice501.github.com/blog/mei-tian-%5B%3F%5D-ge-vimcha-jian-kai-pian-zhi-vundle.html/"/>
    <updated>2014-04-01T22:34:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-tian-[?]-ge-vimcha-jian-kai-pian-zhi-vundle</id>
    <content type="html"><![CDATA[<p>一直想写一篇博客介绍我的vim配置和插件，但是这篇博客却难产了快半年……
工作太忙，写博客变成了奢侈的事情。那何不每天写一点点呢？于是决定每天介绍一个vim插件或者一个技巧。</p>

<p>大致看了一下自己的<a href="https://github.com/notice501/dotfiles">vim配置</a>，竟然都快有100个插件之多了……</p>

<p>但是我从来都没有感觉到插件管理有多麻烦，我可以经常更新，删除和安装想用的插件。所以第一个介绍的插件必须是用来管理插件的神器–<a href="https://github.com/gmarik/Vundle.vim">Vundle</a></p>

<p>在使用vundle之前，我使用Pathogen与git submodule来管理Vim插件，而vundle更为强大，不需要再手动操作git了。Vundle会自动去对应的插件git库获取最新的插件。
<!--more--></p>

<p>Vundle的安装非常简单：</p>

<ol>
  <li>当然你需要安装git</li>
  <li>git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</li>
  <li>配置vimrc。我建议像我一样单独写个bundles.vim，(我还是用的Bundle这个名字，但是写这篇博客的时候发现作者已经废弃了这个名字，统一叫做plugin)方便管理。示例如下：</li>
</ol>

<p>```vim
	 set nocompatible              “ be iMproved, required
filetype off                  “ required</p>

<p>” set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
“ alternatively, pass a path where Vundle should install plugins
“let path = ‘~/some/path/here’
“call vundle#rc(path)</p>

<p>” let Vundle manage Vundle, required
Plugin ‘gmarik/vundle’</p>

<p>” The following are examples of different formats supported.
“ Keep Plugin commands between here and filetype plugin indent on.
“ scripts on GitHub repos
Plugin ‘tpope/vim-fugitive’
Plugin ‘Lokaltog/vim-easymotion’
Plugin ‘tpope/vim-rails.git’
“ The sparkup vim script is in a subdirectory of this repo called vim.
“ Pass the path to set the runtimepath properly.
Plugin ‘rstacruz/sparkup’, {‘rtp’: ‘vim/’}
“ scripts from http://vim-scripts.org/vim/scripts.html
Plugin ‘L9’
Plugin ‘FuzzyFinder’
“ scripts not on GitHub
Plugin ‘git://git.wincent.com/command-t.git’
“ git repos on your local machine (i.e. when working on your own plugin)
Plugin ‘file:///home/gmarik/path/to/plugin’
“ …</p>

<p>filetype plugin indent on     “ required
“ To ignore plugin indent changes, instead use:
“filetype plugin on
“
“ Brief help
“ :PluginList          - list configured plugins
“ :PluginInstall(!)    - install (update) plugins
“ :PluginSearch(!) foo - search (or refresh cache first) for foo
“ :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
“
“ see :h vundle for more details or wiki for FAQ
“ NOTE: comments after Plugin commands are not allowed.
“ Put your stuff after this line
```</p>

<p>然后在vimrc的开头引入bundles.vim:</p>

<pre><code>source ~/.vim/bundles.vim
</code></pre>

<p>4.如示例所示，将所有的插件都写成plugin ‘user/repo’即可。vundle会从该库中去取。</p>

<p>如果未加’/’，则默认从vim script: https://github.com/vim-scripts/ 去取
	还可以加上非github库：</p>

<pre><code>Plugin 'git://git.wincent.com/command-t.git'
	
或者本地文件

Plugin 'file///path/from/root/to/plugin'
</code></pre>

<p>5.安装只需输入</p>

<pre><code>:BundleInstall 或者 :pluginInstall
</code></pre>

<p>更新：</p>

<pre><code>:pluginUpdate
</code></pre>

<p>删除：</p>

<pre><code>:pluginClean
</code></pre>

<p>6.vundle 还带了插件搜索功能</p>

<pre><code>:PluginSearch foo
</code></pre>

<p>搜索结果会在新窗口打开，然后可以进行直接安装删除等操作。</p>

<hr />
<p>从Vundle开始，享受vim丰富的插件带来的爽快感吧~</p>
]]></content>
  </entry>
  
</feed>
