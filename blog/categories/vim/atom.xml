<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：vim | Code Rush]]></title>
  <link href="http://notice501.github.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://notice501.github.com/"/>
  <updated>2014-04-14T11:15:21+08:00</updated>
  <id>http://notice501.github.com/</id>
  <author>
    <name><![CDATA[foocoder]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[每日vim插件--surround.vim]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-surround-dot-vim.html/"/>
    <updated>2014-04-13T22:11:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-surround-dot-vim</id>
    <content type="html"><![CDATA[<p>今天介绍一个必备的插件——<a href="https://github.com/tpope/vim-surround">surround.vim</a>,来自Tim Pope大神，很多著名的插件包括pathogen.vim都是出自他手，后面我还会介绍更多他写的插件。</p>

<p>是我最常用的插件之一。这个插件专门用来处理成对的包围符号……比如说括号，单双引号，XML标签等。</p>

<p>使用也非常简单好记，遵循vim本身的规则。</p>

<p>先来看一组实例，就知道这个插件的用途和使用方式了：</p>

<p>光标在</p>

<pre><code>"Hello world!"
</code></pre>

<p>中时按下<code>cs"'</code> ，则会替换双引号为单引号：</p>

<pre><code>'Hello world!'
</code></pre>

<!--more-->

<p>继续按下<code>cs'&lt;q&gt;</code>，则会替换单引号为<q>标签</q></p>

<pre><code>&lt;q&gt;Hello world!&lt;/q&gt;
</code></pre>

<p>按下 <code>cst"</code>，则回到初始的双引号：</p>

<pre><code> "Hello world!"
</code></pre>

<p>要删除符号，则按下<code>ds"</code></p>

<pre><code>Hello world!
</code></pre>

<p>当光标在hello上时，按下<code>ysiw]</code>，则会变为</p>

<pre><code> [Hello] world!
</code></pre>

<p>这个操作为其加上了包围符号。</p>

<p>总结下：</p>

<p>1.删除包围符号的命令是<code>ds</code>,后面加的字符表示要删除的符号。比如：</p>

<pre><code>"Hello *world!"           ds"         Hello world!
</code></pre>

<p>2.替换包围符号的命令是<code>cs</code>,命令后跟两个参数，分别是被替换的符号和需要使用的符号。比如</p>

<pre><code>"Hello *world!"           cs"'        'Hello world!'
</code></pre>

<p>3.添加包围符号的命令是<code>ys</code>(ys可以记为you surround)，命令后同样跟两个参数，第一个是一个vim“动作”（motion）或者是一个文本对象。</p>

<p>其中motion即vim动作，比如说<code>w</code>向后一个单词。文本对象简单的来说主要是来通过一些分隔符来标识一段文本，比如<code>iw</code>就是一个文本对象，即光标下的单词。不理解的朋友可以将光标放置在单词hello的中央，分别试一下<code>ysw</code>和<code>ysiw</code>的区别应该就明白啦。如果大家需要详细介绍motion和文本对象，可以留言或者直接公众账号回复，我看看要不要单独介绍下。</p>

<pre><code>  Hello w*orld!             ysiw)       Hello (world)!
</code></pre>

<p>另外：<code>yss</code>命令可以用于整行操作，忽略中间的空格。
<code>yS</code>和<code>ySS</code>还能让包围内容单独一行并且加上缩进。</p>

<p>4.添加包围符号还有个非常好用的方式：在可视模式v下，按下<code>S</code>后即可添加想要添加的包围符号了。</p>

<p>再说一个小技巧：在包围符号为括时，输入左括号<code>(或者{</code>,则会留一个空格</p>

<pre><code>Hello w*orld!             ysiw(       Hello ( world )!
</code></pre>

<p>而右括号则不留空格，也是非常好用，看编码风格使用。</p>

<p>今天就介绍到这里，欢迎关注我的公众账号，最新的文章都会第一时间推送到。有问题可以直接回复。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日vim插件--缩进显示vim-indent-guides]]></title>
    <link href="http://notice501.github.com/blog/mei-ri-vimcha-jian-suo-jin-xian-shi-vim-indent-guides.html/"/>
    <updated>2014-04-11T17:49:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-ri-vimcha-jian-suo-jin-xian-shi-vim-indent-guides</id>
    <content type="html"><![CDATA[<p>今天有朋友留言问昨天晒配色的图中缩进用的什么插件，那今天就介绍这个缩进插件——<a href="https://github.com/nathanaelkane/vim-indent-guides">vim-indent-guides</a></p>

<p>选择这个插件主要有几个理由：</p>

<ol>
  <li>插件对tab和空格的支持都很好。</li>
  <li>比较美观。</li>
  <li>能够自动适配当前使用的colorscheme来选择缩进颜色（只能是gvim，macvim下适配的不错）</li>
</ol>

<!--more-->
<p>默认的快捷键是<code>&lt;Leader&gt;ig</code>,开关插件。我一般都默认启动就开启,只要设置：</p>

<p><code>vim
let g:indent_guides_enable_on_vim_startup = 1
</code></p>

<p>前面说了缩进的颜色是自动选择的，非常方便，但是想要自定义颜色也是支持的：</p>

<p><code>vim
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
</code></p>

<p>在终端中该插件就不支持颜色自动选择了。只取决于<code>background</code>设置为<code>dark</code>还是<code>light</code>,如果设置了<code>dark</code>,就相当于配置了</p>

<p><code>vim
hi IndentGuidesOdd  ctermbg=black
hi IndentGuidesEven ctermbg=darkgrey
</code>
来几张图，图上标注了相应的配置：</p>

<p><img src="http://ww4.sinaimg.cn/large/69d56e38gw1efbth8m9aij20cg0cgta5.jpg" alt="" />
<img src="http://ww2.sinaimg.cn/large/69d56e38gw1efbtngrerjj20cg0cg3zt.jpg" alt="" />
<img src="http://ww2.sinaimg.cn/large/69d56e38gw1efbtqa6k47j20cg0cgjsq.jpg" alt="" /></p>

<p>这个插件并不能很好的标记出tab和空格混用的情况，只能显示当前缩进。所以我在我的vimrc中加了一行：
<code>
" highlight tabs and trailing spaces
set list
set listchars=tab:&gt;-,trail:-,extends:&gt;,precedes:&lt;
</code>
这样tab会被显示为&gt;-，而尾部空格被显示为-，这样写出来的代码就不会再有杂乱符号啦。</p>

<p>今天就介绍到这里。我开通了一个微信公众账号，以后每天的文章会通过微信公众账号推送，欢迎关注。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天一个vim插件--我的配色 molokai]]></title>
    <link href="http://notice501.github.com/blog/mei-tian-%5B%3F%5D-ge-vimcha-jian-wo-de-pei-se-molokai.html/"/>
    <updated>2014-04-10T21:24:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-tian-[?]-ge-vimcha-jian-wo-de-pei-se-molokai</id>
    <content type="html"><![CDATA[<p>今天其实不介绍插件。因为有一些朋友问，所以今天单独介绍下我的配色和字体。</p>

<p>配色使用的是我钟爱的monokai，但是换了深色配色，使用了一个<a href="https://github.com/tomasr/molokai">molokai</a>配色插件。之所以叫molokai，因为这个配色是monokai的修改版，将monokai的背景色改为了深色。我想要一个深色背景的molokai.正和我意啊。</p>

<p>下面是两张作者的原图：
<!--more--></p>

<p><img src="http://www.winterdom.com/weblog/content/binary/WindowsLiveWriter/MolokaiforVim_8602/molokai_normal_small_3.png" alt="" /></p>

<p><img src="http://www.winterdom.com/weblog/content/binary/WindowsLiveWriter/MolokaiforVim_8602/molokai_original_small_3.png" alt="" /></p>

<p>如果要使用monokai原始的背景色，加上配置：</p>

<p><code>
let g:molokai_original = 1
</code></p>

<p>下面再放上一张我自己的图：
<img src="http://ww1.sinaimg.cn/large/69d56e38gw1efatpzm085j21kw0zrdnu.jpg" alt="" /></p>

<p>两者的差别除了缩进显示之外就是字体了。</p>

<p>字体也是我非常喜欢，精挑细选的字体<a href="https://github.com/adobe/source-code-pro">Source code pro</a></p>

<p><img src="http://ww2.sinaimg.cn/large/69d56e38gw1efatye9ls3j20lw0haacp.jpg" alt="" /></p>

<p>链接里有下载和安装方法，喜欢就试试吧。</p>

<hr />
<p>4月11号更新：
看到下面评论有晒自己的配色，想起来有个repo，里面收集了非常多的vim 配色。
这里也贴出来——<a href="https://github.com/flazz/vim-colorschemes">vim-colorschemes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天一个vim插件--vim-multiple-cursors]]></title>
    <link href="http://notice501.github.com/blog/mei-tian-%5B%3F%5D-ge-vimcha-jian-vim-multiple-cursors.html/"/>
    <updated>2014-04-09T22:19:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-tian-[?]-ge-vimcha-jian-vim-multiple-cursors</id>
    <content type="html"><![CDATA[<p>前几天清明休假了。每日插件也就休息了几天。不过休假搞的比上班还累……</p>

<p>今天介绍一款我用的非常多，也非常有用的插件–<a href="">vim-multiple-cursors</a>。</p>

<p>这个插件copy了sublime text的多重光标选取功能，非常强大。</p>

<p>sublime text 官网有几张图来介绍sublime text的多重选取功能，插件作者也实现了一样的效果：
<img src="http://ww1.sinaimg.cn/large/69d56e38gw1ef9pr4t1i2g20k406ojtw.gif" alt="" /></p>

<!--more-->

<p>上图按键：</p>

<ul>
  <li>fp跳到p处</li>
  <li>按下<code>&lt;C-n&gt;</code>选中光标下的单词</li>
  <li>继续按下<code>&lt;C-n&gt;</code>两次选中另外两个相同的单词</li>
  <li>按下c进行修改</li>
  <li>键入修改</li>
  <li>按下 <code>&lt;Esc&gt;</code> 退出</li>
</ul>

<p><img src="http://ww1.sinaimg.cn/large/69d56e38gw1ef9pzm3d13g20sy0900zt.gif" alt="" /></p>

<p>上图按键：</p>

<ul>
  <li>按下V选中整行</li>
  <li>按下G到达末行</li>
  <li>按下<code>&lt;C-n&gt;</code> 在每行的开头加上一个光标并返回普通模式</li>
  <li>按下I在每行的头部插入</li>
  <li>键入”, 按下<code>&lt;C-e&gt;</code>到达行末, 键入另一个”和逗号</li>
  <li>然后将每个光标都下移一行，按下delete	</li>
</ul>

<p>再也不用羡慕sublime了。</p>

<p>使用也非常简单，几乎0配置。</p>

<p>默认的mapping：</p>

<p><code>
" Default mapping
let g:multi_cursor_next_key='&lt;C-n&gt;'
let g:multi_cursor_prev_key='&lt;C-p&gt;'
let g:multi_cursor_skip_key='&lt;C-x&gt;'
let g:multi_cursor_quit_key='&lt;Esc&gt;'
</code>
在普通模式下，按下<code>Ctrl-n</code>开始进入可视模式并选中光标下的单词，继续按<code>Ctrl-n</code>选择下一个相同的单词，按下<code>Ctrl-p</code>往回选一个，<code>Ctrl-x</code>则跳过下一个相同单词。</p>

<p>选中后就可以对单词进行批量改动了，比如按下c，就同时修改选中单词。</p>

<p>插件还支持正则匹配，不过要用到正则去匹配的时候我就用%s来替换了。要了解详情可以去插件的github页继续了解。</p>

<p>今天就介绍这个性感无比的插件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天一个vim插件--goyo]]></title>
    <link href="http://notice501.github.com/blog/mei-tian-%5B%3F%5D-ge-vimcha-jian-goyo.html/"/>
    <updated>2014-04-03T21:50:00+08:00</updated>
    <id>http://notice501.github.com/blog/mei-tian-[?]-ge-vimcha-jian-goyo</id>
    <content type="html"><![CDATA[<p>一如既往很忙……所以今天还是分享一个可以一句话说明白的插件，也是我非常常用的–<a href="https://github.com/junegunn/goyo.vim">goyo</a></p>

<p>一直非常喜欢写作软件iawriter，goyo让我可以用同样的方式来写代码，当然goyo还免费开源，这比iawriter好。用作者的描述就是：Distraction-free writing in Vim. 不会被任何的其他元素打扰。
<!--more-->
直接上张图：<img src="http://ww4.sinaimg.cn/large/69d56e38gw1ef2r2wod9uj21kw0zkte6.jpg" alt="" />
<img src="https://raw.github.com/junegunn/i/master/goyo.png" alt="" /></p>

<p>第一张是我的配色，第二张是作者的示例。是不是很cool？</p>

<p>安装当然借用vundle了。</p>

<pre><code>nnoremap &lt;Leader&gt;d :Goyo&lt;CR&gt;
</code></pre>

<p>就可以按引导键加逗号呼出goyo模式了。
可以按自己的需求配置宽高和位置：</p>

<ul>
  <li><code>g:goyo_width</code> (default: 80)</li>
  <li><code>g:goyo_margin_top</code> (default: 4)</li>
  <li><code>g:goyo_margin_bottom</code> (default: 4)</li>
  <li><code>g:goyo_linenr</code> (default: 0)</li>
  <li><code>g:goyo_callbacks</code> ([before_funcref, after_funcref])</li>
</ul>

<p>goyo模式中默认禁用了
<a href="https://github.com/bling/vim-airline">vim-airline</a>,
<a href="https://github.com/Lokaltog/vim-powerline">vim-powerline</a>,
<a href="https://github.com/Lokaltog/powerline">powerline</a>,
<a href="https://github.com/itchyny/lightline.vim">lightline.vim</a>, and
<a href="https://github.com/airblade/vim-gitgutter">vim-gitgutter</a>插件。如果需要自定义goyo模式或者一些插件的enable/disable，</p>

<p>可以在vimrc中定义before和after回掉：</p>

<p>```vim
function! s:goyo_before()
  silent !tmux set status off
  set noshowmode
  set noshowcmd
  “ …
endfunction</p>

<p>function! s:goyo_after()
  silent !tmux set status on
  set showmode
  set showcmd
  “ …
endfunction</p>

<p>let g:goyo_callbacks = [function(‘s:goyo_before’), function(‘s:goyo_after’)]
```</p>

<p>可以在<a href="https://github.com/junegunn/goyo.vim/wiki/Customization">这里</a>看到更多的自定义示例</p>

<p>好吧，基本就是翻译了一下……因为插件很简单，文档也很详细。我自己非常喜欢这个插件，希望大家也会喜欢～</p>

]]></content>
  </entry>
  
</feed>
