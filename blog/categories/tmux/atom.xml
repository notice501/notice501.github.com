<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：tmux | Code Rush]]></title>
  <link href="http://notice501.github.com/blog/categories/tmux/atom.xml" rel="self"/>
  <link href="http://notice501.github.com/"/>
  <updated>2014-04-03T22:22:05+08:00</updated>
  <id>http://notice501.github.com/</id>
  <author>
    <name><![CDATA[foocoder]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[终端环境之tmux]]></title>
    <link href="http://notice501.github.com/blog/zhong-duan-huan-jing-zhi-tmux.html/"/>
    <updated>2013-07-28T17:09:00+08:00</updated>
    <id>http://notice501.github.com/blog/zhong-duan-huan-jing-zhi-tmux</id>
    <content type="html"><![CDATA[<h2 id="tmux">今天继续介绍我的终端环境，tmux。</h2>

<p>tmux 是一个优秀的终端复用软件，类似 GNU Screen，但来自于OpenBSD，采用BSD授权。使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机。简单来说，tmux是一个<code>multiplexers</code>,他可以让你同时运行多个终端，在多个终端之间切换。</p>

<h2 id="why-tmux">why tmux?</h2>
<p>用一个工具的第一问自然还是为什么要用。其实当时使用tmux的原因很简单。工作中经常需要长时间的编译。在想要回家时编译还没结束，可以在计算机休眠的情况下继续编译。简单的寻觅一番之后，就发现了tmux。而且远超预期，就一直用了下来。</p>

<p>其他让我非常喜欢的功能有：</p>

<!--more-->

<ol>
  <li>window，pane的概念可以很好地进行多窗口切换，窗口分割。</li>
  <li>状态行配置很容易。</li>
  <li>vi 模式</li>
  <li>复制粘贴缓冲区</li>
  <li>脚本化.通过脚本可以自动化窗口布局。</li>
</ol>

<h2 id="tmux-1">tmux简单介绍</h2>

<p>tmux是典型的c/s架构。有如下几个概念。</p>

<ul>
  <li>session. session是一个特定的终端组合。输入tmux就可以打开一个新的session。</li>
  <li>window。window 为session中的终端。</li>
  <li>pane 。pane为一个window分隔出来的各个间隔，即window中的终端。</li>
</ul>

<h2 id="tmux-2">tmux的使用</h2>
<p>正如上所述，在终端中输入<code>tmux</code>就可以打开一个tmux session。如图：
<img src="http://foocoder.com/images/mac/tmux.png" alt="" /></p>

<p>底部会出现状态栏。左边表示当前为session 0， window 1， pane 1，中间会显示当前窗口编号和路径，右侧会本机信息和时间。这并不是默认设置，但是配置tmux的状态行非常容易，在后面我会简单的介绍如何配置tmux，并提供我的配置文件。</p>

<p>tmux的所有操作必须先使用一个前缀键进入命令模式，或者说进入控制台，就像vi中的<code>esc</code>。默认的前缀为<code>&lt;c-b&gt;</code>,比较难按，很多人会改为screen中的<code>&lt;c-a&gt;</code>，来保持一致性。可是这和emacs风格的终端回到行首的快捷键冲突，我使用的是<code>c-k</code>。大家可以根据自己喜好来配置：</p>

<p><code>
set -g prefix ^k
unbind ^b
</code>
输入<code>?</code>显示所有的bind-key，如图<img src="http://foocoder.com/images/mac/allbindkey.png" alt="" /></p>

<p>如果设置了<code>setw -g mode-keys vi</code>,可以使用vi 的 <code>j</code> <code>k</code>风格快捷键上下浏览。这些bind-key显示了所有的tmux操作。按q退出。</p>

<p>下面就介绍一些常用的操作，为了方便大家查看，所有的bind-key都是系统默认的，而不是我自己配置的。省略了前缀键。</p>

<h3 id="section">复制粘贴</h3>
<ul>
  <li><code>[</code> 进入复制模式。</li>
  <li><code>]</code> 粘贴</li>
</ul>

<p>进入复制模式后，可以用vi风格的快捷键进行移动（按上文的设置）。按下<code>sapce</code>就可以选择文本。回车键进行复制。然后再通过<code>]</code>进行粘贴。</p>

<p>这里我将复制粘贴设为类似vi的模式,使用<code>esc</code>进入复制模式，<code>v</code>进入粘贴模式，选择后<code>y</code>进行复制。<code>&lt;Prefix-p&gt;</code>进行粘贴.</p>

<p><code>
# Copy and paste like in vim
unbind [
bind Escape copy-mode
unbind p
bind p paste-buffer
bind -t vi-copy 'v' begin-selection
bind -t vi-copy 'y' copy-selection
</code></p>

<p>所有的复制都会被记录到缓冲区，输入<code>#</code>或者 <code>tmux list-buffers</code>查看缓冲区,同时也进入了复制模式。也可以使用”=”来选择并粘贴缓冲区内容。tmux的缓冲区和系统剪贴板是完全独立的，为了复制到系统剪贴板，我做了如下处理，对于mac os X用户：</p>

<p>第一步：</p>

<p><code>
brew install reattach-to-user-namespace
</code></p>

<p>而后增加配置：</p>

<p><code>
# getting tmux to copy a buffer to system clipboard
set-option -g default-command "reattach-to-user-namespace -l zsh" # or bash...
bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy" \; display-message "Copied tmux buffer to system clipboard"
bind C-v run "reattach-to-user-namespace pbpaste | tmux load-buffer - &amp;&amp; tmux paste-buffer"
</code></p>

<p>这样，在tmux中进行复制后。按下前缀键后键入<code>y</code>,就会在状态栏显示已粘贴到剪贴板，如图<img src="http://foocoder.com/images/mac/paste.png" alt="" />
此时，就可以用<code>cmd-v</code>进行粘贴了。系统剪贴板的也可以键入<code>&lt;C-v&gt;</code>粘贴。（当然，更方便的还是直接<code>cmd-v</code>,无需前缀键）。</p>

<p>对于linux用户,可以使用xclip,配置如下：</p>

<p><code>
bind y run-shell "tmux show-buffer | xclip -sel clip -i" \; display-message "Copied tmux buffer to system clipboard"
</code>
同样键入<code>y</code>复制buffer中最新的内容到系统剪贴板。</p>

<h3 id="session">session操作</h3>
<ul>
  <li><code>d</code> deattch当前session。输入<code>tmux attach [-t sessionname]</code>重新进入该session。</li>
  <li><code>tmux ls</code> 列出所有session。如图:<img src="http://foocoder.com/images/mac/allsession.png" alt="" />输入，退出当前session后，<code>tmux attach -t 1</code>即可切换到名字为1的session。</li>
  <li><code>$</code> 重命名当前session</li>
  <li><code>&lt;c-z&gt;</code> 挂起当前session</li>
</ul>

<h3 id="window">window操作</h3>
<ul>
  <li><code>c</code> 创建一个新的window</li>
  <li><code>b</code> 重命名当前window</li>
  <li><code>&amp;</code> 关闭当前window</li>
  <li><code>n</code> 移动到下一个窗口</li>
  <li><code>p</code> 移动到前一个窗口</li>
  <li><code>l</code> 切换到上一个窗口</li>
  <li><code>w</code> 列出所有窗口编号,并进行选择切换</li>
  <li><code>编号</code> 移动到指定编号的窗口。</li>
  <li><code>.</code> 修改窗口编号，相当于排序。</li>
  <li><code>f</code> 搜索所有的窗口。非常方便的功能。如图<img src="http://foocoder.com/images/mac/search.png" alt="" /></li>
</ul>

<h4 id="pane">pane操作</h4>
<ul>
  <li><code>"</code> 横向分割</li>
  <li><code>%</code> 纵向分割</li>
  <li><code>方向键</code> 在pane直接移动</li>
  <li><code>o</code> 到下一个pane</li>
  <li><code>opt+方向键</code> 调整pane大小</li>
  <li><code>{ / }</code>左右pane交换</li>
  <li><code>空格</code> 横竖切换</li>
  <li><code>q</code> 显示pane的编号</li>
  <li><code>x</code> 关闭当前pane</li>
</ul>

<p>我的配置将分割操作改为vi风格的<code>v</code>和<code>s</code>,而pane之间的跳转也改为vi风格,调整pane的大小也是一样。配置如下：</p>

<p>```
# split windows like vim.  - Note: vim’s definition of a horizontal/vertical split is reversed from tmux’s
unbind ‘”’
unbind %
unbind s
bind s split-window -v
bind S split-window -v -l 40
bind v split-window -h
bind V split-window -h -l 120</p>

<h1 id="navigate-panes-with-hjkl">navigate panes with hjkl</h1>
<p>bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R</p>

<h1 id="resize-panes-like-vim">resize panes like vim</h1>
<p>bind &lt; resize-pane -L 10
bind L resize-pane -L 100
bind &gt; resize-pane -R 10
bind R resize-pane -R 100
bind - resize-pane -D 5
bind D resize-pane -D 36
bind + resize-pane -U 5
bind U resize-pane -U 35</p>

<h1 id="swap-panes">swap panes</h1>
<p>bind ^u swapp -U
bind ^d swapp -D
```</p>

<p>同时还绑定了</p>

<p><code>
bind q killp
</code>
使用<code>q</code>来关闭pane，免去了关闭确认.但是会覆盖掉原有的<code>p</code>操作，显示pane编号。我不需要这个，覆盖就覆盖了。</p>

<h3 id="tmux-3">脚本化tmux</h3>
<p>tmux可以进入命令行模式，快捷键为<code>:</code>。而且运行的命令在不同的session中都会生效。我绑定了一个命令：</p>

<p><code>
bind r source-file ~/.tmux.conf \; display "Configuration Reloaded!"
</code>
这样只要输入<code>r</code>,就可以重新加载tmux.conf配置文件。</p>

<p>还可以用来进行自动化布局，例如：</p>

<p><code>
selectp -t 0             
splitw -h -p 50           
selectp -t 1              
splitw -v -p 40 'node'  
selectp -t 2              
</code></p>

<p>将其保存在随便在一个文件中，而后使用和上述类似的<code>source-file</code>加载该文件，就会分隔三个pane，其中一个pane 会输入node，开启一个node的js shell。其中的50，40 为占窗口大小的百分比。</p>

<p>同时，tmux还支持运行shell脚本。可以写一个shell脚本进行各种环境初始化和布局初始化。这里就不再介绍了。</p>

<h3 id="section-1">状态栏</h3>

<p>tmux的状态栏配置非常简单。相比screen就…… 比如我的配置中：</p>

<p><code>
set -g status-left "#[fg=green]s#S:w#I.p#P#[default]"
</code></p>

<p>这一行就将状态栏左侧配置为：<img src="http://foocoder.com/images/mac/statusbar.png" alt="" /></p>

<p>绿色，#S,#I,#p分别表示session，window，pane编号。</p>

<p>当然，你可以让状态行更强大,可以使用<a href="https://github.com/erikw/tmux-powerline">tmux-powerline</a>。
如图<img src="http://foocoder.com/images/mac/powerline-status.png" alt="" /></p>

<p>是一个示例样式。
不过我还是喜欢简洁，而且大多数的信息其实都没什么用。自己并没有使用，不过还是推荐大家试一试，使用也不复杂，按照说明一步步来就可以了。使用powerline需要使用pathc过的字体，在<a href="https://github.com/Lokaltog/powerline-fonts">这里</a>可以找到一些，当然也可以自己patch。</p>

<hr />
<p>最后提供我的整个配置文件，可以在我的<a href="https://github.com/notice501/dotfiles">dotfiles</a>的tmux目录下找到。</p>

<p>欢迎留言交流。也可以关注我的微博<strong><a href="http://weibo.com/notice520">foocoder</a></strong>。</p>

]]></content>
  </entry>
  
</feed>
